# 0 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/asiopal/TCPClient.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/asiopal/TCPClient.cpp"
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/asiopal/TCPClient.cpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/TCPClient.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/TCPClient.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IExecutor.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IExecutor.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/ITimer.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/ITimer.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h"
# 1 "/usr/include/c++/15/cstdint" 1 3
# 40 "/usr/include/c++/15/cstdint" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvariadic-macros"

#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wc++23-extensions"
# 336 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;


#pragma GCC visibility push(default)


  extern "C++" __attribute__ ((__noreturn__, __always_inline__))
  inline void __terminate() noexcept
  {
    void terminate() noexcept __attribute__ ((__noreturn__,__cold__));
    terminate();
  }
#pragma GCC visibility pop
}
# 369 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 573 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
#pragma GCC visibility push(default)




  __attribute__((__always_inline__))
  constexpr inline bool
  __is_constant_evaluated() noexcept
  {





    return __builtin_is_constant_evaluated();



  }
#pragma GCC visibility pop
}
# 617 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
#pragma GCC visibility push(default)

  extern "C++" __attribute__ ((__noreturn__)) __attribute__((__cold__))
  void
  __glibcxx_assert_fail
    (const char* __file, int __line, const char* __function,
     const char* __condition)
  noexcept;
#pragma GCC visibility pop
}
# 648 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
  __attribute__((__always_inline__,__visibility__("default")))
  inline void
  __glibcxx_assert_fail()
  { }
}
# 727 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/os_defines.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/15/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 415 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 416 "/usr/include/features.h" 2 3 4
# 523 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 730 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 731 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 732 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 524 "/usr/include/features.h" 2 3 4
# 547 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 548 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/c++/15/bits/os_defines.h" 2 3
# 728 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/cpu_defines.h" 1 3
# 731 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 2 3
# 887 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace __gnu_cxx
{
  typedef __decltype(0.0bf16) __bfloat16_t;
}
# 953 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
#pragma GCC diagnostic pop
# 41 "/usr/include/c++/15/cstdint" 2 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdint.h" 3 4
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-least.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stdint-least.h" 3 4
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
# 42 "/usr/include/stdint.h" 2 3 4





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 60 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 76 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 90 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 12 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdint.h" 2 3 4
#pragma GCC diagnostic pop
# 48 "/usr/include/c++/15/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
# 144 "/usr/include/c++/15/cstdint" 3
}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/TimeDuration.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/TimeDuration.h"

# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/TimeDuration.h"
namespace openpal
{

template <class T>
class TimeDurationBase
{

public:

 TimeDurationBase() : milliseconds(0)
 {}

 T GetMilliseconds() const
 {
  return milliseconds;
 }

 bool IsNegative() const
 {
  return milliseconds < 0;
 }

 operator T() const
 {
  return milliseconds;
 }

 T milliseconds;

protected:

 TimeDurationBase(T milliseconds) : milliseconds(milliseconds)
 {}

};





class TimeDuration : public TimeDurationBase<int64_t>
{

public:

 TimeDuration();

 bool IsPostive() const;

 TimeDuration MultiplyBy(int factor) const
 {
  return TimeDuration(factor * milliseconds);
 }

 static TimeDuration Min();

 static TimeDuration Max();

 static TimeDuration Zero();

 static TimeDuration Milliseconds(int64_t milliseconds);

 static TimeDuration Seconds(int64_t seconds);

 static TimeDuration Minutes(int64_t minutes);

 static TimeDuration Hours(int64_t hours);

 static TimeDuration Days(int64_t days);

private:
 TimeDuration(int64_t aMilliseconds);
};

bool operator==(const TimeDuration& lhs, const TimeDuration& rhs);

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h" 2

namespace openpal
{




class MonotonicTimestamp
{

public:

 static MonotonicTimestamp Max();
 static MonotonicTimestamp Min();

 bool IsMax() const;
 bool IsMin() const;

 MonotonicTimestamp();

 explicit MonotonicTimestamp(int64_t milliseconds);


 MonotonicTimestamp Add(const TimeDuration& duration) const;

 int64_t milliseconds;
};

bool operator==(const MonotonicTimestamp& first, const MonotonicTimestamp& second);
bool operator<(const MonotonicTimestamp& first, const MonotonicTimestamp& second);
bool operator>(const MonotonicTimestamp& first, const MonotonicTimestamp& second);


}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/ITimer.h" 2

namespace openpal
{




class ITimer
{
public:
 virtual ~ITimer() {}
 virtual void Cancel() = 0;
 virtual MonotonicTimestamp ExpiresAt() = 0;
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IExecutor.h" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IMonotonicTimeSource.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IMonotonicTimeSource.h"
namespace openpal
{

class IMonotonicTimeSource
{
public:

 virtual ~IMonotonicTimeSource() {}


 virtual MonotonicTimestamp GetTime() = 0;
};

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IExecutor.h" 2

# 1 "/usr/include/c++/15/functional" 1 3
# 51 "/usr/include/c++/15/functional" 3
# 1 "/usr/include/c++/15/bits/stl_function.h" 1 3
# 60 "/usr/include/c++/15/bits/stl_function.h" 3
# 1 "/usr/include/c++/15/bits/move.h" 1 3
# 37 "/usr/include/c++/15/bits/move.h" 3
# 1 "/usr/include/c++/15/type_traits" 1 3
# 66 "/usr/include/c++/15/type_traits" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 67 "/usr/include/c++/15/type_traits" 2 3


# 68 "/usr/include/c++/15/type_traits" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp>
    class reference_wrapper;
# 91 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      using value_type = _Tp;
      using type = integral_constant<_Tp, __v>;
      constexpr operator value_type() const noexcept { return value; }


      constexpr value_type operator()() const noexcept { return value; }

    };


  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;




  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;



  using true_type = __bool_constant<true>;


  using false_type = __bool_constant<false>;
# 132 "/usr/include/c++/15/type_traits" 3
  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { using type = _Tp; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<bool>
    struct __conditional
    {
      template<typename _Tp, typename>
 using type = _Tp;
    };

  template<>
    struct __conditional<false>
    {
      template<typename, typename _Up>
 using type = _Up;
    };


  template<bool _Cond, typename _If, typename _Else>
    using __conditional_t
      = typename __conditional<_Cond>::template type<_If, _Else>;


  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  namespace __detail
  {

    template<typename _Tp, typename...>
      using __first_t = _Tp;


    template<typename... _Bn>
      auto __or_fn(int) -> __first_t<false_type,
         __enable_if_t<!bool(_Bn::value)>...>;

    template<typename... _Bn>
      auto __or_fn(...) -> true_type;

    template<typename... _Bn>
      auto __and_fn(int) -> __first_t<true_type,
          __enable_if_t<bool(_Bn::value)>...>;

    template<typename... _Bn>
      auto __and_fn(...) -> false_type;
  }




  template<typename... _Bn>
    struct __or_
    : decltype(__detail::__or_fn<_Bn...>(0))
    { };

  template<typename... _Bn>
    struct __and_
    : decltype(__detail::__and_fn<_Bn...>(0))
    { };

  template<typename _Pp>
    struct __not_
    : __bool_constant<!bool(_Pp::value)>
    { };
# 282 "/usr/include/c++/15/type_traits" 3
  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct remove_cv;
  template<typename>
    struct is_const;


  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;





  template<typename _Tp>
    struct is_void
    : public false_type { };

  template<>
    struct is_void<void>
    : public true_type { };

  template<>
    struct is_void<const void>
    : public true_type { };

  template<>
    struct is_void<volatile void>
    : public true_type { };

  template<>
    struct is_void<const volatile void>
    : public true_type { };


  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };




  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };







  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 465 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 525 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };



  template<typename _Tp>
    struct is_array
    : public __bool_constant<__is_array(_Tp)>
    { };
# 552 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_pointer
    : public __bool_constant<__is_pointer(_Tp)>
    { };
# 579 "/usr/include/c++/15/type_traits" 3
  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };



  template<typename _Tp>
    struct is_member_object_pointer
    : public __bool_constant<__is_member_object_pointer(_Tp)>
    { };
# 620 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_member_function_pointer
    : public __bool_constant<__is_member_function_pointer(_Tp)>
    { };
# 641 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_enum
    : public __bool_constant<__is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public __bool_constant<__is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public __bool_constant<__is_class(_Tp)>
    { };



  template<typename _Tp>
    struct is_function
    : public __bool_constant<__is_function(_Tp)>
    { };
# 680 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_null_pointer
    : public false_type { };

  template<>
    struct is_null_pointer<std::nullptr_t>
    : public true_type { };

  template<>
    struct is_null_pointer<const std::nullptr_t>
    : public true_type { };

  template<>
    struct is_null_pointer<volatile std::nullptr_t>
    : public true_type { };

  template<>
    struct is_null_pointer<const volatile std::nullptr_t>
    : public true_type { };



  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } ;






  template<typename _Tp>
    struct is_reference
    : public __bool_constant<__is_reference(_Tp)>
    { };
# 734 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };



  template<typename _Tp>
    struct is_object
    : public __bool_constant<__is_object(_Tp)>
    { };
# 760 "/usr/include/c++/15/type_traits" 3
  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __bool_constant<!is_fundamental<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_pointer
    : public __bool_constant<__is_member_pointer(_Tp)>
    { };
# 798 "/usr/include/c++/15/type_traits" 3
  template<typename, typename>
    struct is_same;


  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  __extension__
  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long
# 823 "/usr/include/c++/15/type_traits" 3
   >;


  __extension__
  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long
# 843 "/usr/include/c++/15/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;






  template<typename _Tp>
    struct is_const
    : public __bool_constant<__is_const(_Tp)>
    { };
# 874 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_volatile
    : public __bool_constant<__is_volatile(_Tp)>
    { };
# 895 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct
   
    is_trivial
    : public __bool_constant<__is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public __bool_constant<__is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public __bool_constant<__is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };






  template<typename _Tp>
    struct
   
    is_pod
    : public __bool_constant<__is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct
   
    is_literal_type
    : public __bool_constant<__is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public __bool_constant<__is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public __bool_constant<__is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public __bool_constant<__is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public __bool_constant<__is_abstract(_Tp)>
    { };


  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public __bool_constant<_Tp(-1) < _Tp(0)>
    { };



  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type
    { };


  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);


  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename>
    struct remove_all_extents;


  template<typename _Tp>
    struct __is_array_known_bounds
    : public false_type
    { };

  template<typename _Tp, size_t _Size>
    struct __is_array_known_bounds<_Tp[_Size]>
    : public true_type
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public false_type
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds<_Tp[]>
    : public true_type
    { };
# 1047 "/usr/include/c++/15/type_traits" 3
  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };



  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };







  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };



  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    using __is_constructible_impl
      = __bool_constant<__is_constructible(_Tp, _Args...)>;



  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    using __add_lval_ref_t = __add_lvalue_reference(_Tp);
# 1191 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_copy_constructible
    : public __is_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    using __add_rval_ref_t = __add_rvalue_reference(_Tp);
# 1218 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct is_move_constructible
    : public __is_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __bool_constant<__is_nothrow_constructible(_Tp, _Args...)>;



  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    using __is_assignable_impl = __bool_constant<__is_assignable(_Tp, _Up)>;



  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __is_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_assignable_impl<__add_lval_ref_t<_Tp>,
      __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_assignable_impl<__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    using __is_nothrow_assignable_impl
      = __bool_constant<__is_nothrow_assignable(_Tp, _Up)>;



  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nothrow_assignable_impl<__add_lval_ref_t<_Tp>,
       __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nothrow_assignable_impl<__add_lval_ref_t<_Tp>,
       __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    using __is_trivially_constructible_impl
      = __bool_constant<__is_trivially_constructible(_Tp, _Args...)>;



  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __is_trivially_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __is_trivially_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };
# 1370 "/usr/include/c++/15/type_traits" 3
  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      using type = decltype(__test(declval<_Tp>()));
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>::type
    { };



  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    using __is_trivially_assignable_impl
      = __bool_constant<__is_trivially_assignable(_Tp, _Up)>;



  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __is_trivially_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_assignable_impl<__add_lval_ref_t<_Tp>,
         __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_assignable_impl<__add_lval_ref_t<_Tp>,
         __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public __bool_constant<__has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };




  template<typename _Tp>
    struct rank
    : public integral_constant<std::size_t, __array_rank(_Tp)> { };
# 1507 "/usr/include/c++/15/type_traits" 3
  template<typename, unsigned _Uint = 0>
    struct extent
    : public integral_constant<size_t, 0> { };

  template<typename _Tp, size_t _Size>
    struct extent<_Tp[_Size], 0>
    : public integral_constant<size_t, _Size> { };

  template<typename _Tp, unsigned _Uint, size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public extent<_Tp, _Uint - 1>::type { };

  template<typename _Tp>
    struct extent<_Tp[], 0>
    : public integral_constant<size_t, 0> { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public extent<_Tp, _Uint - 1>::type { };






  template<typename _Tp, typename _Up>
    struct is_same
    : public __bool_constant<__is_same(_Tp, _Up)>
    { };
# 1549 "/usr/include/c++/15/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public __bool_constant<__is_base_of(_Base, _Derived)>
    { };
# 1564 "/usr/include/c++/15/type_traits" 3
  template<typename _From, typename _To>
    struct is_convertible
    : public __bool_constant<__is_convertible(_From, _To)>
    { };
# 1607 "/usr/include/c++/15/type_traits" 3
  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;
# 1667 "/usr/include/c++/15/type_traits" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
  template<typename _Tp, typename... _Args>
    struct __is_nothrow_new_constructible_impl
    : __bool_constant<
 noexcept(::new(std::declval<void*>()) _Tp(std::declval<_Args>()...))
      >
    { };

  template<typename _Tp, typename... _Args>
    constexpr bool __is_nothrow_new_constructible
      = __and_<is_constructible<_Tp, _Args...>,
        __is_nothrow_new_constructible_impl<_Tp, _Args...>>::value;
#pragma GCC diagnostic pop




  template<typename _Tp>
    struct remove_const
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { using type = _Tp; };


  template<typename _Tp>
    struct remove_volatile
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { using type = _Tp; };



  template<typename _Tp>
    struct remove_cv
    { using type = __remove_cv(_Tp); };
# 1726 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct add_const
    { using type = _Tp const; };


  template<typename _Tp>
    struct add_volatile
    { using type = _Tp volatile; };


  template<typename _Tp>
    struct add_cv
    { using type = _Tp const volatile; };



  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;






  template<typename _Tp>
    struct remove_reference
    { using type = __remove_reference(_Tp); };
# 1788 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct add_lvalue_reference
    { using type = __add_lval_ref_t<_Tp>; };


  template<typename _Tp>
    struct add_rvalue_reference
    { using type = __add_rval_ref_t<_Tp>; };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;







  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { using __type = _Unqualified; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { using __type = volatile _Unqualified; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { using __type = const _Unqualified; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { using __type = const volatile _Unqualified; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      using __match = __cv_selector<_Unqualified, _IsConst, _IsVol>;

    public:
      using __type = typename __match::__type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { using __type = _Tp; };

  template<>
    struct __make_unsigned<char>
    { using __type = unsigned char; };

  template<>
    struct __make_unsigned<signed char>
    { using __type = unsigned char; };

  template<>
    struct __make_unsigned<short>
    { using __type = unsigned short; };

  template<>
    struct __make_unsigned<int>
    { using __type = unsigned int; };

  template<>
    struct __make_unsigned<long>
    { using __type = unsigned long; };

  template<>
    struct __make_unsigned<long long>
    { using __type = unsigned long long; };
# 1901 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = __is_enum(_Tp)>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };





  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1975 "/usr/include/c++/15/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };






  template<typename _Tp>
    struct make_unsigned
    { using type = typename __make_unsigned_selector<_Tp>::__type; };


  template<> struct make_unsigned<bool>;
  template<> struct make_unsigned<bool const>;
  template<> struct make_unsigned<bool volatile>;
  template<> struct make_unsigned<bool const volatile>;




  template<typename _Tp>
    struct __make_signed
    { using __type = _Tp; };

  template<>
    struct __make_signed<char>
    { using __type = signed char; };

  template<>
    struct __make_signed<unsigned char>
    { using __type = signed char; };

  template<>
    struct __make_signed<unsigned short>
    { using __type = signed short; };

  template<>
    struct __make_signed<unsigned int>
    { using __type = signed int; };

  template<>
    struct __make_signed<unsigned long>
    { using __type = signed long; };

  template<>
    struct __make_signed<unsigned long long>
    { using __type = signed long long; };
# 2061 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = __is_enum(_Tp)>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      using __unsigned_type = typename __make_unsigned_selector<_Tp>::__type;

    public:
      using __type = typename __make_signed_selector<__unsigned_type>::__type;
    };





  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 2107 "/usr/include/c++/15/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };






  template<typename _Tp>
    struct make_signed
    { using type = typename __make_signed_selector<_Tp>::__type; };


  template<> struct make_signed<bool>;
  template<> struct make_signed<bool const>;
  template<> struct make_signed<bool volatile>;
  template<> struct make_signed<bool const volatile>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;






  template<typename _Tp>
    struct remove_extent
    { using type = __remove_extent(_Tp); };
# 2169 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct remove_all_extents
    { using type = __remove_all_extents(_Tp); };
# 2188 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;






  template<typename _Tp>
    struct remove_pointer
    { using type = __remove_pointer(_Tp); };
# 2220 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct add_pointer
    { using type = __add_pointer(_Tp); };
# 2248 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;





  struct __attribute__((__aligned__)) __aligned_storage_max_align_t
  { };

  constexpr size_t
  __aligned_storage_default_alignment([[__maybe_unused__]] size_t __len)
  {
# 2279 "/usr/include/c++/15/type_traits" 3
    return alignof(__aligned_storage_max_align_t);

  }
# 2315 "/usr/include/c++/15/type_traits" 3
  template<size_t _Len,
    size_t _Align = __aligned_storage_default_alignment(_Len)>
    struct
   
    aligned_storage
    {
      struct type
      {
 alignas(_Align) unsigned char __data[_Len];
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 2360 "/usr/include/c++/15/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct
   
    aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      using type = typename aligned_storage<_S_len, alignment_value>::type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;
#pragma GCC diagnostic pop




  template<typename _Tp>
    struct decay
    { using type = __decay(_Tp); };
# 2425 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      using __type = _Tp;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      using __type = _Tp&;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;





  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;




  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { using type = _Iftrue; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { using type = _Iffalse; };


  template<typename... _Tp>
    struct common_type;
# 2481 "/usr/include/c++/15/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { using type = _Tp; };

  struct __failure_type
  { };

  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2508 "/usr/include/c++/15/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = __is_enum(_Tp)>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };



  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };


  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };






  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    struct result_of;




  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg, _Args...>(0));
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg, _Args...>(0));
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg>(0));
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg>(0));
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      using _Argval = __remove_cvref_t<_Arg>;
      using _MemPtr = _Res _Class::*;
      using type = typename __conditional_t<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      using _Argval = typename remove_reference<_Arg>::type;
      using _MemPtr = _Res _Class::*;
      using type = typename __conditional_t<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      using type = __failure_type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      using type = decltype(_S_test<_Functor, _ArgTypes...>(0));
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };


  template<typename _Fn, typename... _Args>
    using __invoke_result_t = typename __invoke_result<_Fn, _Args...>::type;


  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { } ;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

  template<size_t _Len,
    size_t _Align = __aligned_storage_default_alignment(_Len)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;
#pragma GCC diagnostic pop


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;
# 2885 "/usr/include/c++/15/type_traits" 3
  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using type = _Default;
      using __is_detected = false_type;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using type = _Op<_Args...>;
      using __is_detected = true_type;
    };

  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;



  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2927 "/usr/include/c++/15/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };


  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);


  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };
# 3149 "/usr/include/c++/15/type_traits" 3
  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl
    : false_type
    {
      using __nothrow_conv = false_type;
    };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    {
      using __nothrow_conv = true_type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:

      using _Res_t = typename _Result::type;



      static _Res_t _S_get() noexcept;


      template<typename _Tp>
 static void _S_conv(__type_identity_t<_Tp>) noexcept;


      template<typename _Tp,
        bool _Nothrow = noexcept(_S_conv<_Tp>(_S_get())),
        typename = decltype(_S_conv<_Tp>(_S_get())),

        bool _Dangle = __reference_converts_from_temporary(_Tp, _Res_t)



       >
 static __bool_constant<_Nothrow && !_Dangle>
 _S_test(int);

      template<typename _Tp, bool = false>
 static false_type
 _S_test(...);

    public:

      using type = decltype(_S_test<_Ret, true>(1));


      using __nothrow_conv = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop
# 4191 "/usr/include/c++/15/type_traits" 3

}
}
# 38 "/usr/include/c++/15/bits/move.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    __attribute__((__always_inline__))
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }
# 69 "/usr/include/c++/15/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }
# 82 "/usr/include/c++/15/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value,
   "std::forward must not be used to convert an rvalue to an lvalue");
      return static_cast<_Tp&&>(__t);
    }
# 135 "/usr/include/c++/15/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 156 "/usr/include/c++/15/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr
    __conditional_t<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 173 "/usr/include/c++/15/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 217 "/usr/include/c++/15/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 61 "/usr/include/c++/15/bits/stl_function.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 116 "/usr/include/c++/15/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    } ;





  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    } ;
# 157 "/usr/include/c++/15/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {

      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
#pragma GCC diagnostic pop


  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 346 "/usr/include/c++/15/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x > __y;

 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x < __y;

 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x >= __y;

 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x <= __y;

 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };
#pragma GCC diagnostic pop



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 778 "/usr/include/c++/15/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
#pragma GCC diagnostic pop



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"



  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
#pragma GCC diagnostic pop


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1020 "/usr/include/c++/15/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
   
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
   
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1101 "/usr/include/c++/15/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    } ;


  template<typename _Arg, typename _Result>
   
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    } ;


  template<typename _Arg1, typename _Arg2, typename _Result>
   
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1228 "/usr/include/c++/15/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    } ;


  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    } ;


  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    } ;


  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    } ;


  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    } ;


  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    } ;


  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    } ;


  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    } ;



  template<typename _Ret, typename _Tp>
   
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
   
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
   
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
   
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
   
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
   
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
   
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
   
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }
#pragma GCC diagnostic pop




  template<typename _Func, typename _SfinaeType, typename = __void_t<>>
    struct __has_is_transparent
    { };

  template<typename _Func, typename _SfinaeType>
    struct __has_is_transparent<_Func, _SfinaeType,
    __void_t<typename _Func::is_transparent>>
    { typedef void type; };

  template<typename _Func, typename _SfinaeType>
    using __has_is_transparent_t
      = typename __has_is_transparent<_Func, _SfinaeType>::type;
# 1437 "/usr/include/c++/15/bits/stl_function.h" 3

}


# 1 "/usr/include/c++/15/backward/binders.h" 1 3
# 60 "/usr/include/c++/15/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/15/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
   
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
   
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1442 "/usr/include/c++/15/bits/stl_function.h" 2 3
# 52 "/usr/include/c++/15/functional" 2 3



# 1 "/usr/include/c++/15/tuple" 1 3
# 40 "/usr/include/c++/15/tuple" 3
# 1 "/usr/include/c++/15/bits/stl_pair.h" 1 3
# 62 "/usr/include/c++/15/bits/stl_pair.h" 3
# 1 "/usr/include/c++/15/bits/utility.h" 1 3
# 45 "/usr/include/c++/15/bits/utility.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };







  template<size_t __i, typename _Tp>
    struct tuple_element;


  template<size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      using type = const __tuple_element_t<__i, _Tp>;
    };

  template<size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      using type = volatile __tuple_element_t<__i, _Tp>;
    };

  template<size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      using type = const volatile __tuple_element_t<__i, _Tp>;
    };





  template<typename _Tp, typename... _Types>
    constexpr size_t
    __find_uniq_type_in_pack()
    {
      constexpr size_t __sz = sizeof...(_Types);
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
      size_t __n = __sz;
      for (size_t __i = 0; __i < __sz; ++__i)
 {
   if (__found[__i])
     {
       if (__n < __sz)
  return __sz;
       __n = __i;
     }
 }
      return __n;
    }
# 136 "/usr/include/c++/15/bits/utility.h" 3
  template<size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;




  template<size_t... _Indexes> struct _Index_tuple { };


  template<size_t _Num>
    struct _Build_index_tuple
    {
# 156 "/usr/include/c++/15/bits/utility.h" 3
      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };




  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {



      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;



  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 234 "/usr/include/c++/15/bits/utility.h" 3
  template<size_t _Np, typename... _Types>
    struct _Nth_type
    { using type = __type_pack_element<_Np, _Types...>; };
# 284 "/usr/include/c++/15/bits/utility.h" 3
  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const noexcept
      { return *this; }
  };
# 309 "/usr/include/c++/15/bits/utility.h" 3
  constexpr _Swallow_assign ignore{};
# 319 "/usr/include/c++/15/bits/utility.h" 3

}
# 63 "/usr/include/c++/15/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 79 "/usr/include/c++/15/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename _T1, typename _T2>
    struct pair;

  template<typename...>
    class tuple;





  template<typename _Tp, size_t _Nm>
    struct array;

  template<size_t...>
    struct _Index_tuple;

  template<typename _Tp>
    class complex;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(const pair<_Tp1, _Tp2>&& __in) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>&) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&&) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>&) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&&) noexcept;
# 176 "/usr/include/c++/15/bits/stl_pair.h" 3
  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }
    };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
    };
# 278 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 301 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : public __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;


      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;

      template<typename... _Args1, typename... _Args2>

 pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }
# 349 "/usr/include/c++/15/bits/stl_pair.h" 3
    private:
      template<typename... _Args1, size_t... _Indexes1,
        typename... _Args2, size_t... _Indexes2>

 pair(tuple<_Args1...>&, tuple<_Args2...>&,
      _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);
    public:
# 739 "/usr/include/c++/15/bits/stl_pair.h" 3
      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
      constexpr pair()
      : first(), second() { }

      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }



      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }



      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second)
 { ; }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second)
 { ; }
# 823 "/usr/include/c++/15/bits/stl_pair.h" 3
    private:



      struct __zero_as_null_pointer_constant
      {
 __zero_as_null_pointer_constant(int __zero_as_null_pointer_constant::*)
 { }
 template<typename _Tp,
   typename = __enable_if_t<is_null_pointer<_Tp>::value>>
 __zero_as_null_pointer_constant(_Tp) = delete;
      };

    public:




      template<typename _U1,
        __enable_if_t<__and_<__not_<is_reference<_U1>>,
        is_pointer<_T2>,
        is_constructible<_T1, _U1>,
        __not_<is_constructible<_T1, const _U1&>>,
        is_convertible<_U1, _T1>>::value,
        bool> = true>

 constexpr
 pair(_U1&& __x, __zero_as_null_pointer_constant, ...)
 : first(std::forward<_U1>(__x)), second(nullptr)
 { ; }

      template<typename _U1,
        __enable_if_t<__and_<__not_<is_reference<_U1>>,
        is_pointer<_T2>,
        is_constructible<_T1, _U1>,
        __not_<is_constructible<_T1, const _U1&>>,
        __not_<is_convertible<_U1, _T1>>>::value,
        bool> = false>

 explicit constexpr
 pair(_U1&& __x, __zero_as_null_pointer_constant, ...)
 : first(std::forward<_U1>(__x)), second(nullptr)
 { ; }

      template<typename _U2,
        __enable_if_t<__and_<is_pointer<_T1>,
        __not_<is_reference<_U2>>,
        is_constructible<_T2, _U2>,
        __not_<is_constructible<_T2, const _U2&>>,
        is_convertible<_U2, _T2>>::value,
        bool> = true>

 constexpr
 pair(__zero_as_null_pointer_constant, _U2&& __y, ...)
 : first(nullptr), second(std::forward<_U2>(__y))
 { ; }

      template<typename _U2,
        __enable_if_t<__and_<is_pointer<_T1>,
        __not_<is_reference<_U2>>,
        is_constructible<_T2, _U2>,
        __not_<is_constructible<_T2, const _U2&>>,
        __not_<is_convertible<_U2, _T2>>>::value,
        bool> = false>

 explicit constexpr
 pair(__zero_as_null_pointer_constant, _U2&& __y, ...)
 : first(nullptr), second(std::forward<_U2>(__y))
 { ; }



      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 { ; }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 { ; }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second))
 { ; }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second))
 { ; }



      pair&
      operator=(__conditional_t<__and_<is_copy_assignable<_T1>,
           is_copy_assignable<_T2>>::value,
    const pair&, const __nonesuch&> __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(__conditional_t<__and_<is_move_assignable<_T1>,
           is_move_assignable<_T2>>::value,
    pair&&, __nonesuch&&> __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }
# 1015 "/usr/include/c++/15/bits/stl_pair.h" 3
    };
# 1057 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 1070 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 1112 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline





    void

    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 1161 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 1184 "/usr/include/c++/15/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type
    { };



  template<class _Tp1, class _Tp2>
    struct tuple_size<pair<_Tp1, _Tp2>>
    : public integral_constant<size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };
# 1213 "/usr/include/c++/15/bits/stl_pair.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Tp>
    inline constexpr bool __is_pair = false;

  template<typename _Tp, typename _Up>
    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;
#pragma GCC diagnostic pop



  template<size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp1&
 __get(pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp1&&
 __move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp1&
 __const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp1&&
 __const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp2&
 __get(pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp2&&
 __move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp2&
 __const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp2&&
 __const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<const _Tp2>(__pair.second); }
    };






  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(const pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }



  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::forward<_Tp>(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::forward<const _Tp>(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::forward<_Tp>(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::forward<const _Tp>(__p.second); }
# 1365 "/usr/include/c++/15/bits/stl_pair.h" 3

}
# 41 "/usr/include/c++/15/tuple" 2 3
# 1 "/usr/include/c++/15/bits/uses_allocator.h" 1 3
# 40 "/usr/include/c++/15/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  struct __erased_type { };




  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

  constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : __conditional_t<
        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>
    {


      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,
   is_constructible<_Tp, _Args..., const _Alloc&>>::value,
   "construction with an allocator must be possible"
   " if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
   
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;
# 142 "/usr/include/c++/15/bits/uses_allocator.h" 3
  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : __conditional_t<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>> { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      std::__uses_allocator_construct_impl(
   std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,
   std::forward<_Args>(__args)...);
    }



}
# 42 "/usr/include/c++/15/tuple" 2 3

# 1 "/usr/include/c++/15/bits/invoke.h" 1 3
# 44 "/usr/include/c++/15/bits/invoke.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/15/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }
# 129 "/usr/include/c++/15/bits/invoke.h" 3
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __enable_if_t<!is_void<_Res>::value, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;

      static_assert(!__reference_converts_from_temporary(_Res, __type),
      "INVOKE<R> must not create a dangling reference");

      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __enable_if_t<is_void<_Res>::value, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }



}
# 44 "/usr/include/c++/15/tuple" 2 3
# 57 "/usr/include/c++/15/tuple" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 58 "/usr/include/c++/15/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;


  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = __conditional_t<__is_final(_Tp), false_type,
        __is_empty_non_tuple<_Tp>>;

  template<size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;


  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
 constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

     
      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>

 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      [[__no_unique_address__]] _Head _M_head_impl;
    };
# 199 "/usr/include/c++/15/tuple" 3
  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

     
      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>

 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 272 "/usr/include/c++/15/tuple" 3
  template<size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<size_t, typename...> friend struct _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit constexpr
      _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head)
      { }

      template<typename _UHead, typename... _UTail,
        typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>
 explicit constexpr
 _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head))
 { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;

      template<typename... _UElements>
 constexpr
 _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
 { }

      template<typename _UHead, typename... _UTails>
 constexpr
 _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
 { }
# 368 "/usr/include/c++/15/tuple" 3
      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
   _Base(__tag, __use_alloc<_Head>(__a))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head)
 { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
        typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>(__head))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  std::forward<_Head>(_M_head(__in)))
 { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))
 { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
 { }
# 463 "/usr/include/c++/15/tuple" 3
      template<typename... _UElements>

 void
 _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
 {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this)._M_assign(
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 }

      template<typename _UHead, typename... _UTails>

 void
 _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this)._M_assign(
       std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 }
# 523 "/usr/include/c++/15/tuple" 3
    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
# 542 "/usr/include/c++/15/tuple" 3
    };


  template<size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<size_t, typename...> friend struct _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr
      _Tuple_impl()
      : _Base() { }

      explicit constexpr
      _Tuple_impl(const _Head& __head)
      : _Base(__head)
      { }

      template<typename _UHead>
 explicit constexpr
 _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head))
 { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;




      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(static_cast<_Base&&>(__in))
      { }


      template<typename _UHead>
 constexpr
 _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
 { }

      template<typename _UHead>
 constexpr
 _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }
# 624 "/usr/include/c++/15/tuple" 3
      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), __head)
 { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>(__head))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), _M_head(__in))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  std::forward<_Head>(_M_head(__in)))
 { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in))
 { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }
# 703 "/usr/include/c++/15/tuple" 3
      template<typename _UHead>

 void
 _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
 {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 }

      template<typename _UHead>

 void
 _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
 {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 }
# 749 "/usr/include/c++/15/tuple" 3
    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
# 766 "/usr/include/c++/15/tuple" 3
    };



  template<bool, typename... _Types>
    struct _TupleConstraints
    {
      template<typename... _UTypes>
 using __constructible = __and_<is_constructible<_Types, _UTypes>...>;

      template<typename... _UTypes>
 using __convertible = __and_<is_convertible<_UTypes, _Types>...>;




      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 {
   return __and_<__constructible<_UTypes...>,
   __convertible<_UTypes...>
   >::value;
 }




      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 {
   return __and_<__constructible<_UTypes...>,
   __not_<__convertible<_UTypes...>>
   >::value;
 }

      static constexpr bool __is_implicitly_default_constructible()
      {
 return __and_<std::__is_implicitly_default_constructible<_Types>...
        >::value;
      }

      static constexpr bool __is_explicitly_default_constructible()
      {
 return __and_<is_default_constructible<_Types>...,
        __not_<__and_<
   std::__is_implicitly_default_constructible<_Types>...>
        >>::value;
      }
    };



  template<typename... _Types>
    struct _TupleConstraints<false, _Types...>
    {
      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 { return false; }

      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 { return false; }
    };



  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      using _Inherited = _Tuple_impl<0, _Elements...>;
# 1352 "/usr/include/c++/15/tuple" 3
      template<bool _Cond>
 using _TCC = _TupleConstraints<_Cond, _Elements...>;


      template<bool _Dummy>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_explicitly_default_constructible(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_Args...>(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_Args...>(),
   bool>;


      template<typename... _UElements>
 static constexpr bool __nothrow_constructible()
 {
   return
     __and_<is_nothrow_constructible<_Elements, _UElements>...>::value;
 }


      template<typename _Up>
 static constexpr bool __valid_args()
 {
   return sizeof...(_Elements) == 1
     && !is_same<tuple, __remove_cvref_t<_Up>>::value;
 }


      template<typename, typename, typename... _Tail>
 static constexpr bool __valid_args()
 { return (sizeof...(_Tail) + 2) == sizeof...(_Elements); }
# 1409 "/usr/include/c++/15/tuple" 3
      template<typename _Tuple, typename = tuple,
        typename = __remove_cvref_t<_Tuple>>
 struct _UseOtherCtor
 : false_type
 { };


      template<typename _Tuple, typename _Tp, typename _Up>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Up>>
 : __or_<is_convertible<_Tuple, _Tp>, is_constructible<_Tp, _Tuple>>::type
 { };


      template<typename _Tuple, typename _Tp>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Tp>>
 : true_type
 { };




      template<typename _Tuple>
 static constexpr bool __use_other_ctor()
 { return _UseOtherCtor<_Tuple>::value; }
# 1455 "/usr/include/c++/15/tuple" 3
    public:
      template<typename _Dummy = void,
        _ImplicitDefaultCtor<is_void<_Dummy>::value> = true>
 constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<typename _Dummy = void,
        _ExplicitDefaultCtor<is_void<_Dummy>::value> = false>
 explicit constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
 constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>
 explicit constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...)
 { ; }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...)
 { ; }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>
 constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>
 explicit constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc,
        _ExplicitDefaultCtor<is_object<_Alloc>::value> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { ; }

      template<typename _Alloc, typename... _UElements,
   bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { ; }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
       static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
       static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }
# 1887 "/usr/include/c++/15/tuple" 3
    private:
      template<typename... _UElements>
 static constexpr
 __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 __assignable()
 { return __and_<is_assignable<_Elements&, _UElements>...>::value; }


      template<typename... _UElements>
 static constexpr bool __nothrow_assignable()
 {
   return
     __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 }

    public:

     
      tuple&
      operator=(__conditional_t<__assignable<const _Elements&...>(),
    const tuple&,
    const __nonesuch&> __in)
      noexcept(__nothrow_assignable<const _Elements&...>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(__conditional_t<__assignable<_Elements...>(),
    tuple&&,
    __nonesuch&&> __in)
      noexcept(__nothrow_assignable<_Elements...>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename... _UElements>

 __enable_if_t<__assignable<const _UElements&...>(), tuple&>
 operator=(const tuple<_UElements...>& __in)
 noexcept(__nothrow_assignable<const _UElements&...>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename... _UElements>

 __enable_if_t<__assignable<_UElements...>(), tuple&>
 operator=(tuple<_UElements...>&& __in)
 noexcept(__nothrow_assignable<_UElements...>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }



     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
      { _Inherited::_M_swap(__in); }
# 1967 "/usr/include/c++/15/tuple" 3
    };
# 1983 "/usr/include/c++/15/tuple" 3
  template<>
    class tuple<>
    {
    public:
     
      void swap(tuple&) noexcept { }





      tuple() = default;

      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&) noexcept { }
      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept { }
    };




  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_explicitly_default_constructible(),
   bool>;

      template<bool _Dummy>
 using _TCC = _TupleConstraints<_Dummy, _T1, _T2>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_U1, _U2>(),
   bool>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_U1, _U2>(),
   bool>;

      template<typename _U1, typename _U2>
 static constexpr bool __assignable()
 {
   return __and_<is_assignable<_T1&, _U1>,
   is_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_assignable()
 {
   return __and_<is_nothrow_assignable<_T1&, _U1>,
   is_nothrow_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_constructible()
 {
   return __and_<is_nothrow_constructible<_T1, _U1>,
       is_nothrow_constructible<_T2, _U2>>::value;
 }

      static constexpr bool __nothrow_default_constructible()
      {
 return __and_<is_nothrow_default_constructible<_T1>,
        is_nothrow_default_constructible<_T2>>::value;
      }

      template<typename _U1>
 static constexpr bool __is_alloc_arg()
 { return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }
# 2086 "/usr/include/c++/15/tuple" 3
    public:
      template<bool _Dummy = true,
        _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
 constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
 explicit constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>
 constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
 constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>
 explicit constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))
 { ; }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second)
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second)
 { ; }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc,
        _ExplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
       std::forward<_U2>(__a2))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
       std::forward<_U2>(__a2))
 { ; }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second)
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second)
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }



     
      tuple&
      operator=(__conditional_t<__assignable<const _T1&, const _T2&>(),
    const tuple&,
    const __nonesuch&> __in)
      noexcept(__nothrow_assignable<const _T1&, const _T2&>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(__conditional_t<__assignable<_T1, _T2>(),
    tuple&&,
    __nonesuch&&> __in)
      noexcept(__nothrow_assignable<_T1, _T2>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<size_t, sizeof...(_Elements)> { };
# 2418 "/usr/include/c++/15/tuple" 3
  template<size_t __i, typename... _Types>
    struct tuple_element<__i, tuple<_Types...>>
    {
      static_assert(__i < sizeof...(_Types), "tuple index must be in range");

      using type = typename _Nth_type<__i, _Types...>::type;
    };

  template<size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<size_t __i, typename... _Types>
    __enable_if_t<(__i >= sizeof...(_Types))>
    __get_helper(const tuple<_Types...>&) = delete;


  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type>(std::__get_helper<__i>(__t));
    }


  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type>(std::__get_helper<__i>(__t));
    }



  template<size_t __i, typename... _Elements>
    constexpr __enable_if_t<(__i >= sizeof...(_Elements))>
    get(const tuple<_Elements...>&) = delete;




  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::__get_helper<__idx>(__t);
    }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::forward<_Tp>(std::__get_helper<__idx>(__t));
    }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::__get_helper<__idx>(__t);
    }



  template <typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const tuple<_Types...>&& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::forward<const _Tp>(std::__get_helper<__idx>(__t));
    }
# 2578 "/usr/include/c++/15/tuple" 3
  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }




  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }


  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<__remove_cvref_t<_Tuple>>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef _Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename _Build_index_tuple<tuple_size<
 typename remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, _Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, _Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };






  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>

    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
   
    inline





    void

    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 2855 "/usr/include/c++/15/tuple" 3
  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
# 2867 "/usr/include/c++/15/tuple" 3
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
     
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
      typename... _Args2, size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 3029 "/usr/include/c++/15/tuple" 3

}
# 56 "/usr/include/c++/15/functional" 2 3

# 1 "/usr/include/c++/15/bits/functional_hash.h" 1 3
# 38 "/usr/include/c++/15/bits/functional_hash.h" 3
# 1 "/usr/include/c++/15/bits/hash_bytes.h" 1 3
# 39 "/usr/include/c++/15/bits/hash_bytes.h" 3
namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 39 "/usr/include/c++/15/bits/functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/15/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {

      typedef _Result result_type ;
      typedef _Arg argument_type ;

    };



  template<typename _Tp> struct __hash_empty_base { };



  template<typename _Tp>
    struct hash;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
  template<typename _Tp, typename = void>
    constexpr bool __is_hash_enabled_for = false;

  template<typename _Tp>
    constexpr bool
    __is_hash_enabled_for<_Tp,
     __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
      = true;
#pragma GCC diagnostic pop


  template<typename _Tp>
    struct __hash_not_enabled
    {
      __hash_not_enabled(__hash_not_enabled&&) = delete;
      ~__hash_not_enabled() = delete;
    };


  template<typename _Tp, bool = true>
    struct __hash_enum : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };


  template<typename _Tp>
    struct hash
    : __conditional_t<__is_enum(_Tp), __hash_enum<_Tp>, __hash_not_enabled<_Tp>>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 128 "/usr/include/c++/15/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };







  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };
# 204 "/usr/include/c++/15/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };
# 297 "/usr/include/c++/15/bits/functional_hash.h" 3
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 58 "/usr/include/c++/15/functional" 2 3

# 1 "/usr/include/c++/15/bits/refwrap.h" 1 3
# 47 "/usr/include/c++/15/bits/refwrap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 58 "/usr/include/c++/15/bits/refwrap.h" 3
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };

#pragma GCC diagnostic pop

  template<typename _Signature>
    struct _Mem_fn_traits;

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Mem_fn_traits_base
    {
      using __result_type = _Res;
      using __maybe_type
 = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
    };
# 109 "/usr/include/c++/15/bits/refwrap.h" 3
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
# 123 "/usr/include/c++/15/bits/refwrap.h" 3
  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes...,
           ...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct
    _Weak_result_type_impl<_Res(*)(_ArgTypes..., ...) >
    { typedef _Res result_type; };


  template<typename _Functor,
    bool = is_member_function_pointer<_Functor>::value>
    struct _Weak_result_type_memfun
    : _Weak_result_type_impl<_Functor>
    { };


  template<typename _MemFunPtr>
    struct _Weak_result_type_memfun<_MemFunPtr, true>
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };


  template<typename _Func, typename _Class>
    struct _Weak_result_type_memfun<_Func _Class::*, false>
    { };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>
    { };



  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg1
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg1<_Tp,
         __void_t<typename _Tp::argument_type>>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg2
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg2<_Tp,
         __void_t<typename _Tp::first_argument_type,
           typename _Tp::second_argument_type>>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
    { };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(_T1) >
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(*)(_T1) >
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Tp, bool = is_member_function_pointer<_Tp>::value>
    struct _Reference_wrapper_base_memfun
    : _Reference_wrapper_base<_Tp>
    { };

  template<typename _MemFunPtr>
    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>
    : _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };
#pragma GCC diagnostic pop
# 309 "/usr/include/c++/15/bits/refwrap.h" 3
  template<typename _Tp>
    class reference_wrapper



    : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>

    {
      _Tp* _M_data;

     
      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }

      static void _S_fun(_Tp&&) = delete;

      template<typename _Up, typename _Up2 = __remove_cvref_t<_Up>>
 using __not_same
   = typename enable_if<!is_same<reference_wrapper, _Up2>::value>::type;

    public:
      typedef _Tp type;




      template<typename _Up, typename = __not_same<_Up>, typename
  = decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>

 reference_wrapper(_Up&& __uref)
 noexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))
 : _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))
 { }

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

     
      operator _Tp&() const noexcept
      { return this->get(); }

     
      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>

 typename __invoke_result<_Tp&, _Args...>::type
 operator()(_Args&&... __args) const
 noexcept(__is_nothrow_invocable<_Tp&, _Args...>::value)
 {




   return std::__invoke(get(), std::forward<_Args>(__args)...);
 }
# 415 "/usr/include/c++/15/bits/refwrap.h" 3
    };
# 425 "/usr/include/c++/15/bits/refwrap.h" 3
  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return __t; }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return { __t.get() }; }




}
# 60 "/usr/include/c++/15/functional" 2 3

# 1 "/usr/include/c++/15/bits/std_function.h" 1 3
# 41 "/usr/include/c++/15/bits/std_function.h" 3
# 1 "/usr/include/c++/15/new" 1 3
# 43 "/usr/include/c++/15/new" 3
# 1 "/usr/include/c++/15/bits/exception.h" 1 3
# 40 "/usr/include/c++/15/bits/exception.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
# 61 "/usr/include/c++/15/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };



}

}
# 44 "/usr/include/c++/15/new" 2 3





# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 50 "/usr/include/c++/15/new" 2 3

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 137 "/usr/include/c++/15/new" 3
[[__nodiscard__]] void* operator new(std::size_t)
 
  __attribute__((__externally_visible__, __malloc__));
[[__nodiscard__]] void* operator new[](std::size_t)
 
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t)
  noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t)
  noexcept
  __attribute__((__externally_visible__));

[[__nodiscard__]] void* operator new(std::size_t, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
[[__nodiscard__]] void* operator new[](std::size_t, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
void operator delete(void*, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__));
# 205 "/usr/include/c++/15/new" 3
[[__nodiscard__]] inline
void* operator new(std::size_t, void* __p)
  noexcept
{ return __p; }
[[__nodiscard__]] inline
void* operator new[](std::size_t, void* __p)
  noexcept
{ return __p; }




inline void operator delete (void*, void*)
  noexcept
{ }
inline void operator delete[](void*, void*)
  noexcept
{ }

}

namespace std
{
# 264 "/usr/include/c++/15/new" 3
}

#pragma GCC visibility pop
#pragma GCC diagnostic pop
# 42 "/usr/include/c++/15/bits/std_function.h" 2 3
# 1 "/usr/include/c++/15/typeinfo" 1 3
# 42 "/usr/include/c++/15/typeinfo" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 43 "/usr/include/c++/15/typeinfo" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 85 "/usr/include/c++/15/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }



    bool before(const type_info& __arg) const noexcept;

   
    bool operator==(const type_info& __arg) const noexcept;


    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:


    type_info& operator=(const type_info&) = delete;
    type_info(const type_info&) = delete;
# 168 "/usr/include/c++/15/typeinfo" 3
  };


  inline bool
  type_info::before(const type_info& __arg) const noexcept
  {




    if (__name[0] != '*' || __arg.__name[0] != '*')
      return __builtin_strcmp (__name, __arg.__name) < 0;
# 188 "/usr/include/c++/15/typeinfo" 3
    return __name < __arg.__name;
  }






  inline bool
  type_info::operator==(const type_info& __arg) const noexcept
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
      return true;






    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;



  }
# 224 "/usr/include/c++/15/typeinfo" 3
  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 43 "/usr/include/c++/15/bits/std_function.h" 2 3


# 1 "/usr/include/c++/15/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/15/bits/functexcept.h" 3
# 1 "/usr/include/c++/15/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/15/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));

  void
  __throw_bad_array_new_length(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__,__cold__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__,__cold__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__,__cold__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__,__cold__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_ios_failure(const char*, int) __attribute__((__noreturn__,__cold__));


  void
  __throw_system_error(int) __attribute__((__noreturn__,__cold__));


  void
  __throw_future_error(int) __attribute__((__noreturn__,__cold__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__,__cold__));
# 140 "/usr/include/c++/15/bits/functexcept.h" 3

}
# 46 "/usr/include/c++/15/bits/std_function.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };







  template<typename _Tp>
    struct __is_location_invariant
    : is_trivially_copyable<_Tp>::type
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void* _M_access() noexcept { return &_M_pod_data[0]; }
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access() noexcept
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const noexcept
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const size_t _M_max_size = sizeof(_Nocopy_types);
    static const size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 using _Local_storage = integral_constant<bool, __stored_locally>;


 static _Functor*
 _M_get_pointer(const _Any_data& __source) noexcept
 {
   if (__stored_locally)
     {
       const _Functor& __f = __source._M_access<_Functor>();
       return const_cast<_Functor*>(std::__addressof(__f));
     }
   else
     return __source._M_access<_Functor*>();
 }

      private:


 template<typename _Fn>
   static void
   _M_create(_Any_data& __dest, _Fn&& __f, true_type)
   {
     ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   }


 template<typename _Fn>
   static void
   _M_create(_Any_data& __dest, _Fn&& __f, false_type)
   {
     __dest._M_access<_Functor*>()
       = new _Functor(std::forward<_Fn>(__f));
   }


 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {
     case __get_type_info:

       __dest._M_access<const type_info*>() = &typeid(_Functor);



       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_init_functor(__dest,
    *const_cast<const _Functor*>(_M_get_pointer(__source)));
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 template<typename _Fn>
   static void
   _M_init_functor(_Any_data& __functor, _Fn&& __f)
   noexcept(__and_<_Local_storage,
     is_nothrow_constructible<_Functor, _Fn>>::value)
   {
     _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
   }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f) noexcept
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* __fp) noexcept
   { return __fp != nullptr; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* __mp) noexcept
   { return __mp != nullptr; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&) noexcept
   { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }

    using _Manager_type
      = bool (*)(_Any_data&, const _Any_data&, _Manager_operation);

    _Any_data _M_functor{};
    _Manager_type _M_manager{};
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      using _Base = _Function_base::_Base_manager<_Functor>;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
         std::forward<_ArgTypes>(__args)...);
      }

      template<typename _Fn>
 static constexpr bool
 _S_nothrow_init() noexcept
 {
   return __and_<typename _Base::_Local_storage,
   is_nothrow_constructible<_Functor, _Fn>>::value;
 }
    };


  template<>
    class _Function_handler<void, void>
    {
    public:
      static bool
      _M_manager(_Any_data&, const _Any_data&, _Manager_operation)
      { return false; }
    };





  template<typename _Signature, typename _Functor,
    bool __valid = is_object<_Functor>::value>
    struct _Target_handler
    : _Function_handler<_Signature, typename remove_cv<_Functor>::type>
    { };

  template<typename _Signature, typename _Functor>
    struct _Target_handler<_Signature, _Functor, false>
    : _Function_handler<void, void>
    { };






  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {


      template<typename _Func,
        bool _Self = is_same<__remove_cvref_t<_Func>, function>::value>
 using _Decay_t
   = typename __enable_if_t<!_Self, decay<_Func>>::type;

      template<typename _Func,
        typename _DFunc = _Decay_t<_Func>,
        typename _Res2 = __invoke_result<_DFunc&, _ArgTypes...>>
 struct _Callable
 : __is_invocable_impl<_Res2, _Res>::type
 { };

      template<typename _Cond, typename _Tp = void>
 using _Requires = __enable_if_t<_Cond::value, _Tp>;

      template<typename _Functor>
 using _Handler
   = _Function_handler<_Res(_ArgTypes...), __decay_t<_Functor>>;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 388 "/usr/include/c++/15/bits/std_function.h" 3
      function(const function& __x)
      : _Function_base()
      {
 if (static_cast<bool>(__x))
   {
     __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     _M_invoker = __x._M_invoker;
     _M_manager = __x._M_manager;
   }
      }
# 406 "/usr/include/c++/15/bits/std_function.h" 3
      function(function&& __x) noexcept
      : _Function_base(), _M_invoker(__x._M_invoker)
      {
 if (static_cast<bool>(__x))
   {
     _M_functor = __x._M_functor;
     _M_manager = __x._M_manager;
     __x._M_manager = nullptr;
     __x._M_invoker = nullptr;
   }
      }
# 435 "/usr/include/c++/15/bits/std_function.h" 3
      template<typename _Functor,
        typename _Constraints = _Requires<_Callable<_Functor>>>
 function(_Functor&& __f)
 noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
 : _Function_base()
 {
   static_assert(is_copy_constructible<__decay_t<_Functor>>::value,
       "std::function target must be copy-constructible");
   static_assert(is_constructible<__decay_t<_Functor>, _Functor>::value,
       "std::function target must be constructible from the "
       "constructor argument");

   using _My_handler = _Handler<_Functor>;

   if (_My_handler::_M_not_empty_function(__f))
     {
       _My_handler::_M_init_functor(_M_functor,
        std::forward<_Functor>(__f));
       _M_invoker = &_My_handler::_M_invoke;
       _M_manager = &_My_handler::_M_manager;
     }
 }
# 470 "/usr/include/c++/15/bits/std_function.h" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 488 "/usr/include/c++/15/bits/std_function.h" 3
      function&
      operator=(function&& __x) noexcept
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 502 "/usr/include/c++/15/bits/std_function.h" 3
      function&
      operator=(nullptr_t) noexcept
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = nullptr;
     _M_invoker = nullptr;
   }
 return *this;
      }
# 531 "/usr/include/c++/15/bits/std_function.h" 3
      template<typename _Functor>
 _Requires<_Callable<_Functor>, function&>
 operator=(_Functor&& __f)
 noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 558 "/usr/include/c++/15/bits/std_function.h" 3
      void swap(function& __x) noexcept
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 575 "/usr/include/c++/15/bits/std_function.h" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 588 "/usr/include/c++/15/bits/std_function.h" 3
      _Res
      operator()(_ArgTypes... __args) const
      {
 if (_M_empty())
   __throw_bad_function_call();
 return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
      }
# 607 "/usr/include/c++/15/bits/std_function.h" 3
      const type_info&
      target_type() const noexcept
      {
 if (_M_manager)
   {
     _Any_data __typeinfo_result;
     _M_manager(__typeinfo_result, _M_functor, __get_type_info);
     if (auto __ti = __typeinfo_result._M_access<const type_info*>())
       return *__ti;
   }
 return typeid(void);
      }
# 632 "/usr/include/c++/15/bits/std_function.h" 3
      template<typename _Functor>
 _Functor*
 target() noexcept
 {
   const function* __const_this = this;
   const _Functor* __func = __const_this->template target<_Functor>();


   return *const_cast<_Functor**>(&__func);
 }

      template<typename _Functor>
 const _Functor*
 target() const noexcept
 {
   if (is_object<_Functor>::value)
     {


       using _Handler = _Target_handler<_Res(_ArgTypes...), _Functor>;

       if (_M_manager == &_Handler::_M_manager

    || (_M_manager && typeid(_Functor) == target_type())

   )
  {
    _Any_data __ptr;
    _M_manager(__ptr, _M_functor, __get_functor_ptr);
    return __ptr._M_access<const _Functor*>();
  }
     }
   return nullptr;
 }


    private:
      using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
      _Invoker_type _M_invoker = nullptr;
    };
# 745 "/usr/include/c++/15/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }



  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }







  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 784 "/usr/include/c++/15/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y) noexcept
    { __x.swap(__y); }
# 803 "/usr/include/c++/15/bits/std_function.h" 3

}
# 62 "/usr/include/c++/15/functional" 2 3
# 90 "/usr/include/c++/15/functional" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 91 "/usr/include/c++/15/functional" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{






  template<int _Num> struct _Placeholder { };
# 150 "/usr/include/c++/15/functional" 3
  template<typename _MemFunPtr,
    bool __is_mem_fn = is_member_function_pointer<_MemFunPtr>::value>
    class _Mem_fn_base
    : public _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using _Traits = _Mem_fn_traits<_MemFunPtr>;

      using _Arity = typename _Traits::__arity;
      using _Varargs = typename _Traits::__vararg;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemFunPtr _M_pmf;

    public:

      using result_type = typename _Traits::__result_type;

      explicit constexpr
      _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { }

      template<typename... _Args>

 auto
 operator()(_Args&&... __args) const
 noexcept(noexcept(
       std::__invoke(_M_pmf, std::forward<_Args>(__args)...)))
 -> decltype(std::__invoke(_M_pmf, std::forward<_Args>(__args)...))
 { return std::__invoke(_M_pmf, std::forward<_Args>(__args)...); }
    };


  template<typename _MemObjPtr>
    class _Mem_fn_base<_MemObjPtr, false>
    {
      using _Arity = integral_constant<size_t, 0>;
      using _Varargs = false_type;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemObjPtr _M_pm;

    public:
      explicit constexpr
      _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { }

      template<typename _Tp>

 auto
 operator()(_Tp&& __obj) const
 noexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))
 -> decltype(std::__invoke(_M_pm, std::forward<_Tp>(__obj)))
 { return std::__invoke(_M_pm, std::forward<_Tp>(__obj)); }
    };

  template<typename _MemberPointer>
    struct _Mem_fn;

  template<typename _Res, typename _Class>
    struct _Mem_fn<_Res _Class::*>
    : _Mem_fn_base<_Res _Class::*>
    {
      using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
    };
# 243 "/usr/include/c++/15/functional" 3
  template<typename _Tp, typename _Class>
   
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }
# 262 "/usr/include/c++/15/functional" 3
  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };
# 274 "/usr/include/c++/15/functional" 3
  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };
# 291 "/usr/include/c++/15/functional" 3
  namespace placeholders
  {
# 303 "/usr/include/c++/15/functional" 3
    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;


  }







  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };




  template<std::size_t __i, typename _Tuple>
    using _Safe_tuple_element_t
      = typename enable_if<(__i < tuple_size<_Tuple>::value),
      tuple_element<__i, _Tuple>>::type::type;
# 371 "/usr/include/c++/15/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;






  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:




      template<typename _CVRef, typename _Tuple>

 _Tp&
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };







  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>

 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>

 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::get<_Indexes>(std::move(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Tuple>

 _Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&&
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return
     ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _CVArg, typename _Tuple>

 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }
# 496 "/usr/include/c++/15/functional" 3
  template<typename _Signature>
    class _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>

 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>

 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }



      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _BoundArg, typename _CallArgs>
 using _Mu_type = decltype(
     _Mu<typename remove_cv<_BoundArg>::type>()(
       std::declval<_BoundArg&>(), std::declval<_CallArgs&>()) );

      template<typename _Fn, typename _CallArgs, typename... _BArgs>
 using _Res_type_impl
   = __invoke_result_t<_Fn&, _Mu_type<_BArgs, _CallArgs>&&...>;

      template<typename _CallArgs>
 using _Res_type = _Res_type_impl<_Functor, _CallArgs, _Bound_args...>;

      template<typename _CallArgs>
 using __dependent = typename
   enable_if<bool(tuple_size<_CallArgs>::value+1), _Functor>::type;

      template<typename _CallArgs, template<class> class __cv_quals>
 using _Res_type_cv = _Res_type_impl<
   typename __cv_quals<__dependent<_CallArgs>>::type,
   _CallArgs,
   typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
 explicit
 _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit
 _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;


      template<typename... _Args,
        typename _Result = _Res_type<tuple<_Args...>>>

 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>

 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }



      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_volatile>>

 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_cv>>

 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }

    };


  template<typename _Result, typename _Signature>
    class _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }



      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Res
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit
 _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit
 _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;
      _Bind_result(_Bind_result&&) = default;


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }



      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }




    };
# 773 "/usr/include/c++/15/functional" 3
  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_check_arity { };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) == sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args..., ...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) >= sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Tp, typename _Class, typename... _BoundArgs>
    struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>
    {
      using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;
      using _Varargs = typename _Mem_fn<_Tp _Class::*>::_Varargs;
      static_assert(_Varargs::value
      ? sizeof...(_BoundArgs) >= _Arity::value + 1
      : sizeof...(_BoundArgs) == _Arity::value + 1,
      "Wrong number of arguments for pointer-to-member");
    };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };






  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };






  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }
# 1123 "/usr/include/c++/15/functional" 3
  template<typename _Fn>
    class _Not_fn
    {
      template<typename _Fn2, typename... _Args>
 using __inv_res_t = typename __invoke_result<_Fn2, _Args...>::type;

      template<typename _Tp>
 static decltype(!std::declval<_Tp>())
 _S_not() noexcept(noexcept(!std::declval<_Tp>()));

    public:
      template<typename _Fn2>
 constexpr
 _Not_fn(_Fn2&& __fn, int)
 : _M_fn(std::forward<_Fn2>(__fn)) { }

      _Not_fn(const _Not_fn& __fn) = default;
      _Not_fn(_Not_fn&& __fn) = default;
      ~_Not_fn() = default;
# 1163 "/usr/include/c++/15/functional" 3
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn &, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn &, _Args...>>()) operator()(_Args&&... __args) & noexcept(__is_nothrow_invocable<_Fn &, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn &, _Args...>>())) { return !std::__invoke(std::forward< _Fn & >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn &, _Args...>::value>> void operator()(_Args&&... __args) & = delete;
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn const &, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn const &, _Args...>>()) operator()(_Args&&... __args) const & noexcept(__is_nothrow_invocable<_Fn const &, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn const &, _Args...>>())) { return !std::__invoke(std::forward< _Fn const & >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn const &, _Args...>::value>> void operator()(_Args&&... __args) const & = delete;
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn &&, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn &&, _Args...>>()) operator()(_Args&&... __args) && noexcept(__is_nothrow_invocable<_Fn &&, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn && >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn &&, _Args...>::value>> void operator()(_Args&&... __args) && = delete;
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn const &&, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn const &&, _Args...>>()) operator()(_Args&&... __args) const && noexcept(__is_nothrow_invocable<_Fn const &&, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn const &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn const && >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn const &&, _Args...>::value>> void operator()(_Args&&... __args) const && = delete;


    private:
      _Fn _M_fn;
    };

  template<typename _Tp, typename _Pred>
    struct __is_byte_like : false_type { };

  template<typename _Tp>
    struct __is_byte_like<_Tp, equal_to<_Tp>>
    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };

  template<typename _Tp>
    struct __is_byte_like<_Tp, equal_to<void>>
    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };
# 1504 "/usr/include/c++/15/functional" 3

}
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IExecutor.h" 2



# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/IExecutor.h"
namespace openpal
{

typedef std::function<void()> action_t;







class IExecutor : public IMonotonicTimeSource
{

public:

 virtual ~IExecutor() {}


 virtual ITimer* Start(const TimeDuration& duration, const action_t& action) = 0;


 virtual ITimer* Start(const MonotonicTimestamp& expiration, const action_t& action) = 0;


 virtual void Post(const action_t& action) = 0;

};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h"
namespace openpal
{



class Uncopyable
{
protected:
 Uncopyable() {}
 ~Uncopyable() {}

private:

 Uncopyable(const Uncopyable&) = delete;
 Uncopyable& operator=(const Uncopyable&) = delete;
};

class StaticOnly
{

private:

 StaticOnly() = delete;
 StaticOnly(const StaticOnly&) = delete;
 StaticOnly& operator=(const StaticOnly&) = delete;
};

}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/IO.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/IO.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/config.hpp" 1
# 649 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/config.hpp"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 220 "/usr/include/unistd.h" 3 4
typedef __ssize_t ssize_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 229 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 227 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __useconds_t useconds_t;




typedef __pid_t pid_t;
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int execveat (int __fd, const char *__path, char *const __argv[],
                     char *const __envp[], int __flags)
    noexcept (true) __attribute__ ((__nonnull__ (2, 3)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) noexcept (true);
# 350 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     noexcept (true);






extern int close (int __fd);




extern void closefrom (int __lowfd) noexcept (true);







extern ssize_t read (int __fd, void *__buf, size_t __nbytes)
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));







extern int pipe (int __pipedes[2]) noexcept (true) ;




extern int pipe2 (int __pipedes[2], int __flags) noexcept (true) ;
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) noexcept (true);
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     noexcept (true);






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) noexcept (true) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) noexcept (true) ;
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) noexcept (true) ;





extern char *get_current_dir_name (void) noexcept (true);







extern char *getwd (char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) noexcept (true) ;


extern int dup2 (int __fd, int __fd2) noexcept (true);




extern int dup3 (int __fd, int __fd2, int __flags) noexcept (true);



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) noexcept (true) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) noexcept (true);


extern long int sysconf (int __name) noexcept (true);



extern size_t confstr (int __name, char *__buf, size_t __len) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) noexcept (true);


extern __pid_t getppid (void) noexcept (true);


extern __pid_t getpgrp (void) noexcept (true);


extern __pid_t __getpgid (__pid_t __pid) noexcept (true);

extern __pid_t getpgid (__pid_t __pid) noexcept (true);






extern int setpgid (__pid_t __pid, __pid_t __pgid) noexcept (true);
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) noexcept (true);






extern __pid_t setsid (void) noexcept (true);



extern __pid_t getsid (__pid_t __pid) noexcept (true);



extern __uid_t getuid (void) noexcept (true);


extern __uid_t geteuid (void) noexcept (true);


extern __gid_t getgid (void) noexcept (true);


extern __gid_t getegid (void) noexcept (true);




extern int getgroups (int __size, __gid_t __list[]) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 2, 1)));


extern int group_member (__gid_t __gid) noexcept (true);






extern int setuid (__uid_t __uid) noexcept (true) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) noexcept (true) ;




extern int seteuid (__uid_t __uid) noexcept (true) ;






extern int setgid (__gid_t __gid) noexcept (true) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) noexcept (true) ;




extern int setegid (__gid_t __gid) noexcept (true) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     noexcept (true);



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     noexcept (true);



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     noexcept (true) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     noexcept (true) ;






extern __pid_t fork (void) noexcept (true);







extern __pid_t vfork (void) noexcept (true);






extern __pid_t _Fork (void) noexcept (true);





extern char *ttyname (int __fd) noexcept (true);



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) noexcept (true);




extern int ttyslot (void) noexcept (true);




extern int link (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) noexcept (true) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) noexcept (true);


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) noexcept (true);






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) noexcept (true) ;





extern int getdomainname (char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) noexcept (true);


extern int revoke (const char *__file) noexcept (true) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) noexcept (true);



extern char *getusershell (void) noexcept (true);
extern void endusershell (void) noexcept (true);
extern void setusershell (void) noexcept (true);





extern int daemon (int __nochdir, int __noclose) noexcept (true) ;






extern int chroot (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) noexcept (true);






extern long int gethostid (void);


extern void sync (void) noexcept (true);





extern int getpagesize (void) noexcept (true) __attribute__ ((__const__));




extern int getdtablesize (void) noexcept (true);
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) noexcept (true) ;
# 1059 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) noexcept (true) ;
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) noexcept (true) ;





extern void *sbrk (intptr_t __delta) noexcept (true);
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) noexcept (true);
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1124 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1142 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1162 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)))
    __attribute__ ((__access__ (__read_only__, 1, 3)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 1201 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1211 "/usr/include/unistd.h" 3 4
extern int close_range (unsigned int __fd, unsigned int __max_fd,
   int __flags) noexcept (true);
# 1221 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) noexcept (true);



# 1 "/usr/include/linux/close_range.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 2 3 4
# 1222 "/usr/include/unistd.h" 2 3 4

}
# 650 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/config.hpp" 2




# 1 "/usr/include/linux/version.h" 1 3 4
# 655 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/config.hpp" 2
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp" 2


# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp"
namespace asio {
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp"
template <typename Handler, typename Signature>
struct handler_type
{

  typedef Handler type;
};



template <typename Handler, typename Signature>
struct handler_type<const Handler, Signature>
  : handler_type<Handler, Signature> {};

template <typename Handler, typename Signature>
struct handler_type<volatile Handler, Signature>
  : handler_type<Handler, Signature> {};

template <typename Handler, typename Signature>
struct handler_type<const volatile Handler, Signature>
  : handler_type<Handler, Signature> {};

template <typename Handler, typename Signature>
struct handler_type<const Handler&, Signature>
  : handler_type<Handler, Signature> {};

template <typename Handler, typename Signature>
struct handler_type<volatile Handler&, Signature>
  : handler_type<Handler, Signature> {};

template <typename Handler, typename Signature>
struct handler_type<const volatile Handler&, Signature>
  : handler_type<Handler, Signature> {};

template <typename Handler, typename Signature>
struct handler_type<Handler&, Signature>
  : handler_type<Handler, Signature> {};


template <typename Handler, typename Signature>
struct handler_type<Handler&&, Signature>
  : handler_type<Handler, Signature> {};


template <typename ReturnType, typename Signature>
struct handler_type<ReturnType(), Signature>
  : handler_type<ReturnType(*)(), Signature> {};

template <typename ReturnType, typename Arg1, typename Signature>
struct handler_type<ReturnType(Arg1), Signature>
  : handler_type<ReturnType(*)(Arg1), Signature> {};

template <typename ReturnType, typename Arg1, typename Arg2, typename Signature>
struct handler_type<ReturnType(Arg1, Arg2), Signature>
  : handler_type<ReturnType(*)(Arg1, Arg2), Signature> {};

template <typename ReturnType, typename Arg1, typename Arg2, typename Arg3,
    typename Signature>
struct handler_type<ReturnType(Arg1, Arg2, Arg3), Signature>
  : handler_type<ReturnType(*)(Arg1, Arg2, Arg3), Signature> {};

template <typename ReturnType, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Signature>
struct handler_type<ReturnType(Arg1, Arg2, Arg3, Arg4), Signature>
  : handler_type<ReturnType(*)(Arg1, Arg2, Arg3, Arg4), Signature> {};

template <typename ReturnType, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Arg5, typename Signature>
struct handler_type<ReturnType(Arg1, Arg2, Arg3, Arg4, Arg5), Signature>
  : handler_type<ReturnType(*)(Arg1, Arg2, Arg3, Arg4, Arg5), Signature> {};



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp" 2

namespace asio {





template <typename Handler>
class async_result
{
public:

  typedef void type;







  explicit async_result(Handler&)
  {
  }


  type get()
  {
  }
};

namespace detail {



template <typename Handler, typename Signature>
struct async_result_init
{
  explicit async_result_init(Handler&& orig_handler)
    : handler(static_cast<Handler&&>(orig_handler)),
      result(handler)
  {
  }

  typename handler_type<Handler, Signature>::type handler;
  async_result<typename handler_type<Handler, Signature>::type> result;
};

template <typename Handler, typename Signature>
struct async_result_type_helper
{
  typedef typename async_result<
      typename handler_type<Handler, Signature>::type
    >::type type;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp" 2
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
# 1 "/usr/include/c++/15/cstddef" 1 3
# 52 "/usr/include/c++/15/cstddef" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 160 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 3 4

# 160 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 440 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 451 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 53 "/usr/include/c++/15/cstddef" 2 3


# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 56 "/usr/include/c++/15/cstddef" 2 3

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"

extern "C++"
{

namespace std
{

  using ::max_align_t;
}
# 195 "/usr/include/c++/15/cstddef" 3
}

#pragma GCC diagnostic pop
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/async_result.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
# 1 "/usr/include/c++/15/stdexcept" 1 3
# 40 "/usr/include/c++/15/stdexcept" 3
# 1 "/usr/include/c++/15/exception" 1 3
# 41 "/usr/include/c++/15/exception" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 42 "/usr/include/c++/15/exception" 2 3

extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/usr/include/c++/15/exception" 3
  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__,__cold__));



  typedef void (* unexpected_handler) ();





 
  unexpected_handler set_unexpected(unexpected_handler) noexcept;







 
  unexpected_handler get_unexpected() noexcept;







 
  void unexpected() __attribute__ ((__noreturn__,__cold__));
# 126 "/usr/include/c++/15/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));
# 138 "/usr/include/c++/15/exception" 3
}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 160 "/usr/include/c++/15/exception" 3
  void __verbose_terminate_handler();


}

}


# 1 "/usr/include/c++/15/bits/exception_ptr.h" 1 3
# 36 "/usr/include/c++/15/bits/exception_ptr.h" 3
# 1 "/usr/include/c++/15/bits/cxxabi_init_exception.h" 1 3
# 38 "/usr/include/c++/15/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 41 "/usr/include/c++/15/bits/cxxabi_init_exception.h" 2 3
# 52 "/usr/include/c++/15/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *__object, std::type_info *__tinfo,
                void ( *__dest) (void *))
 noexcept;

    }
}



#pragma GCC visibility pop
# 37 "/usr/include/c++/15/bits/exception_ptr.h" 2 3
# 50 "/usr/include/c++/15/bits/exception_ptr.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;
# 75 "/usr/include/c++/15/bits/exception_ptr.h" 3
  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;
# 97 "/usr/include/c++/15/bits/exception_ptr.h" 3
    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(nullptr)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = nullptr; }
# 135 "/usr/include/c++/15/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 161 "/usr/include/c++/15/bits/exception_ptr.h" 3
      explicit operator bool() const noexcept
      { return _M_exception_object; }







      friend bool
      operator==(const exception_ptr& __x, const exception_ptr& __y)
      noexcept
      { return __x._M_exception_object == __y._M_exception_object; }

      friend bool
      operator!=(const exception_ptr& __x, const exception_ptr& __y)
      noexcept
      { return __x._M_exception_object != __y._M_exception_object; }


      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

   
    inline
    exception_ptr::exception_ptr() noexcept
    : _M_exception_object(0)
    { }

   
    inline
    exception_ptr::exception_ptr(const exception_ptr& __other)
    noexcept
    : _M_exception_object(__other._M_exception_object)
    {
      if (_M_exception_object)
 _M_addref();
    }

   
    inline
    exception_ptr::~exception_ptr() noexcept
    {
      if (_M_exception_object)
 _M_release();
    }

   
    inline exception_ptr&
    exception_ptr::operator=(const exception_ptr& __other) noexcept
    {
      exception_ptr(__other).swap(*this);
      return *this;
    }

   
    inline void
    exception_ptr::swap(exception_ptr &__other) noexcept
    {
      void *__tmp = _M_exception_object;
      _M_exception_object = __other._M_exception_object;
      __other._M_exception_object = __tmp;
    }


    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }


    template<typename _Ex>
     
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }

  using __exception_ptr::swap;



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      using _Ex2 = typename decay<_Ex>::type;
      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
      (void) __cxxabiv1::__cxa_init_primary_exception(
   __e, const_cast<std::type_info*>(&typeid(_Ex)),
   __exception_ptr::__dest_thunk<_Ex2>);
      try
 {
   ::new (__e) _Ex2(__ex);
   return exception_ptr(__e);
 }
      catch(...)
 {
   __cxxabiv1::__cxa_free_exception(__e);
   return current_exception();
 }
# 276 "/usr/include/c++/15/bits/exception_ptr.h" 3
    }
# 290 "/usr/include/c++/15/bits/exception_ptr.h" 3
}

}
# 169 "/usr/include/c++/15/exception" 2 3
# 1 "/usr/include/c++/15/bits/nested_exception.h" 1 3
# 40 "/usr/include/c++/15/bits/nested_exception.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
# 59 "/usr/include/c++/15/bits/nested_exception.h" 3
  class nested_exception
  {
    exception_ptr _M_ptr;

  public:

    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;


    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }


    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };





  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      throw _Nested_exception<__remove_cvref_t<_Tp>>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }
# 145 "/usr/include/c++/15/bits/nested_exception.h" 3
  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
# 163 "/usr/include/c++/15/bits/nested_exception.h" 3
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});

    }





  template<typename _Ex>
    inline void
    __rethrow_if_nested_impl(const _Ex* __ptr, true_type)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*, false_type)
  { }
# 203 "/usr/include/c++/15/bits/nested_exception.h" 3
  template<typename _Ex>



    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      const _Ex* __ptr = __builtin_addressof(__ex);


      using __cast = __and_<is_polymorphic<_Ex>,
       __or_<__not_<is_base_of<nested_exception, _Ex>>,
      is_convertible<_Ex*, nested_exception*>>>;





      std::__rethrow_if_nested_impl(__ptr, __cast{});
# 235 "/usr/include/c++/15/bits/nested_exception.h" 3
    }


}

}
# 170 "/usr/include/c++/15/exception" 2 3
# 41 "/usr/include/c++/15/stdexcept" 2 3
# 1 "/usr/include/c++/15/string" 1 3
# 40 "/usr/include/c++/15/string" 3
# 1 "/usr/include/c++/15/bits/requires_hosted.h" 1 3
# 41 "/usr/include/c++/15/string" 2 3


# 1 "/usr/include/c++/15/bits/stringfwd.h" 1 3
# 42 "/usr/include/c++/15/bits/stringfwd.h" 3
# 1 "/usr/include/c++/15/bits/memoryfwd.h" 1 3
# 52 "/usr/include/c++/15/bits/memoryfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/15/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;



  template<typename, typename>
    struct uses_allocator;

  template<typename>
    struct allocator_traits;





}
# 43 "/usr/include/c++/15/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;

  template<> struct char_traits<wchar_t>;






  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;


  typedef basic_string<wchar_t> wstring;
# 91 "/usr/include/c++/15/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 44 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/char_traits.h" 1 3
# 44 "/usr/include/c++/15/bits/char_traits.h" 3
# 1 "/usr/include/c++/15/bits/postypes.h" 1 3
# 42 "/usr/include/c++/15/bits/postypes.h" 3
# 1 "/usr/include/c++/15/cwchar" 1 3
# 49 "/usr/include/c++/15/cwchar" 3
# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 132 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4




typedef __gnuc_va_list va_list;
# 52 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 53 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 54 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 55 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 58 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 61 "/usr/include/wchar.h" 2 3 4
# 90 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern size_t wcslcpy (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



extern size_t wcslcat (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__read_write__, 1, 3)));



extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) noexcept (true);



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) noexcept (true);

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) noexcept (true);




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) noexcept (true);







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) noexcept (true);




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) noexcept (true);


extern wchar_t *wcsdup (const wchar_t *__s) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcsrchr") __attribute__ ((__pure__));
# 206 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     noexcept (true) __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     noexcept (true) __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     noexcept (true) __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) noexcept (true);


extern size_t wcslen (const wchar_t *__s) noexcept (true) __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     noexcept (true) __asm ("wcswcs") __attribute__ ((__pure__));
# 265 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     noexcept (true) __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     noexcept (true) __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) noexcept (true);



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true);


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) noexcept (true);




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     noexcept (true);





extern wint_t btowc (int __c) noexcept (true);



extern int wctob (wint_t __c) noexcept (true);



extern int mbsinit (const mbstate_t *__ps) noexcept (true) __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) noexcept (true);


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) noexcept (true);


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) noexcept (true);
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) noexcept (true);







extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__leaf__)) btowc (int __c) noexcept (true)
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) wctob (wint_t __wc) noexcept (true)
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) noexcept (true)

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }




extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) noexcept (true);






extern int wcwidth (wchar_t __c) noexcept (true);



extern int wcswidth (const wchar_t *__s, size_t __n) noexcept (true);





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) noexcept (true);



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 422 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 455 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) noexcept (true);



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     noexcept (true);




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) noexcept (true);





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) noexcept (true);






extern long int wcstol (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstol")

                                   ;
extern unsigned long int wcstoul (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoul")


                                     ;
__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoll")


                                        ;
__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoull")


                                           ;

__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoll")

                                         ;
__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoull")


                                           ;
# 561 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true);

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) noexcept (true);

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) noexcept (true);

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true);





extern long int wcstol_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstol_l")


                      ;
extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstoul_l")



                         ;
__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstoll_l")



                            ;
__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstoull_l")



                               ;
# 630 "/usr/include/wchar.h" 3 4
extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 649 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 689 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) noexcept (true);



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true);
# 718 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern int fwide (__FILE *__fp, int __mode) noexcept (true);






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     noexcept (true) ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     noexcept (true) ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     noexcept (true) ;
# 795 "/usr/include/wchar.h" 3 4
extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc23_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc23_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc23_swscanf")


                                                          ;
# 851 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     noexcept (true) ;
# 875 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc23_vswscanf")


                                                          ;
# 935 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 990 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 1016 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 1026 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) noexcept (true);




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);
# 1073 "/usr/include/wchar.h" 3 4
}
# 50 "/usr/include/c++/15/cwchar" 2 3
# 64 "/usr/include/c++/15/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 137 "/usr/include/c++/15/cwchar" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 236 "/usr/include/c++/15/cwchar" 3

}
}







namespace __gnu_cxx
{





  using ::wcstold;
# 262 "/usr/include/c++/15/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 282 "/usr/include/c++/15/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 43 "/usr/include/c++/15/bits/postypes.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/15/bits/postypes.h" 3
 
# 55 "/usr/include/c++/15/bits/postypes.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
# 66 "/usr/include/c++/15/bits/postypes.h" 3
  typedef long int streamoff;



#pragma GCC diagnostic pop


  typedef ptrdiff_t streamsize;
# 86 "/usr/include/c++/15/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 108 "/usr/include/c++/15/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 220 "/usr/include/c++/15/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 45 "/usr/include/c++/15/bits/char_traits.h" 2 3
# 66 "/usr/include/c++/15/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


 
# 70 "/usr/include/c++/15/bits/char_traits.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstringop-overflow"
#pragma GCC diagnostic ignored "-Wstringop-overread"
#pragma GCC diagnostic ignored "-Warray-bounds"
# 85 "/usr/include/c++/15/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;

      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;

    };
# 112 "/usr/include/c++/15/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;

      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;





      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }


      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }

    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
# 248 "/usr/include/c++/15/bits/char_traits.h" 3
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
      return __s1;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
# 268 "/usr/include/c++/15/bits/char_traits.h" 3
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
      return __s1;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {
# 287 "/usr/include/c++/15/bits/char_traits.h" 3
      if (sizeof(_CharT) == 1 && __is_trivial(_CharT))
 {
   if (__n)
     {
       unsigned char __c;
       __builtin_memcpy(&__c, __builtin_addressof(__a), 1);
       __builtin_memset(__s, __c, __n);
     }
 }
      else
 {
   for (std::size_t __i = 0; __i < __n; ++__i)
     __s[__i] = __a;
 }
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 324 "/usr/include/c++/15/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;

      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;





      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;
# 383 "/usr/include/c++/15/bits/char_traits.h" 3
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;




 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }

  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;

      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;





      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;




 return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;




 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }

  };
# 731 "/usr/include/c++/15/bits/char_traits.h" 3

}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;

      typedef short unsigned int int_type;




      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;





      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }





    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;

      typedef unsigned int int_type;




      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;





      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }

    };
# 1009 "/usr/include/c++/15/bits/char_traits.h" 3
#pragma GCC diagnostic pop


}
# 45 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/allocator.h" 1 3
# 46 "/usr/include/c++/15/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++allocator.h" 3
# 1 "/usr/include/c++/15/bits/new_allocator.h" 1 3
# 41 "/usr/include/c++/15/bits/new_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/15/bits/new_allocator.h" 3
  template<typename _Tp>
    class __new_allocator
    {
    public:
      typedef _Tp value_type;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef __new_allocator<_Tp1> other; };





      typedef std::true_type propagate_on_container_move_assignment;


      __attribute__((__always_inline__))
     
      __new_allocator() noexcept { }

      __attribute__((__always_inline__))
     
      __new_allocator(const __new_allocator&) noexcept { }

      template<typename _Tp1>
 __attribute__((__always_inline__))

 __new_allocator(const __new_allocator<_Tp1>&) noexcept { }


      __new_allocator& operator=(const __new_allocator&) = default;



      ~__new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }
# 125 "/usr/include/c++/15/bits/new_allocator.h" 3
      [[__nodiscard__]] _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {



 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");


 if (__builtin_expect(__n > this->_M_max_size(), false))
   {


     if (__n > (std::size_t(-1) / sizeof(_Tp)))
       std::__throw_bad_array_new_length();
     std::__throw_bad_alloc();
   }
# 151 "/usr/include/c++/15/bits/new_allocator.h" 3
 return static_cast<_Tp*>(__builtin_operator_new(__n * sizeof(_Tp)));
      }


      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      {
# 172 "/usr/include/c++/15/bits/new_allocator.h" 3
 __builtin_operator_delete((__p), (__n) * sizeof(_Tp));
      }






      __attribute__((__always_inline__))
      size_type
      max_size() const noexcept
      { return _M_max_size(); }


      template<typename _Up, typename... _Args>
 __attribute__((__always_inline__))
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(__is_nothrow_new_constructible<_Up, _Args...>)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 __attribute__((__always_inline__))
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }
# 213 "/usr/include/c++/15/bits/new_allocator.h" 3
      template<typename _Up>
 friend __attribute__((__always_inline__)) bool
 operator==(const __new_allocator&, const __new_allocator<_Up>&)
 noexcept
 { return true; }


      template<typename _Up>
 friend __attribute__((__always_inline__)) bool
 operator!=(const __new_allocator&, const __new_allocator<_Up>&)
 noexcept
 { return false; }


    private:
      __attribute__((__always_inline__))
      constexpr size_type
      _M_max_size() const noexcept
      {

 return std::size_t(0x7fffffffffffffffL) / sizeof(_Tp);



      }
    };


}
# 34 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++allocator.h" 2 3


namespace std
{
# 46 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __new_allocator<_Tp>;
}
# 47 "/usr/include/c++/15/bits/allocator.h" 2 3





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 75 "/usr/include/c++/15/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef void value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;



      typedef void* pointer;
      typedef const void* const_pointer;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      using propagate_on_container_move_assignment = true_type;


      using is_always_equal

 = true_type;
# 120 "/usr/include/c++/15/bits/allocator.h" 3
    };
# 132 "/usr/include/c++/15/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
    public:
      typedef _Tp value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;



      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      using propagate_on_container_move_assignment = true_type;


      using is_always_equal

 = true_type;





      __attribute__((__always_inline__))
     
      allocator() noexcept { }

      __attribute__((__always_inline__))
     
      allocator(const allocator& __a) noexcept
      : __allocator_base<_Tp>(__a) { }



      allocator& operator=(const allocator&) = default;


      template<typename _Tp1>
 __attribute__((__always_inline__))

 allocator(const allocator<_Tp1>&) noexcept { }

      __attribute__((__always_inline__))



      ~allocator() noexcept { }
# 219 "/usr/include/c++/15/bits/allocator.h" 3
      friend __attribute__((__always_inline__))
      bool
      operator==(const allocator&, const allocator&) noexcept
      { return true; }


      friend __attribute__((__always_inline__))
      bool
      operator!=(const allocator&, const allocator&) noexcept
      { return false; }



    };






  template<typename _T1, typename _T2>
    __attribute__((__always_inline__))
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }


  template<typename _T1, typename _T2>
    __attribute__((__always_inline__))
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }






  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      allocator() { }
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      allocator() { }
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      allocator() { }
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };







  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






}

#pragma GCC diagnostic pop
# 46 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/cpp_type_traits.h" 1 3
# 40 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 41 "/usr/include/c++/15/bits/cpp_type_traits.h" 2 3




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
# 76 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 176 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 281 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 358 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 438 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable
    {
      enum { __value = __is_trivially_copyable(_Tp) };
    };




  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable<volatile _Tp>
    {
      enum { __value = 0 };
    };


  template<typename _OutputIter, typename _InputIter>
    struct __memcpyable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcpyable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };


  template<typename _Tp>
    struct __memcpyable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp> struct __memcpyable_integer;




  template<typename _Tp, typename _Up>
    struct __memcpyable<_Tp*, _Up*>
    {
      enum {
 __value = __memcpyable_integer<_Tp>::__width != 0
      && ((int)__memcpyable_integer<_Tp>::__width
     == (int)__memcpyable_integer<_Up>::__width)
      };
    };


  template<typename _Tp, typename _Up>
    struct __memcpyable<_Tp*, const _Up*>
    : __memcpyable<_Tp*, _Up*>
    { };

  template<typename _Tp>
    struct __memcpyable_integer
    {
      enum {
 __width = __is_integer<_Tp>::__value ? (sizeof(_Tp) * 8) : 0
      };
    };


  template<typename _Tp>
    struct __memcpyable_integer<volatile _Tp>
    { enum { __width = 0 }; };
# 551 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  __extension__
  template<>
    struct __memcpyable_integer<__int128> { enum { __width = 128 }; };
  __extension__
  template<>
    struct __memcpyable_integer<unsigned __int128> { enum { __width = 128 }; };
# 592 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  template<typename _Iter1, typename _Iter2>
    struct __memcmpable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcmpable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<const _Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };







  template<typename _Tp, bool _TreatAsBytes =



 __is_byte<_Tp>::__value

    >
    struct __is_memcmp_ordered
    {
      static const bool __value = _Tp(-1) > _Tp(1);
    };

  template<typename _Tp>
    struct __is_memcmp_ordered<_Tp, false>
    {
      static const bool __value = false;
    };


  template<typename _Tp, typename _Up, bool = sizeof(_Tp) == sizeof(_Up)>
    struct __is_memcmp_ordered_with
    {
      static const bool __value = __is_memcmp_ordered<_Tp>::__value
 && __is_memcmp_ordered<_Up>::__value;
    };

  template<typename _Tp, typename _Up>
    struct __is_memcmp_ordered_with<_Tp, _Up, false>
    {
      static const bool __value = false;
    };
# 686 "/usr/include/c++/15/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
   
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}

#pragma GCC diagnostic pop
# 47 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/localefwd.h" 1 3
# 42 "/usr/include/c++/15/bits/localefwd.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++locale.h" 3

# 1 "/usr/include/c++/15/clocale" 1 3
# 47 "/usr/include/c++/15/clocale" 3
# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) noexcept (true);


extern struct lconv *localeconv (void) noexcept (true);
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) noexcept (true);
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) noexcept (true);



extern void freelocale (locale_t __dataset) noexcept (true);






extern locale_t uselocale (locale_t __dataset) noexcept (true);







}
# 48 "/usr/include/c++/15/clocale" 2 3





namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;
# 73 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++locale.h" 3
  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 93 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }







}
# 43 "/usr/include/c++/15/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/15/iosfwd" 1 3
# 46 "/usr/include/c++/15/iosfwd" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 78 "/usr/include/c++/15/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;
# 257 "/usr/include/c++/15/iosfwd" 3

}
# 44 "/usr/include/c++/15/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/15/cctype" 1 3
# 47 "/usr/include/c++/15/cctype" 3
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     noexcept (true) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) noexcept (true);
extern int isalpha (int) noexcept (true);
extern int iscntrl (int) noexcept (true);
extern int isdigit (int) noexcept (true);
extern int islower (int) noexcept (true);
extern int isgraph (int) noexcept (true);
extern int isprint (int) noexcept (true);
extern int ispunct (int) noexcept (true);
extern int isspace (int) noexcept (true);
extern int isupper (int) noexcept (true);
extern int isxdigit (int) noexcept (true);



extern int tolower (int __c) noexcept (true);


extern int toupper (int __c) noexcept (true);




extern int isblank (int) noexcept (true);




extern int isctype (int __c, int __mask) noexcept (true);






extern int isascii (int __c) noexcept (true);



extern int toascii (int __c) noexcept (true);



extern int _toupper (int) noexcept (true);
extern int _tolower (int) noexcept (true);
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) noexcept (true);
extern int isalpha_l (int, locale_t) noexcept (true);
extern int iscntrl_l (int, locale_t) noexcept (true);
extern int isdigit_l (int, locale_t) noexcept (true);
extern int islower_l (int, locale_t) noexcept (true);
extern int isgraph_l (int, locale_t) noexcept (true);
extern int isprint_l (int, locale_t) noexcept (true);
extern int ispunct_l (int, locale_t) noexcept (true);
extern int isspace_l (int, locale_t) noexcept (true);
extern int isupper_l (int, locale_t) noexcept (true);
extern int isxdigit_l (int, locale_t) noexcept (true);

extern int isblank_l (int, locale_t) noexcept (true);



extern int __tolower_l (int __c, locale_t __l) noexcept (true);
extern int tolower_l (int __c, locale_t __l) noexcept (true);


extern int __toupper_l (int __c, locale_t __l) noexcept (true);
extern int toupper_l (int __c, locale_t __l) noexcept (true);
# 327 "/usr/include/ctype.h" 3 4
}
# 48 "/usr/include/c++/15/cctype" 2 3
# 64 "/usr/include/c++/15/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 45 "/usr/include/c++/15/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/15/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  struct ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;


  template<> class codecvt<char16_t, char, mbstate_t>;
  template<> class codecvt<char32_t, char, mbstate_t>;





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  struct messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 48 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/ostream_insert.h" 1 3
# 38 "/usr/include/c++/15/bits/ostream_insert.h" 3
# 1 "/usr/include/c++/15/bits/cxxabi_forced.h" 1 3
# 38 "/usr/include/c++/15/bits/cxxabi_forced.h" 3
#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 39 "/usr/include/c++/15/bits/ostream_insert.h" 2 3


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);






}

#pragma GCC diagnostic pop
# 49 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 1 3
# 66 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 3
# 1 "/usr/include/c++/15/bits/concept_check.h" 1 3
# 39 "/usr/include/c++/15/bits/concept_check.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvariadic-macros"
# 86 "/usr/include/c++/15/bits/concept_check.h" 3
#pragma GCC diagnostic pop
# 67 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 2 3
# 1 "/usr/include/c++/15/debug/assertions.h" 1 3
# 68 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 2 3
# 1 "/usr/include/c++/15/bits/stl_iterator_base_types.h" 1 3
# 76 "/usr/include/c++/15/bits/stl_iterator_base_types.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 95 "/usr/include/c++/15/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 127 "/usr/include/c++/15/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 151 "/usr/include/c++/15/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits;




  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };



  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 211 "/usr/include/c++/15/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };






  template<typename _Iter>
    __attribute__((__always_inline__))
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }




  template<typename _Iter>
    using __iter_category_t
      = typename iterator_traits<_Iter>::iterator_category;

  template<typename _InIter>
    using _RequireInputIter =
      __enable_if_t<is_convertible<__iter_category_t<_InIter>,
       input_iterator_tag>::value>;







  template<typename _It,
    typename _Cat = __iter_category_t<_It>>
    struct __is_random_access_iter
      : is_base_of<random_access_iterator_tag, _Cat>
    {
      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;
      enum { __value = _Base::value };
    };








}
# 69 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    __attribute__((__always_inline__))
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);




  template<typename _OutputIterator>
    void
    __distance(_OutputIterator, _OutputIterator, output_iterator_tag) = delete;
# 146 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    [[__nodiscard__]] __attribute__((__always_inline__))
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      do { if (std::__is_constant_evaluated() && !bool(__n >= 0)) std::__glibcxx_assert_fail(); } while (false);
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }



  template<typename _OutputIterator, typename _Distance>
    void
    __advance(_OutputIterator&, _Distance, output_iterator_tag) = delete;
# 219 "/usr/include/c++/15/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    __attribute__((__always_inline__))
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    [[__nodiscard__]] [[__gnu__::__always_inline__]]
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    [[__nodiscard__]] [[__gnu__::__always_inline__]]
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 50 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/stl_iterator.h" 1 3
# 65 "/usr/include/c++/15/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/15/ext/type_traits.h" 1 3
# 39 "/usr/include/c++/15/ext/type_traits.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"

extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    constexpr
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    constexpr
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  constexpr bool
  __is_null_pointer(std::nullptr_t)
  { return true; }




  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };
# 246 "/usr/include/c++/15/ext/type_traits.h" 3
  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };



}
}

#pragma GCC diagnostic pop
# 66 "/usr/include/c++/15/bits/stl_iterator.h" 2 3

# 1 "/usr/include/c++/15/bits/ptr_traits.h" 1 3
# 42 "/usr/include/c++/15/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  class __undefined;



  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _SomeTemplate, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_SomeTemplate<_Tp, _Types...>>
    { using type = _Tp; };



  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _SomeTemplate, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_SomeTemplate<_Tp, _Types...>, _Up>
    { using type = _SomeTemplate<_Up, _Types...>; };


  template<typename _Ptr, typename = void>
    struct __ptr_traits_elem : __get_first_arg<_Ptr>
    { };







  template<typename _Ptr>
    struct __ptr_traits_elem<_Ptr, __void_t<typename _Ptr::element_type>>
    { using type = typename _Ptr::element_type; };


  template<typename _Ptr>
    using __ptr_traits_elem_t = typename __ptr_traits_elem<_Ptr>::type;




  template<typename _Ptr, typename _Elt, bool = is_void<_Elt>::value>
    struct __ptr_traits_ptr_to
    {
      using pointer = _Ptr;
      using element_type = _Elt;







      static pointer
      pointer_to(element_type& __r)





      { return pointer::pointer_to(__r); }
    };


  template<typename _Ptr, typename _Elt>
    struct __ptr_traits_ptr_to<_Ptr, _Elt, true>
    { };


  template<typename _Tp>
    struct __ptr_traits_ptr_to<_Tp*, _Tp, false>
    {
      using pointer = _Tp*;
      using element_type = _Tp;






      static pointer
      pointer_to(element_type& __r) noexcept
      { return std::addressof(__r); }
    };

  template<typename _Ptr, typename _Elt>
    struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>
    {
    private:
      template<typename _Tp>
 using __diff_t = typename _Tp::difference_type;

      template<typename _Tp, typename _Up>
 using __rebind = __type_identity<typename _Tp::template rebind<_Up>>;

    public:

      using pointer = _Ptr;


      using element_type = _Elt;


      using difference_type = __detected_or_t<ptrdiff_t, __diff_t, _Ptr>;


      template<typename _Up>
 using rebind = typename __detected_or_t<__replace_first_arg<_Ptr, _Up>,
      __rebind, _Ptr, _Up>::type;
    };



  template<typename _Ptr>
    struct __ptr_traits_impl<_Ptr, __undefined>
    { };







  template<typename _Ptr>
    struct pointer_traits : __ptr_traits_impl<_Ptr, __ptr_traits_elem_t<_Ptr>>
    { };







  template<typename _Tp>
    struct pointer_traits<_Tp*> : __ptr_traits_ptr_to<_Tp*, _Tp>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up> using rebind = _Up*;
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;


  template<typename _Tp>
    [[__gnu__::__always_inline__]]
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "std::to_address argument "
      "must not be a function pointer");
      return __ptr;
    }





  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 268 "/usr/include/c++/15/bits/ptr_traits.h" 3

}
# 68 "/usr/include/c++/15/bits/stl_iterator.h" 2 3
# 85 "/usr/include/c++/15/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 108 "/usr/include/c++/15/bits/stl_iterator.h" 3
 
# 108 "/usr/include/c++/15/bits/stl_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 130 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
      template<typename _Iter>
 friend class reverse_iterator;
# 149 "/usr/include/c++/15/bits/stl_iterator.h" 3
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::pointer pointer;

      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
# 180 "/usr/include/c++/15/bits/stl_iterator.h" 3
     
      reverse_iterator()
      noexcept(noexcept(_Iterator()))
      : current()
      { }




      explicit
      reverse_iterator(iterator_type __x)
      noexcept(noexcept(_Iterator(__x)))
      : current(__x)
      { }




     
      reverse_iterator(const reverse_iterator& __x)
      noexcept(noexcept(_Iterator(__x.current)))
      : current(__x.current)
      { }


      reverse_iterator& operator=(const reverse_iterator&) = default;






      template<typename _Iter>




        reverse_iterator(const reverse_iterator<_Iter>& __x)
 noexcept(noexcept(_Iterator(__x.current)))
 : current(__x.current)
 { }


      template<typename _Iter>





 reverse_iterator&
 operator=(const reverse_iterator<_Iter>& __x)
 noexcept(noexcept(current = __x.current))
 {
   current = __x.current;
   return *this;
 }





      [[__nodiscard__]]
      iterator_type
      base() const
      noexcept(noexcept(_Iterator(current)))
      { return current; }
# 257 "/usr/include/c++/15/bits/stl_iterator.h" 3
      [[__nodiscard__]]
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      [[__nodiscard__]]
      pointer
      operator->() const




      {


 _Iterator __tmp = current;
 --__tmp;
 return _S_to_pointer(__tmp);
      }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      [[__nodiscard__]]
      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      [[__nodiscard__]]
      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      [[__nodiscard__]]
      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
# 417 "/usr/include/c++/15/bits/stl_iterator.h" 3
    private:
      template<typename _Tp>
 static _Tp*
 _S_to_pointer(_Tp* __p)
        { return __p; }

      template<typename _Tp>
 static pointer
 _S_to_pointer(_Tp __t)
        { return __t.operator->(); }
    };
# 440 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }




  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __x.base() > __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() != __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() >= __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() <= __y.base(); }
# 617 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    [[__nodiscard__]]
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }





  template<typename _Iterator>
    [[__nodiscard__]]
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }
# 659 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };
# 676 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;





      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 714 "/usr/include/c++/15/bits/stl_iterator.h" 3
     
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

     
      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      [[__nodiscard__]]
      back_insert_iterator&
      operator*()
      { return *this; }


     
      back_insert_iterator&
      operator++()
      { return *this; }


     
      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 761 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Container>
    [[__nodiscard__]]
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 777 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;





      explicit
      front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 815 "/usr/include/c++/15/bits/stl_iterator.h" 3
     
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

     
      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      [[__nodiscard__]]
      front_insert_iterator&
      operator*()
      { return *this; }


     
      front_insert_iterator&
      operator++()
      { return *this; }


     
      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 862 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Container>
    [[__nodiscard__]]
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 882 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {



      typedef typename _Container::iterator _Iter;

    protected:
      _Container* container;
      _Iter iter;

    public:

      typedef _Container container_type;
# 907 "/usr/include/c++/15/bits/stl_iterator.h" 3
     
      insert_iterator(_Container& __x, _Iter __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 943 "/usr/include/c++/15/bits/stl_iterator.h" 3
     
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

     
      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      [[__nodiscard__]]
      insert_iterator&
      operator*()
      { return *this; }


     
      insert_iterator&
      operator++()
      { return *this; }


     
      insert_iterator&
      operator++(int)
      { return *this; }
    };

#pragma GCC diagnostic pop
# 1002 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Container>
    [[__nodiscard__]]
    inline insert_iterator<_Container>
    inserter(_Container& __x, typename _Container::iterator __i)
    { return insert_iterator<_Container>(__x, __i); }





}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 1025 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef std::iterator_traits<_Iterator> __traits_type;


      template<typename _Iter>
 using __convertible_from
   = std::__enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;


    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;





      __attribute__((__always_inline__))
      constexpr
      __normal_iterator() noexcept
      : _M_current() { }

      __attribute__((__always_inline__))
      explicit constexpr
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }






      template<typename _Iter, typename = __convertible_from<_Iter>>

 [[__gnu__::__always_inline__]]
 constexpr
 __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 noexcept
# 1082 "/usr/include/c++/15/bits/stl_iterator.h" 3
        : _M_current(__i.base()) { }



      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      reference
      operator*() const noexcept
      { return *_M_current; }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      pointer
      operator->() const noexcept
      { return _M_current; }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }



      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }



      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 1217 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__))
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }






  template<typename _IteratorL, typename _IteratorR, typename _Container>


    [[__nodiscard__, __gnu__::__always_inline__]]
    constexpr auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 1434 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator



    {
      _Iterator _M_current;

      using __traits_type = iterator_traits<_Iterator>;

      using __base_ref = typename __traits_type::reference;


      template<typename _Iter2>
 friend class move_iterator;
# 1473 "/usr/include/c++/15/bits/stl_iterator.h" 3
    public:
      using iterator_type = _Iterator;
# 1485 "/usr/include/c++/15/bits/stl_iterator.h" 3
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      using reference
 = __conditional_t<is_reference<__base_ref>::value,
     typename remove_reference<__base_ref>::type&&,
     __base_ref>;


     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(std::move(__i)) { }

      template<typename _Iter>




 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i._M_current) { }

      template<typename _Iter>





 move_iterator& operator=(const move_iterator<_Iter>& __i)
 {
   _M_current = __i._M_current;
   return *this;
 }


      [[__nodiscard__]]
      iterator_type
      base() const
      { return _M_current; }
# 1543 "/usr/include/c++/15/bits/stl_iterator.h" 3
      [[__nodiscard__]]
      reference
      operator*() const



      { return static_cast<reference>(*_M_current); }


      [[__nodiscard__]]
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }







      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      [[__nodiscard__]]
      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      [[__nodiscard__]]
      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      [[__nodiscard__]]
      reference
      operator[](difference_type __n) const



      { return std::move(_M_current[__n]); }
# 1657 "/usr/include/c++/15/bits/stl_iterator.h" 3
    };

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return __x.base() == __y.base(); }
# 1678 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }


  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__x < __y); }




  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)

    { return __x.base() == __y.base(); }
# 1745 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)



    { return __x + __n; }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(std::move(__i)); }

  template<typename _Iterator, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
  _Iterator, move_iterator<_Iterator>>>
    [[__nodiscard__]]
    constexpr _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
        const _Tp*, move_iterator<_Tp*>>>
    [[__nodiscard__]]
    constexpr _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 2980 "/usr/include/c++/15/bits/stl_iterator.h" 3

}

namespace __gnu_debug
{
  template<typename _Iterator, typename _Sequence, typename _Category>
    class _Safe_iterator;
}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__))
   
    inline _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }


  template<typename _Iterator>
    [[__nodiscard__]] __attribute__((__always_inline__))
   
    inline _Iterator
    __niter_base(_Iterator __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
# 3027 "/usr/include/c++/15/bits/stl_iterator.h" 3
  template<typename _Ite, typename _Seq>
   
    decltype(std::__niter_base(std::declval<_Ite>()))
    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
   std::random_access_iterator_tag>&)
    noexcept(std::is_nothrow_copy_constructible<_Ite>::value);



  template<typename _Iterator>
   
    inline auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
   
    inline auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
   
    inline auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }

  template<typename _Iterator>
   
    inline auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }






  template<typename _From, typename _To>
    [[__nodiscard__]]
   
    inline _From
    __niter_wrap(_From __from, _To __res)
    { return __from + (std::__niter_base(__res) - std::__niter_base(__from)); }


  template<typename _Iterator>
    [[__nodiscard__]] __attribute__((__always_inline__))
   
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
    { return __res; }
# 3113 "/usr/include/c++/15/bits/stl_iterator.h" 3

}
# 51 "/usr/include/c++/15/string" 2 3

# 1 "/usr/include/c++/15/ext/numeric_traits.h" 1 3
# 39 "/usr/include/c++/15/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/15/ext/numeric_traits.h" 3
  template<typename _Tp>
    struct __is_integer_nonstrict
    : public std::__is_integer<_Tp>
    {
      using std::__is_integer<_Tp>::__value;


      enum { __width = __value ? sizeof(_Tp) * 8 : 0 };
    };

  template<typename _Value>
    struct __numeric_traits_integer
    {

      static_assert(__is_integer_nonstrict<_Value>::__value,
      "invalid specialization");




      static const bool __is_signed = (_Value)(-1) < 0;
      static const int __digits
 = __is_integer_nonstrict<_Value>::__width - __is_signed;


      static const _Value __max = __is_signed
 ? (((((_Value)1 << (__digits - 1)) - 1) << 1) + 1)
 : ~(_Value)0;
      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 132 "/usr/include/c++/15/ext/numeric_traits.h" 3
  __extension__ template<> struct __is_integer_nonstrict<__int128> { enum { __value = 1 }; typedef std::__true_type __type; enum { __width = 128 }; }; __extension__ template<> struct __is_integer_nonstrict<unsigned __int128> { enum { __value = 1 }; typedef std::__true_type __type; enum { __width = 128 }; };






  template<typename _Tp>
    using __int_traits = __numeric_traits_integer<_Tp>;
# 159 "/usr/include/c++/15/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;






  template<typename _Value>
    struct __numeric_traits
    : public __numeric_traits_integer<_Value>
    { };

  template<>
    struct __numeric_traits<float>
    : public __numeric_traits_floating<float>
    { };

  template<>
    struct __numeric_traits<double>
    : public __numeric_traits_floating<double>
    { };

  template<>
    struct __numeric_traits<long double>
    : public __numeric_traits_floating<long double>
    { };
# 240 "/usr/include/c++/15/ext/numeric_traits.h" 3

}
# 53 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/stl_algobase.h" 1 3
# 69 "/usr/include/c++/15/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/15/debug/debug.h" 1 3
# 48 "/usr/include/c++/15/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;

  template<typename _Ite, typename _Seq, typename _Cat>
    struct _Safe_iterator;
}
# 70 "/usr/include/c++/15/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/15/bits/predefined_ops.h" 1 3
# 35 "/usr/include/c++/15/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




   
    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

 
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

 
  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




   
    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
     
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

 
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

 
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

 
  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

 
  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

 
  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

     
      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>

 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

     
      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>

 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

     
      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
   
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

     
      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
   
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

     
      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
   
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

     
      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
   
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/15/bits/stl_algobase.h" 2 3




# 1 "/usr/include/c++/15/bit" 1 3
# 38 "/usr/include/c++/15/bit" 3
# 1 "/usr/include/c++/15/concepts" 1 3
# 38 "/usr/include/c++/15/concepts" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 39 "/usr/include/c++/15/concepts" 2 3
# 39 "/usr/include/c++/15/bit" 2 3
# 63 "/usr/include/c++/15/bit" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 64 "/usr/include/c++/15/bit" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 157 "/usr/include/c++/15/bit" 3
  template<typename _Tp>
    constexpr _Tp
    __rotl(_Tp __x, int __s) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      if ((_Nd & (_Nd - 1)) == 0)
 {


   constexpr unsigned __uNd = _Nd;
   const unsigned __r = __s;
   return (__x << (__r % __uNd)) | (__x >> ((-__r) % __uNd));
 }
      const int __r = __s % _Nd;
      if (__r == 0)
 return __x;
      else if (__r > 0)
 return (__x << __r) | (__x >> ((_Nd - __r) % _Nd));
      else
 return (__x >> -__r) | (__x << ((_Nd + __r) % _Nd));
    }

  template<typename _Tp>
    constexpr _Tp
    __rotr(_Tp __x, int __s) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      if ((_Nd & (_Nd - 1)) == 0)
 {


   constexpr unsigned __uNd = _Nd;
   const unsigned __r = __s;
   return (__x >> (__r % __uNd)) | (__x << ((-__r) % __uNd));
 }
      const int __r = __s % _Nd;
      if (__r == 0)
 return __x;
      else if (__r > 0)
 return (__x >> __r) | (__x << ((_Nd - __r) % _Nd));
      else
 return (__x << -__r) | (__x >> ((_Nd + __r) % _Nd));
    }

  template<typename _Tp>
    constexpr int
    __countl_zero(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;


      return __builtin_clzg(__x, _Nd);
# 249 "/usr/include/c++/15/bit" 3
    }

  template<typename _Tp>
    constexpr int
    __countl_one(_Tp __x) noexcept
    {
      return std::__countl_zero<_Tp>((_Tp)~__x);
    }

  template<typename _Tp>
    constexpr int
    __countr_zero(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;


      return __builtin_ctzg(__x, _Nd);
# 294 "/usr/include/c++/15/bit" 3
    }

  template<typename _Tp>
    constexpr int
    __countr_one(_Tp __x) noexcept
    {
      return std::__countr_zero((_Tp)~__x);
    }

  template<typename _Tp>
    constexpr int
    __popcount(_Tp __x) noexcept
    {

      return __builtin_popcountg(__x);
# 334 "/usr/include/c++/15/bit" 3
    }

  template<typename _Tp>
    constexpr bool
    __has_single_bit(_Tp __x) noexcept
    { return std::__popcount(__x) == 1; }

  template<typename _Tp>
    constexpr _Tp
    __bit_ceil(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
      if (__x == 0 || __x == 1)
        return 1;
      auto __shift_exponent = _Nd - std::__countl_zero((_Tp)(__x - 1u));




      if (!std::__is_constant_evaluated())
 {
   do { if (std::__is_constant_evaluated() && !bool(__shift_exponent != __int_traits<_Tp>::__digits)) std::__glibcxx_assert_fail(); } while (false);
 }

      using __promoted_type = decltype(__x << 1);
      if (!is_same<__promoted_type, _Tp>::value)
 {





   const int __extra_exp = sizeof(__promoted_type) / sizeof(_Tp) / 2;
   __shift_exponent |= (__shift_exponent & _Nd) << __extra_exp;
 }
      return (_Tp)1u << __shift_exponent;
    }

  template<typename _Tp>
    constexpr _Tp
    __bit_floor(_Tp __x) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      if (__x == 0)
        return 0;
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      return _Nd - std::__countl_zero(__x);
    }
# 496 "/usr/include/c++/15/bit" 3

}
# 77 "/usr/include/c++/15/bits/stl_algobase.h" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{






  template<typename _Tp, typename _Up>
    constexpr
    inline int
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
    {

      static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
# 109 "/usr/include/c++/15/bits/stl_algobase.h" 3
 return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
    }
# 153 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 186 "/usr/include/c++/15/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 202 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 231 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 255 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 279 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 301 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator;

  struct _Bit_iterator;






  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
    __copy_move_a2(
 istreambuf_iterator<_CharT, char_traits<_CharT> >,
 istreambuf_iterator<_CharT, char_traits<_CharT> >,
 std::_Deque_iterator<_CharT, _CharT&, _CharT*>);
# 395 "/usr/include/c++/15/bits/stl_algobase.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<bool _IsMove, typename _OutIter, typename _InIter>
    __attribute__((__always_inline__))
    inline void
    __assign_one(_OutIter& __out, _InIter& __in)
    {

      if constexpr (_IsMove)
 *__out = std::move(*__in);
      else

 *__out = *__in;
    }

  template<bool _IsMove, typename _InIter, typename _Sent, typename _OutIter>
   
    inline _OutIter
    __copy_move_a2(_InIter __first, _Sent __last, _OutIter __result)
    {
      typedef __decltype(*__first) _InRef;
      typedef __decltype(*__result) _OutRef;
      if constexpr (!__is_trivially_assignable(_OutRef, _InRef))
 { }
      else if (std::__is_constant_evaluated())
 { }
      else if constexpr (__memcpyable<_OutIter, _InIter>::__value)
 {
   ptrdiff_t __n = std::distance(__first, __last);
   if (__builtin_expect(__n > 1, true))
     {
       __builtin_memmove(__result,
    __first,
    __n * sizeof(*__first));
       __result += __n;
     }
   else if (__n == 1)
     {
       std::__assign_one<_IsMove>(__result, __first);
       ++__result;
     }
   return __result;
 }
# 461 "/usr/include/c++/15/bits/stl_algobase.h" 3
      for (; __first != __last; ++__result, (void)++__first)
 std::__assign_one<_IsMove>(__result, __first);
      return __result;
    }
#pragma GCC diagnostic pop

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II, _II, std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    __attribute__((__always_inline__))
   
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _OI>
    __attribute__((__always_inline__))
   
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
   
    _OI
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
   
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_a(_II, _II,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
   
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    _OutputIterator
    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,
        bool)
    {
      typedef __decltype(*__first) _InRef;
      typedef __decltype(*__result) _OutRef;
      if constexpr (!__is_trivially_assignable(_OutRef, _InRef))
 { }




      else if constexpr (__memcpyable<_OutputIterator,
            _InputIterator>::__value)
 {
   if (__builtin_expect(__n > 1, true))
     {
       __builtin_memmove(__result,
    __first,
    __n * sizeof(*__first));
       __result += __n;
     }
   else if (__n == 1)
     *__result++ = *__first;
   return __result;
 }
# 581 "/usr/include/c++/15/bits/stl_algobase.h" 3
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }
#pragma GCC diagnostic pop


  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value, _CharT*>::__type
    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,
        _Size, _CharT*, bool);

  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,
        std::_Deque_iterator<_CharT, _CharT&, _CharT*>,
        bool);
# 630 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 663 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<true>(std::__miter_base(__first),
          std::__miter_base(__last), __result);
    }






#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef __decltype(*__first) _InRef;
      typedef __decltype(*__result) _OutRef;
      if constexpr (!__is_trivially_assignable(_OutRef, _InRef))
       { }




      else if constexpr (__memcpyable<_BI2, _BI1>::__value)
 {
   ptrdiff_t __n = std::distance(__first, __last);
   std::advance(__result, -__n);
   if (__builtin_expect(__n > 1, true))
     {
       __builtin_memmove(__result,
    __first,
    __n * sizeof(*__first));
     }
   else if (__n == 1)
     std::__assign_one<_IsMove>(__result, __first);
   return __result;
 }
# 735 "/usr/include/c++/15/bits/stl_algobase.h" 3
      while (__first != __last)
 {
   --__last;
   --__result;
   std::__assign_one<_IsMove>(__result, __last);
 }
      return __result;
    }
#pragma GCC diagnostic pop




  template<bool _IsMove, typename _BI1, typename _BI2>
    __attribute__((__always_inline__))
   
    inline _BI2
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II, _II,
       std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    __attribute__((__always_inline__))
   
    inline _OI
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_backward_a1<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
   
    _OI
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
   
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_backward_a(_II, _II,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
   
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 833 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    __attribute__((__always_inline__))
   
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     

      ;

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 869 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    __attribute__((__always_inline__))
   
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     

      ;

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
            std::__miter_base(__last),
            __result);
    }






#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"




      const bool __load_outside_loop =


     __is_trivially_constructible(_Tp, const _Tp&)
     && __is_trivially_assignable(__decltype(*__first), const _Tp&)




     && sizeof(_Tp) <= sizeof(long long);
#pragma GCC diagnostic pop



      typedef typename __gnu_cxx::__conditional_type<__load_outside_loop,
           const _Tp,
           const _Tp&>::__type _Up;
      _Up __val(__value);
      for (; __first != __last; ++__first)
 *__first = __val;
    }
#pragma GCC diagnostic pop


  template<typename _Up, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Up>::__value
        && (__are_same<_Up, _Tp>::__value
       || __memcpyable_integer<_Tp>::__width),
      void>::__type
    __fill_a1(_Up* __first, _Up* __last, const _Tp& __x)
    {


      const _Up __val = __x;
# 950 "/usr/include/c++/15/bits/stl_algobase.h" 3
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__val), __len);
    }

  template<typename _Ite, typename _Cont, typename _Tp>
    __attribute__((__always_inline__))
   
    inline void
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
       ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
       const _Tp& __value)
    { std::__fill_a1(__first.base(), __last.base(), __value); }

  template<typename _Tp, typename _VTp>
    void
    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const _VTp&);

 
  void
  __fill_a1(std::_Bit_iterator, std::_Bit_iterator,
     const bool&);

  template<typename _FIte, typename _Tp>
    __attribute__((__always_inline__))
   
    inline void
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    { std::__fill_a1(__first, __last, __value); }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
   
    void
    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const _Tp&);
# 1000 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    __attribute__((__always_inline__))
   
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(__first, __last, __value);
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"

  inline constexpr int
  __size_to_integer(int __n) { return __n; }
  inline constexpr unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline constexpr long
  __size_to_integer(long __n) { return __n; }
  inline constexpr unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long long __n) { return __n; }
  inline constexpr unsigned long long
  __size_to_integer(unsigned long long __n) { return __n; }
# 1055 "/usr/include/c++/15/bits/stl_algobase.h" 3
  inline constexpr long long
  __size_to_integer(float __n) { return (long long)__n; }
  inline constexpr long long
  __size_to_integer(double __n) { return (long long)__n; }
  inline constexpr long long
  __size_to_integer(long double __n) { return (long long)__n; }




#pragma GCC diagnostic pop

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
#pragma GCC diagnostic ignored "-Wlong-long"
  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {

      const bool __load_outside_loop =


     __is_trivially_constructible(_Tp, const _Tp&)
     && __is_trivially_assignable(__decltype(*__first), const _Tp&)




     && sizeof(_Tp) <= sizeof(long long);



      typedef typename __gnu_cxx::__conditional_type<__load_outside_loop,
           const _Tp,
           const _Tp&>::__type _Up;
      _Up __val(__value);
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __val;
      return __first;
    }
#pragma GCC diagnostic pop

  template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
    typename _Tp>
   
    ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
        _Size __n, const _Tp& __value,
        std::input_iterator_tag);

  template<typename _OutputIterator, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::output_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::input_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::random_access_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      if (__n <= 0)
 return __first;

      ;

      std::__fill_a(__first, __first + __n, __value);
      return __first + __n;
    }
# 1169 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
          std::__iterator_category(__first));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>

 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>

 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !std::__memcmp(__first1, __first2, __len);
   return true;
 }
    };

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   _II);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(_II, _II,
  std::_Deque_iterator<_Tp, _Ref, _Ptr>);

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      const bool __simple = ((__is_integer<_ValueType1>::__value

    || __is_pointer(_ValueType1)





        ) && __memcmpable<_II1, _II2>::__value);
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename _II1, typename _II2>
    __attribute__((__always_inline__))
   
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      return std::__equal_aux1(std::__niter_base(__first1),
          std::__niter_base(__last1),
          std::__niter_base(__first2));
    }

  template<typename _II1, typename _Seq1, typename _Cat1, typename _II2>
   
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  _II2);

  template<typename _II1, typename _II2, typename _Seq2, typename _Cat2>
   
    bool
    __equal_aux(_II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename _II1, typename _Seq1, typename _Cat1,
    typename _II2, typename _Seq2, typename _Cat2>
   
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>

 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>

 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>

 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
   
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>

 static bool
 __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   using __gnu_cxx::__ops::__iter_less_iter;
   return std::__lexicographical_compare_impl(__first1, __last1,
           __first2, __last2,
           __iter_less_iter());
 }

      template<typename _II1, typename _II2>

 static int
 __3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   while (__first1 != __last1)
     {
       if (__first2 == __last2)
  return +1;
       if (*__first1 < *__first2)
  return -1;
       if (*__first2 < *__first1)
  return +1;
       ++__first1;
       ++__first2;
     }
   return int(__first2 == __last2) - 1;
 }
    };

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>

 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 { return __3way(__first1, __last1, __first2, __last2) < 0; }

      template<typename _Tp, typename _Up>

 static ptrdiff_t
 __3way(const _Tp* __first1, const _Tp* __last1,
        const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = std::__memcmp(__first1, __first2, __len))
       return __result;
   return ptrdiff_t(__len1 - __len2);
 }
    };

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux1(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;

      const bool __simple =
 (__is_memcmp_ordered_with<_ValueType1, _ValueType2>::__value
  && __is_pointer(_II1) && __is_pointer(_II2)







  );




      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2>
    bool
    __lexicographical_compare_aux1(
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 _Tp2*, _Tp2*);

  template<typename _Tp1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __lexicographical_compare_aux1(_Tp1*, _Tp1*,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __lexicographical_compare_aux1(
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      return std::__lexicographical_compare_aux1(std::__niter_base(__first1),
       std::__niter_base(__last1),
       std::__niter_base(__first2),
       std::__niter_base(__last2));
    }

  template<typename _Iter1, typename _Seq1, typename _Cat1,
    typename _II2>
   
    bool
    __lexicographical_compare_aux(
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  _II2, _II2);

  template<typename _II1,
    typename _Iter2, typename _Seq2, typename _Cat2>
   
    bool
    __lexicographical_compare_aux(
  _II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&);

  template<typename _Iter1, typename _Seq1, typename _Cat1,
    typename _Iter2, typename _Seq2, typename _Cat2>
   
    bool
    __lexicographical_compare_aux(
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&);

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 1532 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  template<typename _Tp>
    inline constexpr _Tp
    __lg(_Tp __n)
    {

      return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
# 1568 "/usr/include/c++/15/bits/stl_algobase.h" 3
    }


# 1584 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    [[__nodiscard__]]
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(__first1, __last1, __first2);
    }
# 1615 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"


  template<typename _II1, typename _II2>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if constexpr (_RAIters::value)
 {
   if ((__last1 - __first1) != (__last2 - __first2))
     return false;
   return std::equal(__first1, __last1, __first2);
 }
      else
 {
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, (void)++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return __first1 == __last1 && __first2 == __last2;
 }
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if constexpr (_RAIters::value)
 {
   if ((__last1 - __first1) != (__last2 - __first2))
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }
      else
 {
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, (void)++__first2)
     if (!bool(__binary_pred(*__first1, *__first2)))
       return false;
   return __first1 == __last1 && __first2 == __last2;
 }
    }
#pragma GCC diagnostic pop
# 1706 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    [[__nodiscard__]]
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1739 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1771 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    [[__nodiscard__]]
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(__first1, __last1,
      __first2, __last2);
    }
# 1806 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    [[__nodiscard__]]
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 1921 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1949 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1983 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 2031 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 2067 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }





  template<typename _Iterator, typename _Predicate>
   
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
#pragma GCC unroll 4
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }

  template<typename _InputIterator, typename _Predicate>
   
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }

  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = std::move(*__first);
     ++__result;
   }
      return __result;
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   _ForwardIterator2 __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 2230 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }



# 2272 "/usr/include/c++/15/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }



}
# 54 "/usr/include/c++/15/string" 2 3

# 1 "/usr/include/c++/15/bits/range_access.h" 1 3
# 38 "/usr/include/c++/15/bits/range_access.h" 3
# 1 "/usr/include/c++/15/initializer_list" 1 3
# 43 "/usr/include/c++/15/initializer_list" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}
# 39 "/usr/include/c++/15/bits/range_access.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    begin(_Container& __cont) noexcept(noexcept(__cont.begin()))
    -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    begin(const _Container& __cont) noexcept(noexcept(__cont.begin()))
    -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    end(_Container& __cont) noexcept(noexcept(__cont.end()))
    -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    end(const _Container& __cont) noexcept(noexcept(__cont.end()))
    -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&) noexcept;
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&) noexcept;
  template<typename _Tp> _Tp* end(valarray<_Tp>&) noexcept;
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&) noexcept;






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    rbegin(_Container& __cont) noexcept(noexcept(__cont.rbegin()))
      -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    rbegin(const _Container& __cont) noexcept(noexcept(__cont.rbegin()))
      -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    rend(_Container& __cont) noexcept(noexcept(__cont.rend()))
      -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    rend(const _Container& __cont) noexcept(noexcept(__cont.rend()))
      -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm]) noexcept
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm]) noexcept
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    [[__nodiscard__]]
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il) noexcept
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    [[__nodiscard__]]
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il) noexcept
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    crbegin(const _Container& __cont) noexcept(noexcept(std::rbegin(__cont)))
      -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline auto
    crend(const _Container& __cont) noexcept(noexcept(std::rend(__cont)))
      -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 377 "/usr/include/c++/15/bits/range_access.h" 3

}
# 56 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/basic_string.h" 1 3
# 41 "/usr/include/c++/15/bits/basic_string.h" 3
# 1 "/usr/include/c++/15/ext/alloc_traits.h" 1 3
# 36 "/usr/include/c++/15/ext/alloc_traits.h" 3
# 1 "/usr/include/c++/15/bits/alloc_traits.h" 1 3
# 33 "/usr/include/c++/15/bits/alloc_traits.h" 3
# 1 "/usr/include/c++/15/bits/stl_construct.h" 1 3
# 73 "/usr/include/c++/15/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 120 "/usr/include/c++/15/bits/stl_construct.h" 3
  template<typename _Tp, typename... _Args>
   
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    {
# 133 "/usr/include/c++/15/bits/stl_construct.h" 3
      ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);
    }
# 146 "/usr/include/c++/15/bits/stl_construct.h" 3
  template<typename _T1>
   
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }

  template<typename _ForwardIterator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last);




  template<typename _Tp>
    constexpr inline void
    _Destroy(_Tp* __pointer)
    {



      __pointer->~_Tp();

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
# 217 "/usr/include/c++/15/bits/stl_construct.h" 3
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;

      if constexpr (!is_trivially_destructible<_Value_type>::value)
 for (; __first != __last; ++__first)
   std::_Destroy(std::__addressof(*__first));
# 236 "/usr/include/c++/15/bits/stl_construct.h" 3
    }






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;

      if constexpr (!is_trivially_destructible<_Value_type>::value)
 for (; __count > 0; (void)++__first, --__count)
   std::_Destroy(std::__addressof(*__first));





      else
 std::advance(__first, __count);
      return __first;




    }
#pragma GCC diagnostic pop
# 284 "/usr/include/c++/15/bits/stl_construct.h" 3

}
# 34 "/usr/include/c++/15/bits/alloc_traits.h" 2 3
# 46 "/usr/include/c++/15/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




 
# 52 "/usr/include/c++/15/bits/alloc_traits.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
#pragma GCC diagnostic ignored "-Wc++17-extensions"


  struct __allocator_traits_base
  {



    template<typename _Tp, typename _Up, typename = void>

      struct __rebind : __replace_first_arg<_Tp, _Up>
      {
 static_assert(is_same<
   typename __replace_first_arg<_Tp, typename _Tp::value_type>::type,
   _Tp>::value,
   "allocator_traits<A>::rebind_alloc<A::value_type> must be A");
      };

    template<typename _Tp, typename _Up>




      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>

      {
 using type = typename _Tp::template rebind<_Up>::other;

 static_assert(is_same<
   typename _Tp::template rebind<typename _Tp::value_type>::other,
   _Tp>::value,
   "allocator_traits<A>::rebind_alloc<A::value_type> must be A");
      };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = __type_identity<typename _Tp::is_always_equal>;
# 115 "/usr/include/c++/15/bits/alloc_traits.h" 3
    template<typename _Alloc, typename _Sz, typename _Vp>
      using __allocate_hint_t
 = decltype(std::declval<_Alloc&>()
       .allocate(std::declval<_Sz>(), std::declval<_Vp>()));
    template<typename _Alloc, typename _Sz, typename _Vp, typename = void>
      static constexpr bool __has_allocate_hint = false;
    template<typename _Alloc, typename _Sz, typename _Vp>
      static constexpr bool
      __has_allocate_hint<_Alloc, _Sz, _Vp,
     __void_t<__allocate_hint_t<_Alloc, _Sz, _Vp>>>
 = true;
# 152 "/usr/include/c++/15/bits/alloc_traits.h" 3
    template<typename _Alloc, typename _Tp, typename... _Args>
      using __construct_t
 = decltype(std::declval<_Alloc&>().construct(std::declval<_Tp*>(),
           std::declval<_Args>()...));
    template<typename _Alloc, typename _Tp, typename, typename... _Args>
      static constexpr bool __has_construct_impl = false;
    template<typename _Alloc, typename _Tp, typename... _Args>
      static constexpr bool
      __has_construct_impl<_Alloc, _Tp,
      __void_t<__construct_t<_Alloc, _Tp, _Args...>>,
      _Args...>
 = true;
    template<typename _Alloc, typename _Tp, typename... _Args>
      static constexpr bool __has_construct
 = __has_construct_impl<_Alloc, _Tp, void, _Args...>;
    template<typename _Tp, typename... _Args>
      using __new_expr_t
 = decltype(::new((void*)0) _Tp(std::declval<_Args>()...));
    template<typename _Tp, typename, typename... _Args>
      static constexpr bool __has_new_expr = false;
    template<typename _Tp, typename... _Args>
      static constexpr bool
      __has_new_expr<_Tp, __void_t<__new_expr_t<_Tp, _Args...>>, _Args...>
 = true;
    template<typename _Alloc, typename _Tp, typename... _Args>
      static constexpr bool __can_construct
 = __has_construct<_Alloc, _Tp, _Args...>
     || __has_new_expr<_Tp, void, _Args...>;
# 189 "/usr/include/c++/15/bits/alloc_traits.h" 3
    template<typename _Alloc, typename _Tp>
      using __destroy_t
 = decltype(std::declval<_Alloc&>().destroy(std::declval<_Tp*>()));
    template<typename _Alloc, typename _Tp, typename = void>
      static constexpr bool __has_destroy = false;
    template<typename _Alloc, typename _Tp>
      static constexpr bool __has_destroy<_Alloc, _Tp,
       __void_t<__destroy_t<_Alloc, _Tp>>>
 = true;
# 207 "/usr/include/c++/15/bits/alloc_traits.h" 3
    template<typename _Alloc>
      using __max_size_t = decltype(std::declval<const _Alloc&>().max_size());
    template<typename _Alloc, typename = void>
      static constexpr bool __has_max_size = false;
    template<typename _Alloc>
      static constexpr bool __has_max_size<_Alloc,
        __void_t<__max_size_t<_Alloc>>>
 = true;
# 225 "/usr/include/c++/15/bits/alloc_traits.h" 3
    template<typename _Alloc>
      using __soccc_t
 = decltype(std::declval<const _Alloc&>()
       .select_on_container_copy_construction());
    template<typename _Alloc, typename = void>
      static constexpr bool __has_soccc = false;
    template<typename _Alloc>
      static constexpr bool __has_soccc<_Alloc, __void_t<__soccc_t<_Alloc>>>
 = true;

  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
# 248 "/usr/include/c++/15/bits/alloc_traits.h" 3
  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = typename __detected_or_t<is_empty<_Alloc>, __equal, _Alloc>::type;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
# 383 "/usr/include/c++/15/bits/alloc_traits.h" 3
      [[__nodiscard__]] static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 398 "/usr/include/c++/15/bits/alloc_traits.h" 3
      [[__nodiscard__]] static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      {
 if constexpr (__has_allocate_hint<_Alloc, size_type, const_void_pointer>)
   return __a.allocate(__n, __hint);
 else
   return __a.allocate(__n);
      }
# 415 "/usr/include/c++/15/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 430 "/usr/include/c++/15/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>




 static __enable_if_t<__can_construct<_Alloc, _Tp, _Args...>>

 construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(_S_nothrow_construct<_Tp, _Args...>())
 {
   if constexpr (__has_construct<_Alloc, _Tp, _Args...>)
     __a.construct(__p, std::forward<_Args>(__args)...);
   else
     std::_Construct(__p, std::forward<_Args>(__args)...);
 }
# 454 "/usr/include/c++/15/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void
 destroy(_Alloc& __a, _Tp* __p)
 noexcept(_S_nothrow_destroy<_Tp>())
 {
   if constexpr (__has_destroy<_Alloc, _Tp>)
     __a.destroy(__p);
   else
     std::_Destroy(__p);
 }
# 473 "/usr/include/c++/15/bits/alloc_traits.h" 3
      static size_type
      max_size(const _Alloc& __a) noexcept
      {
 if constexpr (__has_max_size<_Alloc>)
   return __a.max_size();
 else


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
      }
# 493 "/usr/include/c++/15/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      {
 if constexpr (__has_soccc<_Alloc>)
   return __rhs.select_on_container_copy_construction();
 else
   return __rhs;
      }

    private:

      template<typename _Tp, typename... _Args>
 static constexpr bool
 _S_nothrow_construct(_Alloc* __a = nullptr, _Tp* __p = nullptr)
 {
   if constexpr (__has_construct<_Alloc, _Tp, _Args...>)
     return noexcept(__a->construct(__p, std::declval<_Args>()...));
   else
     return __is_nothrow_new_constructible<_Tp, _Args...>;
 }

      template<typename _Tp>
 static constexpr bool
 _S_nothrow_destroy(_Alloc* __a = nullptr, _Tp* __p = nullptr)
 {
   if constexpr (__has_destroy<_Alloc, _Tp>)
     return noexcept(__a->destroy(__p));
   else
     return is_nothrow_destructible<_Tp>::value;
 }
# 548 "/usr/include/c++/15/bits/alloc_traits.h" 3
    };
#pragma GCC diagnostic pop
# 559 "/usr/include/c++/15/bits/alloc_traits.h" 3
  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;


      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 611 "/usr/include/c++/15/bits/alloc_traits.h" 3
      [[__nodiscard__,__gnu__::__always_inline__]]
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 626 "/usr/include/c++/15/bits/alloc_traits.h" 3
      [[__nodiscard__,__gnu__::__always_inline__]]
      static pointer
      allocate(allocator_type& __a, size_type __n,
        [[maybe_unused]] const_void_pointer __hint)
      {

 return __a.allocate(__n, __hint);



      }
# 646 "/usr/include/c++/15/bits/alloc_traits.h" 3
      [[__gnu__::__always_inline__]]
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 662 "/usr/include/c++/15/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 [[__gnu__::__always_inline__]]
 static void
 construct(allocator_type& __a __attribute__((__unused__)),
    _Up* __p, _Args&&... __args)

 noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))



 {

   __a.construct(__p, std::forward<_Args>(__args)...);





 }
# 689 "/usr/include/c++/15/bits/alloc_traits.h" 3
      template<typename _Up>
 [[__gnu__::__always_inline__]]
 static void
 destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 {

   __a.destroy(__p);



 }






      [[__gnu__::__always_inline__]]
      static size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {

 return __a.max_size();



      }






      [[__gnu__::__always_inline__]]
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };
# 736 "/usr/include/c++/15/bits/alloc_traits.h" 3
  template<>
    struct allocator_traits<allocator<void>>
    {

      using allocator_type = allocator<void>;


      using value_type = void;


      using pointer = void*;


      using const_pointer = const void*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;


      static void*
      allocate(allocator_type&, size_type, const void* = nullptr) = delete;


      static void
      deallocate(allocator_type&, void*, size_type) = delete;
# 800 "/usr/include/c++/15/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 [[__gnu__::__always_inline__]]
 static void
 construct(allocator_type&, _Up* __p, _Args&&... __args)
 noexcept(__is_nothrow_new_constructible<_Up, _Args...>)
 { std::_Construct(__p, std::forward<_Args>(__args)...); }
# 814 "/usr/include/c++/15/bits/alloc_traits.h" 3
      template<typename _Up>
 [[__gnu__::__always_inline__]]
 static void
 destroy(allocator_type&, _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 { std::_Destroy(__p); }


      static size_type
      max_size(const allocator_type&) = delete;






      [[__gnu__::__always_inline__]]
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr inline void
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      using __traits = allocator_traits<_Alloc>;
      using __pocca =
 typename __traits::propagate_on_container_copy_assignment::type;
      if constexpr (__pocca::value)
 __one = __two;
    }

  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr _Alloc
    __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      using __traits = allocator_traits<_Alloc>;
      using __pocma
 = typename __traits::propagate_on_container_move_assignment::type;
      if constexpr (__pocma::value)
 __one = std::move(__two);
    }

  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr inline void
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      using __traits = allocator_traits<_Alloc>;
      using __pocs = typename __traits::propagate_on_container_swap::type;
      if constexpr (__pocs::value)
 {
   using std::swap;
   swap(__one, __two);
 }
    }
#pragma GCC diagnostic pop

  template<typename _Alloc, typename _Tp,
    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
    typename = void>
    struct __is_alloc_insertable_impl
    : false_type
    { };

  template<typename _Alloc, typename _Tp, typename _ValueT>
    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
      __void_t<decltype(allocator_traits<_Alloc>::construct(
     std::declval<_Alloc&>(), std::declval<_ValueT*>(),
     std::declval<_Tp>()))>>
    : true_type
    { };




  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_alloc_insertable_impl<_Alloc,
     typename _Alloc::value_type const&>::type
    { };



  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };





  template<typename _Alloc>
    struct __is_move_insertable
    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
    { };



  template<typename _Tp>
    struct __is_move_insertable<allocator<_Tp>>
    : is_move_constructible<_Tp>
    { };



  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;

  template<typename _Alloc>
    using _RequireNotAllocator
      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
# 970 "/usr/include/c++/15/bits/alloc_traits.h" 3
  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
     
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };
# 1023 "/usr/include/c++/15/bits/alloc_traits.h" 3
  template<typename _ForwardIterator, typename _Allocator>
   
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)



 allocator_traits<_Allocator>::destroy(__alloc,
           std::__addressof(*__first));

    }


  template<typename _ForwardIterator, typename _Tp>
    __attribute__((__always_inline__))
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      std::_Destroy(__first, __last);
    }





}
# 37 "/usr/include/c++/15/ext/alloc_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      [[__gnu__::__always_inline__]]
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
           std::forward<_Args>(__args)...)))
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      [[__gnu__::__always_inline__]]
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    [[__gnu__::__always_inline__]]
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    [[__gnu__::__always_inline__]]
    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    __attribute__((__always_inline__))
    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 182 "/usr/include/c++/15/ext/alloc_traits.h" 3
  };


}
# 42 "/usr/include/c++/15/bits/basic_string.h" 2 3






# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 49 "/usr/include/c++/15/bits/basic_string.h" 2 3
# 68 "/usr/include/c++/15/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {
# 93 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
# 104 "/usr/include/c++/15/bits/basic_string.h" 3
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;


      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    protected:




      typedef const_iterator __const_iterator;


    private:
      static pointer
      _S_allocate(_Char_alloc_type& __a, size_type __n)
      {
 pointer __p = _Alloc_traits::allocate(__a, __n);
# 152 "/usr/include/c++/15/bits/basic_string.h" 3
 return __p;
      }
# 197 "/usr/include/c++/15/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {





 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }


 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

     
      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

     
      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

     
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

     
      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

     
      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

     
      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

     
      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

     
      bool
      _M_is_local() const
      {
 if (_M_data() == _M_local_data())
   {
     if (_M_string_length > _S_local_capacity)
       __builtin_unreachable();
     return true;
   }
 return false;
      }


     
      pointer
      _M_create(size_type&, size_type);

     
      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

     
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
# 332 "/usr/include/c++/15/bits/basic_string.h" 3
      template<typename _InIterator>

        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>

        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

     
      void
      _M_construct(size_type __req, _CharT __c);



      template<bool _Terminated>

 void
 _M_construct(const _CharT *__c, size_type __n);

     
      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

     
      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }


      __attribute__((__always_inline__))
      constexpr
      void
      _M_init_local_buf() noexcept
      {





      }

      __attribute__((__always_inline__))
      constexpr
      pointer
      _M_use_local_data() noexcept
      {



 return _M_local_data();
      }

    private:
# 407 "/usr/include/c++/15/bits/basic_string.h" 3
     
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

     
      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



     
      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



     
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

     
      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

     
      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"


      template<class _Iterator>

        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {

   using _IterBase = decltype(std::__niter_base(__k1));
   if constexpr (__or_<is_same<_IterBase, _CharT*>,
         is_same<_IterBase, const _CharT*>>::value)
     _S_copy(__p, std::__niter_base(__k1), __k2 - __k1);
# 502 "/usr/include/c++/15/bits/basic_string.h" 3
   else

   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, static_cast<_CharT>(*__k1));
 }
#pragma GCC diagnostic pop
# 549 "/usr/include/c++/15/bits/basic_string.h" 3
     
      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

     
      void
      _M_assign(const basic_string&);

     
      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

     
      void
      _M_erase(size_type __pos, size_type __n);

    public:







     
      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)



      : _M_dataplus(_M_local_data())
      {
 _M_init_local_buf();
 _M_set_length(0);
      }




     
      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      {
 _M_init_local_buf();
 _M_set_length(0);
      }





     
      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      {
 _M_construct<true>(__str._M_data(), __str.length());
      }
# 628 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos),
       std::forward_iterator_tag());
      }







     
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n),
       std::forward_iterator_tag());
      }
# 663 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n),
       std::forward_iterator_tag());
      }
# 683 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {

 if (__s == 0 && __n > 0)
   std::__throw_logic_error(("basic_string: " "construction from null is not valid")
                                                 );
 _M_construct(__s, __s + __n, std::forward_iterator_tag());
      }
# 705 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {

 if (__s == 0)
   std::__throw_logic_error(("basic_string: " "construction from null is not valid")
                                                 );
 const _CharT* __end = __s + traits_type::length(__s);
 _M_construct(__s, __end, forward_iterator_tag());
      }
# 728 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 741 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     _M_init_local_buf();
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         __str.length() + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_use_local_data());
 __str._M_set_length(0);
      }
# 797 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end(), std::forward_iterator_tag()); }

     
      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag()); }

     
      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     _M_init_local_buf();
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         __str.length() + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_use_local_data());
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag());
      }
# 846 "/usr/include/c++/15/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>




        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 {

   _M_construct(__beg, __end, std::__iterator_category(__beg));




 }
# 894 "/usr/include/c++/15/bits/basic_string.h" 3
     
      ~basic_string()
      { _M_dispose(); }





     
      basic_string&
      operator=(const basic_string& __str)
      {
 return this->assign(__str);
      }





     
      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 925 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 943 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 const bool __equal_allocs = _Alloc_traits::_S_always_equal()
   || _M_get_allocator() == __str._M_get_allocator();
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !__equal_allocs)
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {



     if (__builtin_expect(std::__addressof(__str) != this, true))
       {
  if (__str.size())
    this->_S_copy(_M_data(), __str._M_data(), __str.size());
  _M_set_length(__str.size());
       }
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign() || __equal_allocs)
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (__equal_allocs)
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_use_local_data());
   }
 else
   _M_assign(__str);
 __str.clear();
 return *this;
      }





     
      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 1045 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      [[__nodiscard__]]
      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      [[__nodiscard__]]
      size_type
      size() const noexcept
      {
 size_type __sz = _M_string_length;
 if (__sz > max_size ())
   __builtin_unreachable ();
 return __sz;
      }



      [[__nodiscard__]]
      size_type
      length() const noexcept
      { return size(); }


      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      {
 const size_t __diffmax
   = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_CharT);
 const size_t __allocmax = _Alloc_traits::max_size(_M_get_allocator());
 return (std::min)(__diffmax, __allocmax) - 1;
      }
# 1199 "/usr/include/c++/15/bits/basic_string.h" 3
     
      void
      resize(size_type __n, _CharT __c);
# 1213 "/usr/include/c++/15/bits/basic_string.h" 3
     
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

     
      void
      shrink_to_fit() noexcept
      { reserve(); }
#pragma GCC diagnostic pop
# 1266 "/usr/include/c++/15/bits/basic_string.h" 3
      template<typename _Operation>
 void
 __resize_and_overwrite(size_type __n, _Operation __op);






      [[__nodiscard__]]
      size_type
      capacity() const noexcept
      {
 size_t __sz = _M_is_local() ? size_type(_S_local_capacity)
         : _M_allocated_capacity;
 if (__sz < _S_local_capacity || __sz > max_size ())
   __builtin_unreachable ();
 return __sz;
      }
# 1303 "/usr/include/c++/15/bits/basic_string.h" 3
     
      void
      reserve(size_type __res_arg);







     
      void
      reserve();




     
      void
      clear() noexcept
      { _M_set_length(0); }





      [[__nodiscard__]]
      bool
      empty() const noexcept
      { return _M_string_length == 0; }
# 1345 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos <= size())) std::__glibcxx_assert_fail(); } while (false);
 return _M_data()[__pos];
      }
# 1363 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      reference
      operator[](size_type __pos)
      {


 do { if (std::__is_constant_evaluated() && !bool(__pos <= size())) std::__glibcxx_assert_fail(); } while (false);

 ;
 return _M_data()[__pos];
      }
# 1385 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1407 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      [[__nodiscard__]]
      reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](0);
      }





      [[__nodiscard__]]
      const_reference
      front() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](0);
      }





      [[__nodiscard__]]
      reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](this->size() - 1);
      }





      [[__nodiscard__]]
      const_reference
      back() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](this->size() - 1);
      }
# 1475 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






     
      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






     
      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







     
      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1533 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      append(const basic_string& __str)
      { return this->append(__str._M_data(), __str.size()); }
# 1551 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return this->append(__str._M_data()
       + __str._M_check(__pos, "basic_string::append"),
       __str._M_limit(__pos, __n)); }







     
      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






     
      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1596 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
# 1659 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1674 "/usr/include/c++/15/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>




        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1722 "/usr/include/c++/15/bits/basic_string.h" 3
     
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






     
      basic_string&
      assign(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_use_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _S_allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 this->_M_assign(__str);
 return *this;
      }
# 1784 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1808 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1825 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1842 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1860 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1874 "/usr/include/c++/15/bits/basic_string.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 basic_string&
 assign(_InputIterator __first, _InputIterator __last)
 {
   using _IterTraits = iterator_traits<_InputIterator>;
   if constexpr (is_pointer<decltype(std::__niter_base(__first))>::value
     && is_same<typename _IterTraits::value_type,
         _CharT>::value)
     {
       ;
       return _M_replace(size_type(0), size(),
    std::__niter_base(__first), __last - __first);
     }
# 1901 "/usr/include/c++/15/bits/basic_string.h" 3
   else
     return *this = basic_string(__first, __last, get_allocator());
 }
#pragma GCC diagnostic pop
# 1937 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      assign(initializer_list<_CharT> __l)
      {


 const size_type __n = __l.size();
 if (__n > capacity())
   *this = basic_string(__l.begin(), __l.end(), get_allocator());
 else
   {
     if (__n)
       _S_copy(_M_data(), __l.begin(), __n);
     _M_set_length(__n);
   }
 return *this;
      }
# 2007 "/usr/include/c++/15/bits/basic_string.h" 3
     
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 2050 "/usr/include/c++/15/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 2118 "/usr/include/c++/15/bits/basic_string.h" 3
     
      iterator
      insert(const_iterator __p, initializer_list<_CharT> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 2146 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 2170 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 2194 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 2214 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 2239 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 2258 "/usr/include/c++/15/bits/basic_string.h" 3
     
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 2321 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 2341 "/usr/include/c++/15/bits/basic_string.h" 3
     
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 2361 "/usr/include/c++/15/bits/basic_string.h" 3
     
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







     
      void
      pop_back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 _M_erase(size() - 1, 1);
      }
# 2407 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 2430 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 2456 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 2482 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 2507 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 2526 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2547 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2570 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2592 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2618 "/usr/include/c++/15/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2651 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2738 "/usr/include/c++/15/bits/basic_string.h" 3
     
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2802 "/usr/include/c++/15/bits/basic_string.h" 3
    private:
      template<class _Integer>

 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>

 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

     
      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      __attribute__((__noinline__, __noclone__, __cold__)) void
      _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,
        const size_type __len2, const size_type __how_much);

     
      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

     
      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2849 "/usr/include/c++/15/bits/basic_string.h" 3
     
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2860 "/usr/include/c++/15/bits/basic_string.h" 3
     
      void
      swap(basic_string& __s) noexcept;
# 2871 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2884 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2905 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2922 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2937 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2971 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2989 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 3003 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 3039 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 3054 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 3072 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 3087 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 3124 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 3139 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 3160 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 3176 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 3213 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 3228 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 3249 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 3264 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 3301 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 3316 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 3335 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 3351 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 3388 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 3403 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 3422 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 3439 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 3459 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 3556 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const
      {
 _M_check(__pos, "basic_string::compare");
 __n = _M_limit(__pos, __n);
 const size_type __osize = __str.size();
 const size_type __len = std::min(__n, __osize);
 int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
 if (!__r)
   __r = _S_compare(__n, __osize);
 return __r;
      }
# 3593 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const
      {
 _M_check(__pos1, "basic_string::compare");
 __str._M_check(__pos2, "basic_string::compare");
 __n1 = _M_limit(__pos1, __n1);
 __n2 = __str._M_limit(__pos2, __n2);
 const size_type __len = std::min(__n1, __n2);
 int __r = traits_type::compare(_M_data() + __pos1,
           __str.data() + __pos2, __len);
 if (!__r)
   __r = _S_compare(__n1, __n2);
 return __r;
      }
# 3624 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(const _CharT* __s) const noexcept
      {
 ;
 const size_type __size = this->size();
 const size_type __osize = traits_type::length(__s);
 const size_type __len = std::min(__size, __osize);
 int __r = traits_type::compare(_M_data(), __s, __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 3659 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const
      {
 ;
 _M_check(__pos, "basic_string::compare");
 __n1 = _M_limit(__pos, __n1);
 const size_type __osize = traits_type::length(__s);
 const size_type __len = std::min(__n1, __osize);
 int __r = traits_type::compare(_M_data() + __pos, __s, __len);
 if (!__r)
   __r = _S_compare(__n1, __osize);
 return __r;
      }
# 3698 "/usr/include/c++/15/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const
      {
 ;
 _M_check(__pos, "basic_string::compare");
 __n1 = _M_limit(__pos, __n1);
 const size_type __len = std::min(__n1, __n2);
 int __r = traits_type::compare(_M_data() + __pos, __s, __len);
 if (!__r)
   __r = _S_compare(__n1, __n2);
 return __r;
      }
# 3763 "/usr/include/c++/15/bits/basic_string.h" 3
      template<typename, typename, typename> friend class basic_stringbuf;
    };
}

}


namespace std __attribute__ ((__visibility__ ("default")))
{

# 3812 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _Str>
   
    inline _Str
    __str_concat(typename _Str::value_type const* __lhs,
   typename _Str::size_type __lhs_len,
   typename _Str::value_type const* __rhs,
   typename _Str::size_type __rhs_len,
   typename _Str::allocator_type const& __a)
    {
      typedef typename _Str::allocator_type allocator_type;
      typedef __gnu_cxx::__alloc_traits<allocator_type> _Alloc_traits;
      _Str __str(_Alloc_traits::_S_select_on_copy(__a));
      __str.reserve(__lhs_len + __rhs_len);
      __str.append(__lhs, __lhs_len);
      __str.append(__rhs, __rhs_len);
      return __str;
    }
# 3837 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),
         __rhs.c_str(), __rhs.size(),
         __lhs.get_allocator());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs, _Traits::length(__lhs),
         __rhs.c_str(), __rhs.size(),
         __rhs.get_allocator());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__builtin_addressof(__lhs), 1,
         __rhs.c_str(), __rhs.size(),
         __rhs.get_allocator());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),
         __rhs, _Traits::length(__rhs),
         __lhs.get_allocator());
    }






  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),
         __builtin_addressof(__rhs), 1,
         __lhs.get_allocator());
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {

      using _Alloc_traits = allocator_traits<_Alloc>;
      bool __use_rhs = false;
      if (typename _Alloc_traits::is_always_equal{})
 __use_rhs = true;
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 __use_rhs = true;
      if (__use_rhs)

 {
   const auto __size = __lhs.size() + __rhs.size();
   if (__size > __lhs.capacity() && __size <= __rhs.capacity())
     return std::move(__rhs.insert(0, __lhs));
 }
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]] [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 4042 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    {
      return __lhs.size() == __rhs.size()
        && !_Traits::compare(__lhs.data(), __rhs.data(), __lhs.size());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
        && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    }
# 4106 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs == __lhs; }
# 4120 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__rhs == __lhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 4161 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 4202 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 4243 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 4284 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 4326 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
   
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 4347 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 4365 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 4388 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 4405 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/15/ext/string_conversions.h" 1 3
# 45 "/usr/include/c++/15/ext/string_conversions.h" 3
# 1 "/usr/include/c++/15/cstdlib" 1 3
# 80 "/usr/include/c++/15/cstdlib" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"

# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern long int strtol (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtol")


     __attribute__ ((__nonnull__ (1)));
extern unsigned long int strtoul (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoul")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoll (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));
# 278 "/usr/include/stdlib.h" 3 4
extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 298 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 340 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));





extern long int strtol_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtol_l")



     __attribute__ ((__nonnull__ (1, 4)));
extern unsigned long int strtoul_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoul_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern long long int strtoll_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoll_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoull_l")




     __attribute__ ((__nonnull__ (1, 4)));
# 415 "/usr/include/stdlib.h" 3 4
extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 436 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 480 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) noexcept (true)
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) noexcept (true)
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) noexcept (true)
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 69 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_size[2] ;
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
  unsigned int __unused_initialized_1;
  unsigned int __unused_initialized_2;
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 515 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern __uint32_t arc4random (void)
     noexcept (true) ;


extern void arc4random_buf (void *__buf, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __uint32_t arc4random_uniform (__uint32_t __upper_bound)
     noexcept (true) ;




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 707 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 749 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 827 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 837 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 849 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 859 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 881 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 891 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 901 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 913 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 923 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
     __attribute__ ((__malloc__ (__builtin_free, 1))) ;
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  const void *__p;
  int __comparison;

  while (__nmemb)
    {
      __p = (const void *) (((const char *) __base) + ((__nmemb >> 1) * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison == 0)
 {

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"

   return (void *) __p;

#pragma GCC diagnostic pop

 }
      if (__comparison > 0)
 {
   __base = ((const char *) __p) + __size;
   --__nmemb;
 }
      __nmemb >>= 1;
    }

  return __null;
}
# 966 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) noexcept (true)
{
  return strtod (__nptr, (char **) __null);
}
# 1156 "/usr/include/stdlib.h" 2 3 4
# 1167 "/usr/include/stdlib.h" 3 4
}
# 84 "/usr/include/c++/15/cstdlib" 2 3

 
# 85 "/usr/include/c++/15/cstdlib" 3
#pragma GCC diagnostic pop

# 1 "/usr/include/c++/15/bits/std_abs.h" 1 3
# 39 "/usr/include/c++/15/bits/std_abs.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#pragma GCC diagnostic ignored "-Wlong-long"
# 52 "/usr/include/c++/15/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 76 "/usr/include/c++/15/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 156 "/usr/include/c++/15/bits/std_abs.h" 3

}
}

#pragma GCC diagnostic pop
# 88 "/usr/include/c++/15/cstdlib" 2 3
# 131 "/usr/include/c++/15/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) noexcept { return ldiv(__i, __j); }




}
# 205 "/usr/include/c++/15/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
#pragma GCC diagnostic pop
# 240 "/usr/include/c++/15/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 284 "/usr/include/c++/15/cstdlib" 3
}
# 46 "/usr/include/c++/15/ext/string_conversions.h" 2 3

# 1 "/usr/include/c++/15/cstdio" 1 3
# 47 "/usr/include/c++/15/cstdio" 3
# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 29 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdarg.h" 1 3 4
# 38 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3 4
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 42 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2:24;

  char _short_backupbuf[1];
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  struct _IO_FILE **_prevchain;
  int _mode;

  char _unused2[15 * sizeof (int) - 5 * sizeof (void *)];
};
# 45 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 48 "/usr/include/stdio.h" 2 3 4
# 85 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 129 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 130 "/usr/include/stdio.h" 2 3 4
# 149 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) noexcept (true);

extern int rename (const char *__old, const char *__new) noexcept (true);



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) noexcept (true);
# 176 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) noexcept (true);






extern int fclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 194 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 206 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;



extern char *tmpnam (char[20]) noexcept (true) ;




extern char *tmpnam_r (char __s[20]) noexcept (true) ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 245 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 255 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 264 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));
# 289 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));




extern FILE *fdopen (int __fd, const char *__modes) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;





extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1)));





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) noexcept (true)
  __attribute__ ((__nonnull__ (1)));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void setlinebuf (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) noexcept (true);





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nonnull__ (1)));




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) noexcept (true);



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) noexcept (true);
# 442 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc23_fscanf")

                                __attribute__ ((__nonnull__ (1)));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc23_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc23_sscanf")

                      ;
# 490 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__nonnull__ (1)));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__scanf__, 2, 0)));






extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__nonnull__ (1)));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc23_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 575 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int getc (FILE *__stream) __attribute__ ((__nonnull__ (1)));





extern int getchar (void);






extern int getc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int getchar_unlocked (void);
# 600 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 611 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));
extern int putc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));





extern int putchar (int __c);
# 627 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));







extern int putc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream) __attribute__ ((__nonnull__ (1)));


extern int putw (int __w, FILE *__stream) __attribute__ ((__nonnull__ (2)));







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2))) __attribute__ ((__nonnull__ (3)));
# 677 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream)
    __attribute__ ((__access__ (__write_only__, 1, 2))) __attribute__ ((__nonnull__ (3)));
# 689 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__nonnull__ (4)));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__nonnull__ (4)));


extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (2)));





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) __attribute__ ((__nonnull__ (4)));
# 745 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream) __attribute__ ((__nonnull__ (2)));
# 756 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));







extern int fseek (FILE *__stream, long int __off, int __whence)
  __attribute__ ((__nonnull__ (1)));




extern long int ftell (FILE *__stream) __attribute__ ((__nonnull__ (1)));




extern void rewind (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 793 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence)
  __attribute__ ((__nonnull__ (1)));




extern __off_t ftello (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 819 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos)
  __attribute__ ((__nonnull__ (1)));




extern int fsetpos (FILE *__stream, const fpos_t *__pos) __attribute__ ((__nonnull__ (1)));
# 841 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence)
  __attribute__ ((__nonnull__ (1)));
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos)
  __attribute__ ((__nonnull__ (1)));
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos) __attribute__ ((__nonnull__ (1)));



extern void clearerr (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern int feof (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern int ferror (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern void clearerr_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));
extern int feof_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));
extern int ferror_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern void perror (const char *__s) __attribute__ ((__cold__));




extern int fileno (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int fileno_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 887 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1)));





extern char *cuserid (char *__s)
  __attribute__ ((__access__ (__write_only__, 1)));




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int ftrylockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void funlockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 949 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 966 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) noexcept (true)
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) noexcept (true)
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 967 "/usr/include/stdio.h" 2 3 4






}
# 48 "/usr/include/c++/15/cstdio" 2 3
# 98 "/usr/include/c++/15/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 159 "/usr/include/c++/15/cstdio" 3
namespace __gnu_cxx
{
# 177 "/usr/include/c++/15/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 48 "/usr/include/c++/15/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/15/cerrno" 1 3
# 47 "/usr/include/c++/15/cerrno" 3
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/lib/linux/uapi/x86/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/lib/linux/uapi/x86/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) noexcept (true) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 48 "/usr/include/c++/15/cerrno" 2 3
# 49 "/usr/include/c++/15/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 4445 "/usr/include/c++/15/bits/basic_string.h" 2 3
# 1 "/usr/include/c++/15/bits/charconv.h" 1 3
# 42 "/usr/include/c++/15/bits/charconv.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __detail
{


  template<typename _Tp>
    constexpr bool __integer_to_chars_is_unsigned
      = ! __gnu_cxx::__int_traits<_Tp>::__is_signed;



  template<typename _Tp>
    constexpr unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {

      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");


      unsigned __n = 1;
      const unsigned __b2 = __base * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
 {
   if (__value < (unsigned)__base) return __n;
   if (__value < __b2) return __n + 1;
   if (__value < __b3) return __n + 2;
   if (__value < __b4) return __n + 3;
   __value /= __b4;
   __n += 4;
 }
    }




  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    {

      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");


      constexpr char __digits[201] =
 "0001020304050607080910111213141516171819"
 "2021222324252627282930313233343536373839"
 "4041424344454647484950515253545556575859"
 "6061626364656667686970717273747576777879"
 "8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
 {
   auto const __num = (__val % 100) * 2;
   __val /= 100;
   __first[__pos] = __digits[__num + 1];
   __first[__pos - 1] = __digits[__num];
   __pos -= 2;
 }
      if (__val >= 10)
 {
   auto const __num = __val * 2;
   __first[1] = __digits[__num + 1];
   __first[0] = __digits[__num];
 }
      else
 __first[0] = '0' + __val;
    }

}

}
# 4446 "/usr/include/c++/15/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {


  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }


  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }
# 4488 "/usr/include/c++/15/bits/basic_string.h" 3
  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }



  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
# 4516 "/usr/include/c++/15/bits/basic_string.h" 3
  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }
# 4528 "/usr/include/c++/15/bits/basic_string.h" 3
  [[__nodiscard__]]
  inline string
  to_string(int __val)

  noexcept

  {
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str;
    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
      __p[0] = '-';
      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(unsigned __val)

  noexcept

  {
    const auto __len = __detail::__to_chars_len(__val);
    string __str;
    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      __detail::__to_chars_10_impl(__p, __n, __val);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(long __val)



  {
    const bool __neg = __val < 0;
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str;
    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
      __p[0] = '-';
      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(unsigned long __val)



  {
    const auto __len = __detail::__to_chars_len(__val);
    string __str;
    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      __detail::__to_chars_10_impl(__p, __n, __val);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(long long __val)
  {
    const bool __neg = __val < 0;
    const unsigned long long __uval
      = __neg ? (unsigned long long)~__val + 1ull : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str;
    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
      __p[0] = '-';
      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(unsigned long long __val)
  {
    const auto __len = __detail::__to_chars_len(__val);
    string __str;
    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      __detail::__to_chars_10_impl(__p, __n, __val);
      return __n;
    });
    return __str;
  }
# 4687 "/usr/include/c++/15/bits/basic_string.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsuggest-attribute=format"


  [[__nodiscard__]]
  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  [[__nodiscard__]]
  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  [[__nodiscard__]]
  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }
#pragma GCC diagnostic pop



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
 
  inline void
  __to_wstring_numeric(const char* __s, int __len, wchar_t* __wout)
  {


    if constexpr (wchar_t('0') == L'0' && wchar_t('-') == L'-'
      && wchar_t('.') == L'.' && wchar_t('e') == L'e')
      {
 for (int __i = 0; __i < __len; ++__i)
   __wout[__i] = (wchar_t) __s[__i];
      }
    else
      {
 wchar_t __wc[256];
 for (int __i = '0'; __i <= '9'; ++__i)
   __wc[__i] = L'0' + __i;
 __wc['.'] = L'.';
 __wc['+'] = L'+';
 __wc['-'] = L'-';
 __wc['a'] = L'a';
 __wc['b'] = L'b';
 __wc['c'] = L'c';
 __wc['d'] = L'd';
 __wc['e'] = L'e';
 __wc['f'] = L'f';
 __wc['i'] = L'i';
 __wc['n'] = L'n';
 __wc['p'] = L'p';
 __wc['x'] = L'x';
 __wc['A'] = L'A';
 __wc['B'] = L'B';
 __wc['C'] = L'C';
 __wc['D'] = L'D';
 __wc['E'] = L'E';
 __wc['F'] = L'F';
 __wc['I'] = L'I';
 __wc['N'] = L'N';
 __wc['P'] = L'P';
 __wc['X'] = L'X';

 for (int __i = 0; __i < __len; ++__i)
   __wout[__i] = __wc[(int)__s[__i]];
      }
  }




  inline wstring



  __to_wstring_numeric(const string& __s)

  {
    if constexpr (wchar_t('0') == L'0' && wchar_t('-') == L'-'
      && wchar_t('.') == L'.' && wchar_t('e') == L'e')
      return wstring(__s.data(), __s.data() + __s.size());
    else
      {
 wstring __ws;
 auto __f = __s.data();
 __ws.__resize_and_overwrite(__s.size(),
        [__f] (wchar_t* __to, int __n) {
          std::__to_wstring_numeric(__f, __n, __to);
          return __n;
        });
 return __ws;
      }
  }
#pragma GCC diagnostic pop

  [[__nodiscard__]]
  inline wstring
  to_wstring(int __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(unsigned __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(unsigned long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(long long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(unsigned long long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }


  [[__nodiscard__]]
  inline wstring
  to_wstring(float __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(double __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(long double __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }



}

}







namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _CharT, typename _Alloc,
    typename _StrT = basic_string<_CharT, char_traits<_CharT>, _Alloc>>
    struct __str_hash_base
    : public __hash_base<size_t, _StrT>
    {
      [[__nodiscard__]]
      size_t
      operator()(const _StrT& __s) const noexcept
      { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(_CharT)); }
    };



  template<typename _Alloc>
    struct hash<basic_string<char, char_traits<char>, _Alloc>>
    : public __str_hash_base<char, _Alloc>
    { };


  template<typename _Alloc>
    struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Alloc>>
    : public __str_hash_base<wchar_t, _Alloc>
    { };

  template<typename _Alloc>
    struct __is_fast_hash<hash<basic_string<wchar_t, char_traits<wchar_t>,
         _Alloc>>>
    : std::false_type
    { };
# 4944 "/usr/include/c++/15/bits/basic_string.h" 3
  template<typename _Alloc>
    struct hash<basic_string<char16_t, char_traits<char16_t>, _Alloc>>
    : public __str_hash_base<char16_t, _Alloc>
    { };


  template<typename _Alloc>
    struct hash<basic_string<char32_t, char_traits<char32_t>, _Alloc>>
    : public __str_hash_base<char32_t, _Alloc>
    { };



  template<> struct __is_fast_hash<hash<string>> : std::false_type { };
  template<> struct __is_fast_hash<hash<wstring>> : std::false_type { };
  template<> struct __is_fast_hash<hash<u16string>> : std::false_type { };
  template<> struct __is_fast_hash<hash<u32string>> : std::false_type { };
# 4973 "/usr/include/c++/15/bits/basic_string.h" 3
  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"







    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }
# 5003 "/usr/include/c++/15/bits/basic_string.h" 3
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }


#pragma GCC diagnostic pop
  }
  }
# 5036 "/usr/include/c++/15/bits/basic_string.h" 3

}
# 57 "/usr/include/c++/15/string" 2 3
# 1 "/usr/include/c++/15/bits/basic_string.tcc" 1 3
# 46 "/usr/include/c++/15/bits/basic_string.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == std::__addressof(__s))
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      __s.length() + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      length() + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      __s.length() + 1);
       }
     else if (__s.length())
       {
  _M_init_local_buf();
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      __s.length() + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  __s._M_init_local_buf();
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      length() + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     __s._M_init_local_buf();
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         length() + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       _M_init_local_buf();
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    __s.length() + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _S_allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
     
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 _M_init_local_buf();

 while (__beg != __end && __len < __capacity)
   {
     _M_local_buf[__len++] = *__beg;
     ++__beg;
   }

 struct _Guard
 {
  
   explicit _Guard(basic_string* __s) : _M_guarded(__s) { }

  
   ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

   basic_string* _M_guarded;
 } __guard(this);

 while (__beg != __end)
   {
     if (__len == __capacity)
       {

  __capacity = __len + 1;
  pointer __another = _M_create(__capacity, __len);
  this->_S_copy(__another, _M_data(), __len);
  _M_dispose();
  _M_data(__another);
  _M_capacity(__capacity);
       }
     traits_type::assign(_M_data()[__len++],
    static_cast<_CharT>(*__beg));
     ++__beg;
   }

 __guard._M_guarded = 0;

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
     
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {
 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }
 else
   _M_init_local_buf();


 struct _Guard
 {
  
   explicit _Guard(basic_string* __s) : _M_guarded(__s) { }

  
   ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

   basic_string* _M_guarded;
 } __guard(this);

 this->_S_copy_chars(_M_data(), __beg, __end);

 __guard._M_guarded = 0;

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }
      else
 _M_init_local_buf();

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }



  template<typename _CharT, typename _Traits, typename _Alloc>
    template<bool _Terminated>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(const _CharT* __str, size_type __n)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }
      else
 _M_init_local_buf();

      if (__n || _Terminated)
 this->_S_copy(_M_data(), __str, __n + _Terminated);

      _M_length(__n);
      if (!_Terminated)
 traits_type::assign(_M_data()[__n], _CharT());
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != std::__addressof(__str))
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      const size_type __capacity = capacity();




      if (__res <= __capacity)
 return;

      pointer __tmp = _M_create(__res, __capacity);
      this->_S_copy(__tmp, _M_data(), length() + 1);
      _M_dispose();
      _M_data(__tmp);
      _M_capacity(__res);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve()
    {
      if (_M_is_local())
 return;

      const size_type __length = length();
      const size_type __capacity = _M_allocated_capacity;

      if (__length <= size_type(_S_local_capacity))
 {
   _M_init_local_buf();
   this->_S_copy(_M_local_buf, _M_data(), __length + 1);
   _M_destroy(__capacity);
   _M_data(_M_local_data());
 }

      else if (__length < __capacity)
 try
   {
     pointer __tmp = _S_allocate(_M_get_allocator(), __length + 1);
     this->_S_copy(__tmp, _M_data(), __length + 1);
     _M_dispose();
     _M_data(__tmp);
     _M_capacity(__length);
   }
 catch (const __cxxabiv1::__forced_unwind&)
   { throw; }
 catch (...)
   { }

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
     
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {


 const basic_string __s(__k1, __k2, this->get_allocator());
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    __attribute__((__noinline__, __noclone__, __cold__)) void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,
      const size_type __len2, const size_type __how_much)
    {

      if (__len2 && __len2 <= __len1)
 this->_S_move(__p, __s, __len2);
      if (__how_much && __len1 != __len2)
 this->_S_move(__p + __len2, __p + __len1, __how_much);
      if (__len2 > __len1)
 {
   if (__s + __len2 <= __p + __len1)
     this->_S_move(__p, __s, __len2);
   else if (__s >= __p + __len1)
     {


       const size_type __poff = (__s - __p) + (__len2 - __len1);
       this->_S_copy(__p, __p + __poff, __len2);
     }
   else
     {
       const size_type __nleft = (__p + __len1) - __s;
       this->_S_move(__p, __s, __nleft);
       this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft);
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
# 568 "/usr/include/c++/15/bits/basic_string.tcc" 3
   if (__builtin_expect(_M_disjunct(__s), true))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     _M_replace_cold(__p, __len1, __s, __len2, __how_much);
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 611 "/usr/include/c++/15/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
  template<typename _Operation>
    void
    basic_string<_CharT, _Traits, _Alloc>::



    __resize_and_overwrite(const size_type __n, _Operation __op)

    {
      reserve(__n);
      _CharT* const __p = _M_data();




      struct _Terminator {
 ~_Terminator() { _M_this->_M_set_length(_M_r); }
 basic_string* _M_this;
 size_type _M_r;
      };
      _Terminator __term{this, 0};
      auto __r = std::move(__op)(__p + 0, __n + 0);



      static_assert(__gnu_cxx::__is_integer_nonstrict<decltype(__r)>::__value,
      "resize_and_overwrite operation must return an integer");

      ;
      __term._M_r = size_type(__r);
      if (__term._M_r > __n)
 __builtin_unreachable();
    }
# 654 "/usr/include/c++/15/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }




  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (__extracted < __n && _Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1008 "/usr/include/c++/15/bits/basic_string.tcc" 3
  extern template class basic_string<char>;
# 1021 "/usr/include/c++/15/bits/basic_string.tcc" 3
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;
# 1047 "/usr/include/c++/15/bits/basic_string.tcc" 3
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}

#pragma GCC diagnostic pop
# 58 "/usr/include/c++/15/string" 2 3
# 69 "/usr/include/c++/15/string" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 70 "/usr/include/c++/15/string" 2 3
# 42 "/usr/include/c++/15/stdexcept" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 115 "/usr/include/c++/15/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;

    logic_error(logic_error&&) noexcept;
    logic_error& operator=(logic_error&&) noexcept;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;





    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;
    domain_error(const domain_error&) = default;
    domain_error& operator=(const domain_error&) = default;
    domain_error(domain_error&&) = default;
    domain_error& operator=(domain_error&&) = default;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;
    invalid_argument(const invalid_argument&) = default;
    invalid_argument& operator=(const invalid_argument&) = default;
    invalid_argument(invalid_argument&&) = default;
    invalid_argument& operator=(invalid_argument&&) = default;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;
    length_error(const length_error&) = default;
    length_error& operator=(const length_error&) = default;
    length_error(length_error&&) = default;
    length_error& operator=(length_error&&) = default;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;
    out_of_range(const out_of_range&) = default;
    out_of_range& operator=(const out_of_range&) = default;
    out_of_range(out_of_range&&) = default;
    out_of_range& operator=(out_of_range&&) = default;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;

    runtime_error(runtime_error&&) noexcept;
    runtime_error& operator=(runtime_error&&) noexcept;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;





    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;
    range_error(const range_error&) = default;
    range_error& operator=(const range_error&) = default;
    range_error(range_error&&) = default;
    range_error& operator=(range_error&&) = default;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;
    overflow_error(const overflow_error&) = default;
    overflow_error& operator=(const overflow_error&) = default;
    overflow_error(overflow_error&&) = default;
    overflow_error& operator=(overflow_error&&) = default;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;
    underflow_error(const underflow_error&) = default;
    underflow_error& operator=(const underflow_error&) = default;
    underflow_error(underflow_error&&) = default;
    underflow_error& operator=(underflow_error&&) = default;

    virtual ~underflow_error() noexcept;
  };




}
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/noncopyable.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/noncopyable.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/noncopyable.hpp" 2


# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/noncopyable.hpp"
namespace asio {
namespace detail {

class noncopyable
{
protected:
  noncopyable() {}
  ~noncopyable() {}
private:
  noncopyable(const noncopyable&);
  const noncopyable& operator=(const noncopyable&);
};

}

using asio::detail::noncopyable;

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/noncopyable.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wrapped_handler.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wrapped_handler.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/addressof.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/addressof.hpp"
# 1 "/usr/include/c++/15/memory" 1 3
# 68 "/usr/include/c++/15/memory" 3
# 1 "/usr/include/c++/15/bits/stl_tempbuf.h" 1 3
# 65 "/usr/include/c++/15/bits/stl_tempbuf.h" 3

# 65 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 77 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
  namespace __detail
  {


    template<typename _Tp>
      inline _Tp*
      __get_temporary_buffer(ptrdiff_t __len) noexcept
      {
 if (__builtin_expect(size_t(__len) > (size_t(-1) / sizeof(_Tp)), 0))
   return 0;







 return (_Tp*) __builtin_operator_new(__len * sizeof(_Tp), nothrow_t());
      }



    template<typename _Tp>
      inline void
      __return_temporary_buffer(_Tp* __p,
    size_t __len __attribute__((__unused__)))
      {
# 118 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
 __builtin_operator_delete((__p), (__len) * sizeof(_Tp));
      }

  }
# 140 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
  template<typename _Tp>
   
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   if (_Tp* __tmp = __detail::__get_temporary_buffer<_Tp>(__len))
     return pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len = __len == 1 ? 0 : ((__len + 1) / 2);
 }
      return pair<_Tp*, ptrdiff_t>();
    }
# 166 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
  template<typename _Tp>
   
    inline void
    return_temporary_buffer(_Tp* __p)
    {





      __builtin_operator_delete(__p);
    }
# 187 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      struct _Impl
      {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 explicit
 _Impl(ptrdiff_t __original_len)
 {
   pair<pointer, size_type> __p(
     std::get_temporary_buffer<value_type>(__original_len));
   _M_len = __p.second;
   _M_buffer = __p.first;
 }
#pragma GCC diagnostic pop

 ~_Impl()
 { std::__detail::__return_temporary_buffer(_M_buffer, _M_len); }

 size_type _M_len;
 pointer _M_buffer;
      } _M_impl;

    public:

      size_type
      size() const
      { return _M_impl._M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_impl._M_buffer; }


      iterator
      end()
      { return _M_impl._M_buffer + _M_impl._M_len; }





      _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);

      ~_Temporary_buffer()
      { std::_Destroy(_M_impl._M_buffer, _M_impl._M_buffer + _M_impl._M_len); }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if (__builtin_expect(__first == __last, 0))
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 311 "/usr/include/c++/15/bits/stl_tempbuf.h" 3
  template<typename _Tp, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Tp* __first, _Tp* __last,
      _ForwardIterator __seed)
    {
      std::__uninitialized_construct_buf_dispatch<
 __has_trivial_constructor(_Tp)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)
    : _M_original_len(__original_len), _M_impl(__original_len)
    {
      std::__uninitialized_construct_buf(begin(), end(), __seed);
    }


}
# 69 "/usr/include/c++/15/memory" 2 3


# 1 "/usr/include/c++/15/bits/stl_uninitialized.h" 1 3
# 71 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _ForwardIterator, typename _Alloc = void>
    struct _UninitDestroyGuard
    {
     
      explicit
      _UninitDestroyGuard(_ForwardIterator& __first, _Alloc& __a)
      : _M_first(__first), _M_cur(__builtin_addressof(__first)), _M_alloc(__a)
      { }

     
      ~_UninitDestroyGuard()
      {
 if (__builtin_expect(_M_cur != 0, 0))
   std::_Destroy(_M_first, *_M_cur, _M_alloc);
      }

     
      void release() { _M_cur = 0; }

    private:
      _ForwardIterator const _M_first;
      _ForwardIterator* _M_cur;
      _Alloc& _M_alloc;

      _UninitDestroyGuard(const _UninitDestroyGuard&);
    };

  template<typename _ForwardIterator>
    struct _UninitDestroyGuard<_ForwardIterator, void>
    {
     
      explicit
      _UninitDestroyGuard(_ForwardIterator& __first)
      : _M_first(__first), _M_cur(__builtin_addressof(__first))
      { }

     
      ~_UninitDestroyGuard()
      {
 if (__builtin_expect(_M_cur != 0, 0))
   std::_Destroy(_M_first, *_M_cur);
      }

     
      void release() { _M_cur = 0; }

      _ForwardIterator const _M_first;
      _ForwardIterator* _M_cur;

    private:
      _UninitDestroyGuard(const _UninitDestroyGuard&);
    };



  template<typename _InputIterator, typename _Sentinel,
    typename _ForwardIterator>
   
    _ForwardIterator
    __do_uninit_copy(_InputIterator __first, _Sentinel __last,
       _ForwardIterator __result)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__result);
      for (; __first != __last; ++__first, (void)++__result)
 std::_Construct(std::__addressof(*__result), *__first);
      __guard.release();
      return __result;
    }
# 217 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
# 228 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
   
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
# 256 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
      using _Dest = decltype(std::__niter_base(__result));
      using _Src = decltype(std::__niter_base(__first));
      using _ValT = typename iterator_traits<_ForwardIterator>::value_type;






      if constexpr (!__is_trivially_constructible(_ValT, decltype(*__first)))
 return std::__do_uninit_copy(__first, __last, __result);
      else if constexpr (__memcpyable<_Dest, _Src>::__value)
 {
   ptrdiff_t __n = __last - __first;
   if (__n > 0) [[__likely__]]
     {
       using _ValT = typename remove_pointer<_Src>::type;
       __builtin_memcpy(std::__niter_base(__result),
          std::__niter_base(__first),
          __n * sizeof(_ValT));
       __result += __n;
     }
   return __result;
 }
# 302 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
      else
 return std::__do_uninit_copy(__first, __last, __result);
# 317 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
    }
#pragma GCC diagnostic pop




  template<typename _ForwardIterator, typename _Tp>
    void
    __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __x)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__first);
      for (; __first != __last; ++__first)
 std::_Construct(std::__addressof(*__first), __x);
      __guard.release();
    }
# 389 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
# 404 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"





      if constexpr (__is_byte<_ValueType>::__value)
 if constexpr (is_same<_ValueType, _Tp>::value
   || is_integral<_Tp>::value)
   {
     using _BasePtr = decltype(std::__niter_base(__first));
     if constexpr (is_pointer<_BasePtr>::value)
       {
  void* __dest = std::__niter_base(__first);
  ptrdiff_t __n = __last - __first;
  if (__n > 0) [[__likely__]]
    __builtin_memset(__dest, (unsigned char)__x, __n);
  return;
       }
# 438 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
   }
      std::__do_uninit_fill(__first, __last, __x);
#pragma GCC diagnostic pop






    }




  template<typename _ForwardIterator, typename _Size, typename _Tp>
   
    _ForwardIterator
    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__first);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      if constexpr (is_integral<_Size>::value)

 do { if (std::__is_constant_evaluated() && !bool(__n >= 0)) std::__glibcxx_assert_fail(); } while (false);
      else if constexpr (is_floating_point<_Size>::value)

 do { if (std::__is_constant_evaluated() && !bool(__n >= 0 && static_cast<size_t>(__n) == __n)) std::__glibcxx_assert_fail(); } while (false);
#pragma GCC diagnostic pop

      for (; __n--; ++__first)
 std::_Construct(std::__addressof(*__first), __x);
      __guard.release();
      return __first;
    }
# 510 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
# 523 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
   
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {






      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;







      if constexpr (__is_byte<_ValueType>::__value)
 if constexpr (is_integral<_Tp>::value)
   if constexpr (is_integral<_Size>::value)
     {
       using _BasePtr = decltype(std::__niter_base(__first));
       if constexpr (is_pointer<_BasePtr>::value)
  {
    void* __dest = std::__niter_base(__first);
    if (__n > 0) [[__likely__]]
      {
        __builtin_memset(__dest, (unsigned char)__x, __n);
        __first += __n;
      }
    return __first;
  }
# 570 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
     }
      return std::__do_uninit_fill_n(__first, __n, __x);
# 580 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
    }
#pragma GCC diagnostic pop
# 591 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Sentinel,
    typename _ForwardIterator, typename _Allocator>
   
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _Sentinel __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator>
 __guard(__result, __alloc);

      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first, (void)++__result)
 __traits::construct(__alloc, std::__addressof(*__result), *__first);
      __guard.release();
      return __result;
    }


  template<typename _InputIterator, typename _Sentinel,
    typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _Sentinel __last,
      _ForwardIterator __result, allocator<_Tp>&)
    {
# 637 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
      return std::uninitialized_copy(__first, __last, __result);

    }


  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
   
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
   
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
   
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator>
 __guard(__first, __alloc);

      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::construct(__alloc, std::__addressof(*__first), __x);

      __guard.release();
    }


  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
   
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    {




      std::uninitialized_fill(__first, __last, __x);
    }


  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator>
 __guard(__first, __alloc);
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __n > 0; --__n, (void) ++__first)
 __traits::construct(__alloc, std::__addressof(*__first), __x);
      __guard.release();
      return __first;
    }


  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
   
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    {




      return std::uninitialized_fill_n(__first, __n, __x);
    }
# 740 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result, __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__result,
        __alloc);
      __result = __mid;
      __result = std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
      __guard.release();
      return __result;
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result, __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__result,
        __alloc);
      __result = __mid;
      __result = std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
      __guard.release();
      return __result;
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__result,
        __alloc);
      __result = __mid;
      __result = std::__uninitialized_move_a(__first, __last, __mid, __alloc);
      __guard.release();
      return __result;
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__first2,
        __alloc);
      __first2 = __mid2;
      std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
      __guard.release();
    }
# 832 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
       
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __first != __last; ++__first)
     std::_Construct(std::__addressof(*__first));
   __guard.release();
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
       
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   if (__first == __last)
     return;

   typename iterator_traits<_ForwardIterator>::value_type* __val
     = std::__addressof(*__first);
   std::_Construct(__val);
   if (++__first != __last)
     std::fill(__first, __last, *__val);
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>

        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __n > 0; --__n, (void) ++__first)
     std::_Construct(std::__addressof(*__first));
   __guard.release();
   return __first;
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>

        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   if (__n > 0)
     {
       typename iterator_traits<_ForwardIterator>::value_type* __val
  = std::__addressof(*__first);
       std::_Construct(__val);
       ++__first;
       __first = std::fill_n(__first, __n - 1, *__val);
     }
   return __first;
 }
    };



  template<typename _ForwardIterator>
   
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {






      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
   
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {






      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      constexpr bool __can_fill
 = __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
      && __can_fill>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__first,
        __alloc);
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::construct(__alloc, std::__addressof(*__first));
      __guard.release();
    }


  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__first,
        __alloc);
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __n > 0; --__n, (void) ++__first)
 __traits::construct(__alloc, std::__addressof(*__first));
      __guard.release();
      return __first;
    }




  template<typename _ForwardIterator, typename _Size, typename _Tp>
   
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }


  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>

 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __first != __last; ++__first)
     std::_Construct_novalue(std::__addressof(*__first));
   __guard.release();
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
       
        static void
        __uninit_default_novalue(_ForwardIterator, _ForwardIterator)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>

 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __n > 0; --__n, (void) ++__first)
     std::_Construct_novalue(std::__addressof(*__first));
   __guard.release();
   return __first;
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
       
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };



  template<typename _ForwardIterator>
   
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
   
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
   
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__result);
      for (; __n > 0; --__n, (void) ++__first, ++__result)
 std::_Construct(std::__addressof(*__result), *__first);
      __guard.release();
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
   
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
   
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
    _ForwardIterator __result, input_iterator_tag)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__result);
      for (; __n > 0; --__n, (void) ++__first, ++__result)
 std::_Construct(std::__addressof(*__result), *__first);
      __guard.release();
      return {__first, __result};
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
   
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 1151 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
   
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }


  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
   
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 1277 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
  template<typename _Tp, typename _Up, typename _Allocator>
   
    inline void
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   _Allocator& __alloc)
    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
    __dest, std::move(*__orig)))
      && noexcept(std::allocator_traits<_Allocator>::destroy(
       __alloc, std::__addressof(*__orig))))
    {
      typedef std::allocator_traits<_Allocator> __traits;
      __traits::construct(__alloc, __dest, std::move(*__orig));
      __traits::destroy(__alloc, std::__addressof(*__orig));
    }



  template<typename _Tp, typename = void>
    struct __is_bitwise_relocatable
    : __bool_constant<__is_trivial(_Tp)>
    { };

  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
   
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
     _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
            std::addressof(*__first),
            __alloc)))
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
   "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 std::__relocate_object_a(std::__addressof(*__cur),
     std::__addressof(*__first), __alloc);
      return __cur;
    }


  template <typename _Tp, typename _Up>
   
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
     _Tp* __result,
     [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 {
# 1343 "/usr/include/c++/15/bits/stl_uninitialized.h" 3
   __builtin_memcpy(__result, __first, __count * sizeof(_Tp));
 }
      return __result + __count;
    }


  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
   
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
         std::__niter_base(__last),
         std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
     std::__niter_base(__last),
     std::__niter_base(__result), __alloc);
    }







}
# 72 "/usr/include/c++/15/memory" 2 3
# 1 "/usr/include/c++/15/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/include/c++/15/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



 
# 64 "/usr/include/c++/15/bits/stl_raw_storage_iter.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"





  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }




      raw_storage_iterator&
      operator=(_Tp&& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), std::move(__element));
 return *this;
      }


      raw_storage_iterator&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator
      operator++(int)
      {
 raw_storage_iterator __tmp = *this;
 ++_M_iter;
 return __tmp;
      }



      _OutputIterator base() const { return _M_iter; }
    };
#pragma GCC diagnostic pop


}
# 73 "/usr/include/c++/15/memory" 2 3



# 1 "/usr/include/c++/15/bits/align.h" 1 3
# 35 "/usr/include/c++/15/bits/align.h" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 36 "/usr/include/c++/15/bits/align.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 59 "/usr/include/c++/15/bits/align.h" 3
inline void*
align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
{
  if (__space < __size)
    return nullptr;
  const auto __intptr = reinterpret_cast<long unsigned int>(__ptr);
  const auto __aligned = (__intptr - 1u + __align) & -__align;
  const auto __diff = __aligned - __intptr;
  if (__diff > (__space - __size))
    return nullptr;
  else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
}
# 105 "/usr/include/c++/15/bits/align.h" 3

}
# 77 "/usr/include/c++/15/memory" 2 3



# 1 "/usr/include/c++/15/bits/unique_ptr.h" 1 3
# 46 "/usr/include/c++/15/bits/unique_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








 
# 56 "/usr/include/c++/15/bits/unique_ptr.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop







  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up,
        typename = _Require<is_convertible<_Up*, _Tp*>>>

        default_delete(const default_delete<_Up>&) noexcept { }


     
      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };
# 104 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    public:

      constexpr default_delete() noexcept = default;
# 120 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Up,
        typename = _Require<is_convertible<_Up(*)[], _Tp(*)[]>>>

        default_delete(const default_delete<_Up[]>&) noexcept { }


      template<typename _Up>

 typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
 operator()(_Up* __ptr) const
 {
   static_assert(sizeof(_Tp)>0,
   "can't delete pointer to incomplete type");
   delete [] __ptr;
 }
    };




  template <typename _Tp, typename _Dp>
    class __uniq_ptr_impl
    {
      template <typename _Up, typename _Ep, typename = void>
 struct _Ptr
 {
   using type = _Up*;
 };

      template <typename _Up, typename _Ep>
 struct
 _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
 {
   using type = typename remove_reference<_Ep>::type::pointer;
 };

    public:
      using _DeleterConstraint = enable_if<
        __and_<__not_<is_pointer<_Dp>>,
        is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      static_assert( !is_rvalue_reference<_Dp>::value,
       "unique_ptr's deleter type must be a function object type"
       " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
     
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }

      template<typename _Del>

 __uniq_ptr_impl(pointer __p, _Del&& __d)
 : _M_t(__p, std::forward<_Del>(__d)) { }

     
      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
      : _M_t(std::move(__u._M_t))
      { __u._M_ptr() = nullptr; }

     
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
      {
 reset(__u.release());
 _M_deleter() = std::forward<_Dp>(__u._M_deleter());
 return *this;
      }

     
      pointer& _M_ptr() noexcept { return std::get<0>(_M_t); }
     
      pointer _M_ptr() const noexcept { return std::get<0>(_M_t); }
     
      _Dp& _M_deleter() noexcept { return std::get<1>(_M_t); }
     
      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }

     
      void reset(pointer __p) noexcept
      {
 const pointer __old_p = _M_ptr();
 _M_ptr() = __p;
 if (__old_p)
   _M_deleter()(__old_p);
      }

     
      pointer release() noexcept
      {
 pointer __p = _M_ptr();
 _M_ptr() = nullptr;
 return __p;
      }

     
      void
      swap(__uniq_ptr_impl& __rhs) noexcept
      {
 using std::swap;
 swap(this->_M_ptr(), __rhs._M_ptr());
 swap(this->_M_deleter(), __rhs._M_deleter());
      }

    private:
      tuple<pointer, _Dp> _M_t;
    };


  template <typename _Tp, typename _Dp,
     bool = is_move_constructible<_Dp>::value,
     bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
    };







  template <typename _Tp, typename _Dp = default_delete<_Tp>>
    class unique_ptr
    {
      template <typename _Up>
 using _DeleterConstraint =
   typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_data<_Tp, _Dp> _M_t;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;

    private:


      template<typename _Up, typename _Ep>
 using __safe_conversion_up = __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
        >;

    public:



      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }







      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>

 explicit
 unique_ptr(pointer __p) noexcept
 : _M_t(__p)
        { }
# 321 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_copy_constructible<_Del>>>

 unique_ptr(pointer __p, const deleter_type& __d) noexcept
 : _M_t(__p, __d) { }
# 334 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_move_constructible<_Del>>>

 unique_ptr(pointer __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(__p, std::move(__d))
 { }

      template<typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type>

 unique_ptr(pointer,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
 { }




      unique_ptr(unique_ptr&&) = default;







      template<typename _Up, typename _Ep, typename = _Require<
               __safe_conversion_up<_Up, _Ep>,
        __conditional_t<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>>>

 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Up,
        typename = _Require<is_convertible<_Up*, pointer>,
       is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop






      ~unique_ptr() noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(std::move(__ptr));
 __ptr = pointer();
      }







      unique_ptr& operator=(unique_ptr&&) = default;
# 417 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>

        typename enable_if< __and_<
          __safe_conversion_up<_Up, _Ep>,
          is_assignable<deleter_type&, _Ep&&>
          >::value,
          unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


     
      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




     
      typename add_lvalue_reference<element_type>::type
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
      {



 using _ResT = typename add_lvalue_reference<element_type>::type;
 using _DerefT = decltype(*get());
 static_assert(!__reference_converts_from_temporary(_ResT, _DerefT),
        "operator* must not return a dangling reference");

 do { if (std::__is_constant_evaluated() && !bool(get() != pointer())) std::__glibcxx_assert_fail(); } while (false);
 return *get();
      }


     
      pointer
      operator->() const noexcept
      {
 ;
 return get();
      }


     
      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


     
      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


     
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


     
      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




     
      pointer
      release() noexcept
      { return _M_t.release(); }







     
      void
      reset(pointer __p = pointer()) noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 _M_t.reset(std::move(__p));
      }


     
      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;

    private:






  };
# 544 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {
      template <typename _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_data<_Tp, _Dp> _M_t;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up>>> >;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep,
               typename _UPtr = unique_ptr<_Up, _Ep>,
        typename _UP_pointer = typename _UPtr::pointer,
        typename _UP_element_type = typename _UPtr::element_type>
 using __safe_conversion_up = __and_<
          is_array<_Up>,
          is_same<pointer, element_type*>,
          is_same<_UP_pointer, _UP_element_type*>,
          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        >;


      template<typename _Up>
        using __safe_conversion_raw = __and_<
          __or_<__or_<is_same<_Up, pointer>,
                      is_same<_Up, nullptr_t>>,
                __and_<is_pointer<_Up>,
                       is_same<pointer, element_type*>,
                       is_convertible<
                         typename remove_pointer<_Up>::type(*)[],
                         element_type(*)[]>
                >
          >
        >;




      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }
# 606 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Up,
        typename _Vp = _Dp,
        typename = _DeleterConstraint<_Vp>,
        typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>

 explicit
 unique_ptr(_Up __p) noexcept
 : _M_t(__p)
        { }
# 625 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_copy_constructible<_Del>>>

 unique_ptr(_Up __p, const deleter_type& __d) noexcept
 : _M_t(__p, __d) { }
# 640 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_move_constructible<_Del>>>

 unique_ptr(_Up __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(std::move(__p), std::move(__d))
 { }

      template<typename _Up, typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type,
        typename = _Require<__safe_conversion_raw<_Up>>>
 unique_ptr(_Up,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      unique_ptr(unique_ptr&&) = default;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
        { }

      template<typename _Up, typename _Ep, typename = _Require<
        __safe_conversion_up<_Up, _Ep>,
        __conditional_t<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>>>

 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }





      ~unique_ptr()
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }







      unique_ptr&
      operator=(unique_ptr&&) = default;
# 704 "/usr/include/c++/15/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>

 typename
 enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
                         is_assignable<deleter_type&, _Ep&&>
                  >::value,
                  unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


     
      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




     
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
 do { if (std::__is_constant_evaluated() && !bool(get() != pointer())) std::__glibcxx_assert_fail(); } while (false);
 return get()[__i];
      }


     
      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


     
      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


     
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


     
      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




     
      pointer
      release() noexcept
      { return _M_t.release(); }







      template <typename _Up,
                typename = _Require<
                  __or_<is_same<_Up, pointer>,
                        __and_<is_same<pointer, element_type*>,
                               is_pointer<_Up>,
                               is_convertible<
                                 typename remove_pointer<_Up>::type(*)[],
                                 element_type(*)[]
                               >
                        >
                  >
               >>
     
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

     
      void reset(nullptr_t = nullptr) noexcept
      { reset(pointer()); }


     
      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;

    private:




    };





  template<typename _Tp, typename _Dp>
    inline





    void

    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }
# 841 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }



  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }



  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr);
    }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get());
    }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get());
    }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr);
    }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]] inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }
# 1022 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Up, typename _Ptr = typename _Up::pointer>
    struct __uniq_ptr_hash
    : public __hash_base<size_t, _Up>

    , private __hash_empty_base<_Ptr>

    {
      size_t
      operator()(const _Up& __u) const
      noexcept(noexcept(std::declval<hash<_Ptr>>()(std::declval<_Ptr>())))
      { return hash<_Ptr>()(__u.get()); }
    };

  template<typename _Up>
    using __uniq_ptr_hash_base
      = __conditional_t<__is_hash_enabled_for<typename _Up::pointer>,
        __uniq_ptr_hash<_Up>,
        __hash_not_enabled<typename _Up::pointer>>;



  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __uniq_ptr_hash_base<unique_ptr<_Tp, _Dp>>
    { };



namespace __detail
{
  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };

  template<typename _Tp>
    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;
  template<typename _Tp>
    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;
  template<typename _Tp>
    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;
}
# 1080 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Tp, typename... _Args>
   
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
# 1095 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Tp>
   
    inline __detail::__unique_ptr_array_t<_Tp>
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }






  template<typename _Tp, typename... _Args>
    __detail::__invalid_make_unique_t<_Tp>
    make_unique(_Args&&...) = delete;
# 1166 "/usr/include/c++/15/bits/unique_ptr.h" 3
  template<typename _Tp>
    constexpr bool __is_unique_ptr = false;
  template<typename _Tp, typename _Del>
    constexpr bool __is_unique_ptr<unique_ptr<_Tp, _Del>> = true;
# 1188 "/usr/include/c++/15/bits/unique_ptr.h" 3

}
# 81 "/usr/include/c++/15/memory" 2 3

# 1 "/usr/include/c++/15/bits/shared_ptr.h" 1 3
# 53 "/usr/include/c++/15/bits/shared_ptr.h" 3
# 1 "/usr/include/c++/15/bits/shared_ptr_base.h" 1 3
# 53 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
# 1 "/usr/include/c++/15/bits/allocated_ptr.h" 1 3
# 40 "/usr/include/c++/15/bits/allocated_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct __allocated_ptr
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;


      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
      { }


      template<typename _Ptr,
        typename _Req = _Require<is_same<_Ptr, value_type*>>>
      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
      : _M_alloc(std::__addressof(__a)),
 _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
      { }


      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }


      ~__allocated_ptr()
      {
 if (_M_ptr != nullptr)
   std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }


      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
 _M_ptr = nullptr;
 return *this;
      }

      explicit operator bool() const noexcept { return (bool)_M_ptr; }


      value_type* get() const { return std::__to_address(_M_ptr); }

      pointer release() { return std::__exchange(_M_ptr, nullptr); }

    private:
      _Alloc* _M_alloc;
      pointer _M_ptr;
    };


  template<typename _Alloc>
    inline __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    }


  template<typename _Alloc>
    struct __allocated_obj : __allocated_ptr<_Alloc>
    {
      using value_type = typename __allocated_ptr<_Alloc>::value_type;

      __allocated_obj(__allocated_obj<_Alloc>&&) = default;


      __allocated_obj(__allocated_ptr<_Alloc>&& __ptr)
      : __allocated_ptr<_Alloc>(std::move(__ptr))
      { ::new ((void*)this->get()) value_type; }


      ~__allocated_obj()
      {
 if (static_cast<bool>(*this))
   this->get()->~value_type();
      }

      using __allocated_ptr<_Alloc>::operator=;

      value_type& operator*() const { return *this->get(); }
      value_type* operator->() const { return this->get(); }
    };


  template<typename _Alloc>
    inline __allocated_obj<_Alloc>
    __allocate_guarded_obj(_Alloc& __a)
    {
      return { std::__allocate_guarded(__a) };
    }



}
# 54 "/usr/include/c++/15/bits/shared_ptr_base.h" 2 3






# 1 "/usr/include/c++/15/ext/aligned_buffer.h" 1 3
# 42 "/usr/include/c++/15/ext/aligned_buffer.h" 3
namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {
# 60 "/usr/include/c++/15/ext/aligned_buffer.h" 3
      alignas(_Tp)

 unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };
# 95 "/usr/include/c++/15/ext/aligned_buffer.h" 3
  template<typename _Tp>
    struct __aligned_buffer
    {

      alignas(__alignof__(_Tp)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };


}
# 61 "/usr/include/c++/15/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/15/ext/atomicity.h" 1 3
# 37 "/usr/include/c++/15/ext/atomicity.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 157 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 63 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/linux/sched/types.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/lib/linux/uapi/x86/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/lib/linux/uapi/x86/asm/bitsperlong.h" 1 3 4
# 11 "/usr/lib/linux/uapi/x86/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/lib/linux/uapi/x86/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/lib/linux/uapi/x86/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/lib/linux/uapi/x86/asm/posix_types.h" 1 3 4






# 1 "/usr/lib/linux/uapi/x86/asm/posix_types_64.h" 1 3 4
# 11 "/usr/lib/linux/uapi/x86/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/lib/linux/uapi/x86/asm/posix_types_64.h" 2 3 4
# 8 "/usr/lib/linux/uapi/x86/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4


typedef __signed__ __int128 __s128 __attribute__((aligned(16)));
typedef unsigned __int128 __u128 __attribute__((aligned(16)));
# 31 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 54 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/sched/types.h" 2 3 4

struct __glibc_mask_sched_param {
 int sched_priority;
};
# 102 "/usr/include/linux/sched/types.h" 3 4
struct sched_attr {
 __u32 size;

 __u32 sched_policy;
 __u64 sched_flags;


 __s32 sched_nice;


 __u32 sched_priority;


 __u64 sched_runtime;
 __u64 sched_deadline;
 __u64 sched_period;


 __u32 sched_util_min;
 __u32 sched_util_max;

};
# 64 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4
# 126 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 127 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) noexcept (true);


extern int unshare (int __flags) noexcept (true);


extern int sched_getcpu (void) noexcept (true);


extern int getcpu (unsigned int *, unsigned int *) noexcept (true);


extern int setns (int __fd, int __nstype) noexcept (true);


int sched_setattr (pid_t tid, struct sched_attr *attr, unsigned int flags)
  noexcept (true) __attribute__ ((__nonnull__ (2)));



int sched_getattr (pid_t tid, struct sched_attr *attr, unsigned int size,
     unsigned int flags)
  noexcept (true) __attribute__ ((__nonnull__ (2)));



}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     noexcept (true);
extern cpu_set_t *__sched_cpualloc (size_t __count) noexcept (true) ;
extern void __sched_cpufree (cpu_set_t *__set) noexcept (true);

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     noexcept (true);


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) noexcept (true);


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) noexcept (true);


extern int sched_getscheduler (__pid_t __pid) noexcept (true);


extern int sched_yield (void) noexcept (true);


extern int sched_get_priority_max (int __algorithm) noexcept (true);


extern int sched_get_priority_min (int __algorithm) noexcept (true);



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) noexcept (true);
# 130 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) noexcept (true);


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) noexcept (true);


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
# 58 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;

};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) noexcept (true) __attribute__ ((__nonnull__ (2)));
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) noexcept (true);



extern time_t time (time_t *__timer) noexcept (true);


extern double difftime (time_t __time1, time_t __time0);


extern time_t mktime (struct tm *__tp) noexcept (true);
# 99 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp)
   noexcept (true) __attribute__ ((__nonnull__ (1, 3, 4)));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     noexcept (true);






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) noexcept (true);






extern struct tm *gmtime (const time_t *__timer) noexcept (true);



extern struct tm *localtime (const time_t *__timer) noexcept (true);
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) noexcept (true);



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) noexcept (true);
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) noexcept (true);



extern char *ctime (const time_t *__timer) noexcept (true);
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) noexcept (true);



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) noexcept (true);
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) noexcept (true);



extern int daylight;
extern long int timezone;
# 246 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) noexcept (true);
# 263 "/usr/include/time.h" 3 4
extern time_t timelocal (struct tm *__tp) noexcept (true);







extern int dysize (int __year) noexcept (true) __attribute__ ((__const__));
# 281 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) noexcept (true);


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     noexcept (true) __attribute__ ((__nonnull__ (2)));
# 323 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 338 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) noexcept (true);




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) noexcept (true);


extern int timer_delete (timer_t __timerid) noexcept (true);



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) noexcept (true);


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     noexcept (true);
# 376 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) noexcept (true);






extern int timespec_get (struct timespec *__ts, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 399 "/usr/include/time.h" 3 4
extern int timespec_getres (struct timespec *__ts, int __base)
     noexcept (true);
# 425 "/usr/include/time.h" 3 4
extern int getdate_err;
# 434 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 448 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4
extern "C" {
extern long int __sysconf (int __name) noexcept (true);
}
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) noexcept (true);
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) noexcept (true);



extern pthread_t pthread_self (void) noexcept (true) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  noexcept (true) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,
           const __sigset_t *sigmask);




extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,
           __sigset_t *sigmask);







extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     noexcept (true);




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) noexcept (true);


extern int pthread_setconcurrency (int __level) noexcept (true);



extern int pthread_yield (void) noexcept (true);

extern int pthread_yield (void) noexcept (true) __asm__ ("" "sched_yield")
  __attribute__ ((__deprecated__ ("pthread_yield is deprecated, use sched_yield instead")))
                                                      ;







extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) noexcept (true) __asm__ ("" "__sigsetjmp")


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_consistent_np (pthread_mutex_t *) noexcept (true) __asm__ ("" "pthread_mutex_consistent")
                                __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent")))
                                                                         ;
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) noexcept (true) __asm__ ("" "pthread_mutexattr_getrobust")

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust")))
                                                                               ;






extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) noexcept (true) __asm__ ("" "pthread_mutexattr_setrobust")

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust")))
                                                                               ;
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) noexcept (true);


extern void *pthread_getspecific (pthread_key_t __key) noexcept (true);


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  noexcept (true) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) noexcept (true);




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) noexcept (true)
{
  return __thread1 == __thread2;
}


}
# 36 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 2 3
# 62 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;



typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 123 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3



































# 345 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_active_p (void)
{
  return 1;
}
# 705 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return pthread_create (__threadid, __null, __func, __args);
}

inline __attribute__((__always_inline__)) int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return pthread_join (__threadid, __value_ptr);
}

inline __attribute__((__always_inline__)) int
__gthread_detach (__gthread_t __threadid)
{
  return pthread_detach (__threadid);
}

inline __attribute__((__always_inline__)) int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return pthread_equal (__t1, __t2);
}

inline __attribute__((__always_inline__)) __gthread_t
__gthread_self (void)
{
  return pthread_self ();
}

inline __attribute__((__always_inline__)) int
__gthread_yield (void)
{
  return sched_yield ();
}

inline __attribute__((__always_inline__)) int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return pthread_once (__once, __func);
  else
    return -1;
}

inline __attribute__((__always_inline__)) int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return pthread_key_create (__key, __dtor);
}

inline __attribute__((__always_inline__)) int
__gthread_key_delete (__gthread_key_t __key)
{
  return pthread_key_delete (__key);
}

inline __attribute__((__always_inline__)) void *
__gthread_getspecific (__gthread_key_t __key)
{
  return pthread_getspecific (__key);
}

inline __attribute__((__always_inline__)) int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return pthread_setspecific (__key, __ptr);
}

inline __attribute__((__always_inline__)) void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    pthread_mutex_init (__mutex, __null);
}

inline __attribute__((__always_inline__)) int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_destroy (__mutex);
  else
    return 0;
}

inline __attribute__((__always_inline__)) int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_lock (__mutex);
  else
    return 0;
}

inline __attribute__((__always_inline__)) int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_trylock (__mutex);
  else
    return 0;
}


inline __attribute__((__always_inline__)) int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


inline __attribute__((__always_inline__)) int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 854 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 896 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return pthread_cond_broadcast (__cond);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return pthread_cond_signal (__cond);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return pthread_cond_wait (__cond, __mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return pthread_cond_destroy (__cond);
}
# 158 "/usr/include/x86_64-linux-gnu/c++/15/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 38 "/usr/include/c++/15/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/15/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 39 "/usr/include/c++/15/ext/atomicity.h" 2 3

# 1 "/usr/include/x86_64-linux-gnu/sys/single_threaded.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/single_threaded.h" 3 4
extern "C" {




extern char __libc_single_threaded;

}
# 41 "/usr/include/c++/15/ext/atomicity.h" 2 3


namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  __attribute__((__always_inline__))
  inline bool
  __is_single_threaded() noexcept
  {



    return ::__libc_single_threaded;



  }






  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  inline void
  __attribute__((__always_inline__))
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 82 "/usr/include/c++/15/ext/atomicity.h" 3
  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  inline void
  __attribute__((__always_inline__))
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
      return __exchange_and_add_single(__mem, __val);
    else
      return __exchange_and_add(__mem, __val);
  }

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
  }


}
# 62 "/usr/include/c++/15/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/15/ext/concurrence.h" 1 3
# 42 "/usr/include/c++/15/ext/concurrence.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  const _Lock_policy __default_lock_policy =



  _S_atomic;






  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }


  inline void
  __throw_concurrence_broadcast_error()
  { (throw (__concurrence_broadcast_error())); }

  inline void
  __throw_concurrence_wait_error()
  { (throw (__concurrence_wait_error())); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, { __null, __null } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 149 "/usr/include/c++/15/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { __null, __null } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 204 "/usr/include/c++/15/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, 0, 0, {0, 0}, 0, 0 } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 282 "/usr/include/c++/15/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}

#pragma GCC diagnostic pop
# 63 "/usr/include/c++/15/bits/shared_ptr_base.h" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{



 
# 74 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const* what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;


      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }


      void
      _M_add_ref_lock()
      {
 if (!_M_add_ref_lock_nothrow())
   __throw_bad_weak_ptr();
      }


      bool
      _M_add_ref_lock_nothrow() noexcept;


      void
      _M_release() noexcept;


      void
      _M_release_last_use() noexcept
      {
 ;
 _M_dispose();




 if (_Mutex_base<_Lp>::_S_need_barriers)
   {
     __atomic_thread_fence (4);
   }


 ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
         -1) == 1)
   {
     ;
     _M_destroy();
   }
      }


      __attribute__((__noinline__))
      void
      _M_release_last_use_cold() noexcept
      { _M_release_last_use(); }


      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }


      void
      _M_weak_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
            ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


  __atomic_thread_fence (4);
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow() noexcept
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow() noexcept
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow() noexcept
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::_M_release() noexcept
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
 {
   _M_release_last_use();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::_M_release() noexcept
    {
      ;

      constexpr bool __lock_free
 = __atomic_always_lock_free(sizeof(long long), 0)
 && __atomic_always_lock_free(sizeof(_Atomic_word), 0);
      constexpr bool __double_word
 = sizeof(long long) == 2 * sizeof(_Atomic_word);


      constexpr bool __aligned = __alignof(long long) <= alignof(void*);
      if (__lock_free && __double_word && __aligned)
 {
   constexpr int __wordbits = 8 * sizeof(_Atomic_word);
   constexpr int __shiftbits = __double_word ? __wordbits : 0;
   constexpr long long __unique_ref = 1LL + (1LL << __shiftbits);
   auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);

   ;
   if (__atomic_load_n(__both_counts, 2) == __unique_ref)
     {




       _M_weak_count = _M_use_count = 0;
       ;
       ;
       _M_dispose();
       _M_destroy();
       return;
     }
   if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
     [[__unlikely__]]
     {
       _M_release_last_use_cold();
       return;
     }
 }
      else

      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
 {
   _M_release_last_use();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;







  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }






  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;


      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, std::move(__d), _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, std::move(__d), __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_deleter();
      }

      virtual void*
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
      {



        return __ti == typeid(_Deleter)
   ? std::__addressof(_M_impl._M_del())
   : nullptr;



      }

    private:



      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag
  {
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept __attribute__ ((__visibility__ ("default")))
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
    }

    static bool _S_eq(const type_info&) noexcept;
  };

  template<typename _Alloc>
    struct _Sp_alloc_shared_tag
    {
      const _Alloc& _M_a;
    };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<__remove_cv_t<_Tp>> _M_storage;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;


      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_ptr_inplace();
      }

    private:
      friend class __shared_count<_Lp>;



      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
      {




 if (&__ti == &_Sp_make_shared_tag::_S_ti()
     ||

     __ti == typeid(_Sp_make_shared_tag)



    )
   return _M_ptr();
 return nullptr;
      }

      __remove_cv_t<_Tp>*
      _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };
# 883 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
  struct __sp_array_delete
  {
    template<typename _Yp>
      void operator()(_Yp* __p) const { delete[] __p; }
  };

  template<_Lock_policy _Lp>
    class __shared_count
    {

      template<typename _Tp>
 struct __not_alloc_shared_tag { using type = void; };

      template<typename _Tp>
 struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };






    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr>
 __shared_count(_Ptr __p, false_type)
 : __shared_count(__p)
 { }

      template<typename _Ptr>
 __shared_count(_Ptr __p, true_type)
 : __shared_count(__p, __sp_array_delete{}, allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter,
        typename = typename __not_alloc_shared_tag<_Deleter>::type>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc,
        typename = typename __not_alloc_shared_tag<_Deleter>::type>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   try
     {
       typename _Sp_cd_type::__allocator_type __a2(__a);
       auto __guard = std::__allocate_guarded(__a2);
       _Sp_cd_type* __mem = __guard.get();
       ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
       _M_pi = __mem;
       __guard = nullptr;
     }
   catch(...)
     {
       __d(__p);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
         _Args&&... __args)
 {
   using _Tp2 = __remove_cv_t<_Tp>;
   using _Sp_cp_type = _Sp_counted_ptr_inplace<_Tp2, _Alloc, _Lp>;
   typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
   auto __guard = std::__allocate_guarded(__a2);
   _Sp_cp_type* __mem = __guard.get();
   auto __pi = ::new (__mem)
     _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
   __guard = nullptr;
   _M_pi = __pi;
   __p = __pi->_M_ptr();
 }
# 1022 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);
#pragma GCC diagnostic pop



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {


   if (__r.get() == nullptr)
     return;

   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = __conditional_t<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);



   _Alloc_traits::construct(__a, __mem, __r.release(),
       std::forward<_Del>(__r.get_deleter()));
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != nullptr)
       __tmp->_M_add_ref_copy();
     if (_M_pi != nullptr)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;







      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(__weak_count&& __r) noexcept
      : _M_pi(__r._M_pi)
      { __r._M_pi = nullptr; }

      ~__weak_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
      }

      __weak_count&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(const __weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(__weak_count&& __r) noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __r._M_pi;
        __r._M_pi = nullptr;
 return *this;
      }

      void
      _M_swap(__weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;




      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept
    : _M_pi(__r._M_pi)
    {
      if (_M_pi && !_M_pi->_M_add_ref_lock_nothrow())
 _M_pi = nullptr;
    }





  template<typename _Yp_ptr, typename _Tp_ptr>
    struct __sp_compatible_with
    : false_type
    { };

  template<typename _Yp, typename _Tp>
    struct __sp_compatible_with<_Yp*, _Tp*>
    : is_convertible<_Yp*, _Tp*>::type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>
    : true_type
    { };


  template<typename _Up, size_t _Nm, typename _Yp, typename = void>
    struct __sp_is_constructible_arrN
    : false_type
    { };

  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>
    : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
    { };


  template<typename _Up, typename _Yp, typename = void>
    struct __sp_is_constructible_arr
    : false_type
    { };

  template<typename _Up, typename _Yp>
    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>
    : is_convertible<_Yp(*)[], _Up(*)[]>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible;


  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible<_Up[_Nm], _Yp>
    : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
    { };


  template<typename _Up, typename _Yp>
    struct __sp_is_constructible<_Up[], _Yp>
    : __sp_is_constructible_arr<_Up, _Yp>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible
    : is_convertible<_Yp*, _Tp*>::type
    { };


  template<typename _Tp>
    [[__gnu__::__always_inline__]]
    inline _Tp*
    __shared_ptr_deref(_Tp* __p)
    {
      do { if (std::__is_constant_evaluated() && !bool(__p != nullptr)) std::__glibcxx_assert_fail(); } while (false);
      return __p;
    }


  template<typename _Tp, _Lock_policy _Lp,
    bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
    class __shared_ptr_access
    {
    public:
      using element_type = _Tp;

      element_type&
      operator*() const noexcept
      { return *std::__shared_ptr_deref(_M_get()); }

      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, false, true>
    {
    public:
      using element_type = _Tp;

      element_type*
      operator->() const noexcept
      {
 auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
 ;
 return __ptr;
      }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, true, false>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;


      [[__deprecated__("shared_ptr<T[]>::operator* is absent from C++17")]]
      element_type&
      operator*() const noexcept
      { return *std::__shared_ptr_deref(_M_get()); }

      [[__deprecated__("shared_ptr<T[]>::operator-> is absent from C++17")]]
      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      element_type&
      operator[](ptrdiff_t __i) const noexcept
      {
 if constexpr (extent<_Tp>::value)
   do { if (std::__is_constant_evaluated() && !bool(__i < extent<_Tp>::value)) std::__glibcxx_assert_fail(); } while (false);
 return std::__shared_ptr_deref(_M_get())[__i];
      }
#pragma GCC diagnostic pop

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    : public __shared_ptr_access<_Tp, _Lp>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;

    private:

      template<typename _Yp>
 using _SafeConv
   = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;


      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __shared_ptr&>;


      template<typename _Yp, typename _Del, typename _Res = void,
        typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
 using _UniqCompatible = __enable_if_t<__and_<
   __sp_compatible_with<_Yp*, _Tp*>,
   is_convertible<_Ptr, element_type*>,
   is_move_constructible<_Del>
   >::value, _Res>;


      template<typename _Yp, typename _Del>
 using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;

    public:





      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Yp, typename = _SafeConv<_Yp>>
 explicit
 __shared_ptr(_Yp* __p)
 : _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 {
   static_assert( !is_void<_Yp>::value, "incomplete type" );
   static_assert( sizeof(_Yp) > 0, "incomplete type" );
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, std::move(__d))
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
 { }


      template<typename _Yp>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }


      template<typename _Yp>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = nullptr;
 }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = nullptr;
 }

      template<typename _Yp, typename = _Compatible<_Yp>>
 explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {


   _M_ptr = __r._M_ptr;
 }


      template<typename _Yp, typename _Del,
        typename = _UniqCompatible<_Yp, _Del>>
 __shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = std::__to_address(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }


    protected:

      template<typename _Tp1, typename _Del,
        typename enable_if<__and_<
   __not_<is_array<_Tp>>, is_array<_Tp1>,
          is_convertible<typename unique_ptr<_Tp1, _Del>::pointer, _Tp*>
        >::value, bool>::type = true>
 __shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = std::__to_address(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }
    public:



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop


      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp>
 _Assignable<_Yp>
 operator=(auto_ptr<_Yp>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }
#pragma GCC diagnostic pop


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Yp>
 _Assignable<_Yp>
 operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Yp, typename _Del>
 _UniqAssignable<_Yp, _Del>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Yp>
 _SafeConv<_Yp>
 reset(_Yp* __p)
 {

   do { if (std::__is_constant_evaluated() && !bool(__p == nullptr || __p != _M_ptr)) std::__glibcxx_assert_fail(); } while (false);
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Yp, typename _Deleter>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d)
 { __shared_ptr(__p, std::move(__d)).swap(*this); }

      template<typename _Yp, typename _Deleter, typename _Alloc>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }


      element_type*
      get() const noexcept
      { return _M_ptr; }


      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }


      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }


      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }


      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }
# 1704 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 { _M_enable_shared_from_this_with(_M_ptr); }

      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);
# 1738 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) noexcept
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:

      template<typename _Yp>
 using __esft_base_t = decltype(__enable_shared_from_this_base(
       std::declval<const __shared_count<_Lp>&>(),
       std::declval<_Yp*>()));


      template<typename _Yp, typename = void>
 struct __has_esft_base
 : false_type { };

      template<typename _Yp>
 struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>
 : __not_<is_array<_Tp>> { };

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp* __p) noexcept
 {
   if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
     __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 }

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<!__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp*) noexcept
 { }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      template<typename _Del, typename _Tp1>
 friend _Del* get_deleter(const shared_ptr<_Tp1>&) noexcept;
# 1795 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
      element_type* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }
# 1827 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a,
       const __shared_ptr<_Up, _Lp>& __b) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }



  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1937 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 1983 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __weak_ptr&>;

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
# 2019 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
      { __r._M_ptr = nullptr; }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
        { __r._M_ptr = nullptr; }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
 __weak_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = std::move(__r._M_refcount);
   __r._M_ptr = nullptr;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<_Tp, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 if (use_count() == 0)
   {
     _M_ptr = __ptr;
     _M_refcount = __refcount;
   }
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;




      element_type* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }
    };
#pragma GCC diagnostic pop

  template<>
    struct _Sp_owner_less<void, void>
    {
      template<typename _Tp, typename _Up>
 auto
 operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept
 -> decltype(__lhs.owner_before(__rhs))
 { return __lhs.owner_before(__rhs); }

      using is_transparent = void;
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }
# 2214 "/usr/include/c++/15/bits/shared_ptr_base.h" 3
    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      friend const __enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<_Lp>&,
         const __enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,
    typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      static_assert(!is_array<_Tp>::value, "make_shared<T[]> not supported");

      return __shared_ptr<_Tp, _Lp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,
    typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      {
 return hash<typename __shared_ptr<_Tp, _Lp>::element_type*>()(
     __s.get());
      }
    };


}
# 54 "/usr/include/c++/15/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }

  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }





  template<typename _Del, typename _Tp>
    inline _Del*
    get_deleter(const shared_ptr<_Tp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 111 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp>
    using _NonArray = __enable_if_t<!is_array<_Tp>::value, _Tp>;
# 174 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
      template<typename... _Args>
 using _Constructible = typename enable_if<
   is_constructible<__shared_ptr<_Tp>, _Args...>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&
 >::type;

    public:


      using element_type = typename __shared_ptr<_Tp>::element_type;
# 201 "/usr/include/c++/15/bits/shared_ptr.h" 3
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Yp, typename = _Constructible<_Yp*>>
 explicit
 shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
# 228 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter,
        typename = _Constructible<_Yp*, _Deleter>>
 shared_ptr(_Yp* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 246 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 265 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _Constructible<_Yp*, _Deleter, _Alloc>>
 shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 285 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 309 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Yp>
 shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 348 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 shared_ptr(const shared_ptr<_Yp>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
 shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 378 "/usr/include/c++/15/bits/shared_ptr.h" 3
      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 explicit shared_ptr(const weak_ptr<_Yp>& __r)
 : __shared_ptr<_Tp>(__r) { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
 shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop




      template<typename _Yp, typename _Del,
        typename = _Constructible<unique_ptr<_Yp, _Del>>>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }





      template<typename _Yp, typename _Del,
  _Constructible<unique_ptr<_Yp, _Del>, __sp_array_delete>* = 0>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r), __sp_array_delete()) { }






      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp>
 _Assignable<auto_ptr<_Yp>>
 operator=(auto_ptr<_Yp>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }
#pragma GCC diagnostic pop


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Yp>
 _Assignable<shared_ptr<_Yp>>
 operator=(shared_ptr<_Yp>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Yp, typename _Del>
 _Assignable<unique_ptr<_Yp, _Del>>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 { }

      template<typename _Yp, typename _Alloc, typename... _Args>
 friend shared_ptr<_NonArray<_Yp>>
 allocate_shared(const _Alloc&, _Args&&...);

      template<typename _Yp, typename... _Args>
 friend shared_ptr<_NonArray<_Yp>>
 make_shared(_Args&&...);
# 534 "/usr/include/c++/15/bits/shared_ptr.h" 3
      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };
# 552 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() == __b.get(); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }
# 579 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      using _Up_elt = typename shared_ptr<_Up>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__b < __a); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return (__b < __a); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return __a < nullptr; }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__a < __b); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }





  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }




  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 809 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
      template<typename _Arg>
 using _Constructible = typename enable_if<
   is_constructible<__weak_ptr<_Tp>, _Arg>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
 >::type;

    public:
      constexpr weak_ptr() noexcept = default;

      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 weak_ptr(const shared_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(const weak_ptr&) noexcept = default;

      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 weak_ptr(const weak_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(weak_ptr&&) noexcept = default;

      template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
 weak_ptr(weak_ptr<_Yp>&& __r) noexcept
 : __weak_ptr<_Tp>(std::move(__r)) { }

      weak_ptr&
      operator=(const weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<const weak_ptr<_Yp>&>
 operator=(const weak_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      weak_ptr&
      operator=(weak_ptr&& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<weak_ptr<_Yp>>
 operator=(weak_ptr<_Yp>&& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };
# 885 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp = void>
    struct owner_less;


  template<>
    struct owner_less<void> : _Sp_owner_less<void, void>
    { };


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };






  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }
# 955 "/usr/include/c++/15/bits/shared_ptr.h" 3
    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }


      friend const enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<>&,
         const enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable weak_ptr<_Tp> _M_weak_this;
    };
# 986 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }
# 1001 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }
# 1150 "/usr/include/c++/15/bits/shared_ptr.h" 3
  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      {
 return std::hash<typename shared_ptr<_Tp>::element_type*>()(__s.get());
      }
    };


  template<typename _Tp>
    constexpr bool __is_shared_ptr = false;
  template<typename _Tp>
    constexpr bool __is_shared_ptr<shared_ptr<_Tp>> = true;
# 1192 "/usr/include/c++/15/bits/shared_ptr.h" 3

}
# 83 "/usr/include/c++/15/memory" 2 3
# 1 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 1 3
# 33 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
# 1 "/usr/include/c++/15/bits/atomic_base.h" 1 3
# 39 "/usr/include/c++/15/bits/atomic_base.h" 3
# 1 "/usr/include/c++/15/bits/atomic_lockfree_defines.h" 1 3
# 40 "/usr/include/c++/15/bits/atomic_base.h" 2 3
# 50 "/usr/include/c++/15/bits/atomic_base.h" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 51 "/usr/include/c++/15/bits/atomic_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 82 "/usr/include/c++/15/bits/atomic_base.h" 3
  enum memory_order : int
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    };



  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };


  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod) noexcept
  {
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod) noexcept
  {
    return memory_order(int(__m) & int(__mod));
  }




  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | __memory_order_modifier(__m & __memory_order_modifier_mask));
  }

  constexpr bool
  __is_valid_cmpexch_failure_order(memory_order __m) noexcept
  {
    return (__m & __memory_order_mask) != memory_order_release
 && (__m & __memory_order_mask) != memory_order_acq_rel;
  }


  template<typename _IntTp>
    struct __atomic_base;



  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(int(__m)); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(int(__m)); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }
# 172 "/usr/include/c++/15/bits/atomic_base.h" 3
  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 197 "/usr/include/c++/15/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i ;
  };

  }






  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, int(__m));
    }
# 281 "/usr/include/c++/15/bits/atomic_base.h" 3
    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b __attribute__ ((__unused__))
 = __m & __memory_order_mask;
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

      __atomic_clear (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b __attribute__ ((__unused__))
 = __m & __memory_order_mask;
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

      __atomic_clear (&_M_i, int(__m));
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 337 "/usr/include/c++/15/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
      using value_type = _ITp;
      using difference_type = value_type;

    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i ;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, int(__m));
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }
# 628 "/usr/include/c++/15/bits/atomic_base.h" 3
      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p ;

      static constexpr ptrdiff_t
      _S_type_size(ptrdiff_t __d)
      { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;

 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, int(__m));
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
        int(__m1), int(__m2));
      }
# 928 "/usr/include/c++/15/bits/atomic_base.h" 3
      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _S_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _S_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _S_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _S_type_size(__d), int(__m)); }
    };

  namespace __atomic_impl
  {


    template<typename _Tp>
      constexpr bool
      __maybe_has_padding()
      {



 return !__has_unique_object_representations(_Tp)
   && !is_same<_Tp, float>::value && !is_same<_Tp, double>::value;



      }

    template<typename _Tp>
      inline __attribute__((__always_inline__)) constexpr _Tp*
      __clear_padding(_Tp& __val) noexcept
      {
 auto* __ptr = std::__addressof(__val);

 if (__atomic_impl::__maybe_has_padding<_Tp>())
   __builtin_clear_padding(__ptr);

 return __ptr;
      }


    template<typename _Tp>
      using _Val = typename remove_volatile<_Tp>::type;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"

    template<bool _AtomicRef = false, typename _Tp>
      inline __attribute__((__always_inline__)) bool
      __compare_exchange(_Tp& __val, _Val<_Tp>& __e, _Val<_Tp>& __i,
    bool __is_weak,
    memory_order __s, memory_order __f) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__f))) std::__glibcxx_assert_fail(); } while (false);

 using _Vp = _Val<_Tp>;
 _Tp* const __pval = std::__addressof(__val);

 if constexpr (!__atomic_impl::__maybe_has_padding<_Vp>())
   {
     return __atomic_compare_exchange(__pval, std::__addressof(__e),
          std::__addressof(__i), __is_weak,
          int(__s), int(__f));
   }
 else if constexpr (!_AtomicRef)
   {

     _Vp* const __pi = __atomic_impl::__clear_padding(__i);

     _Vp __exp = __e;

     _Vp* const __pexp = __atomic_impl::__clear_padding(__exp);



     if (__atomic_compare_exchange(__pval, __pexp, __pi,
       __is_weak, int(__s), int(__f)))
       return true;

     __builtin_memcpy(std::__addressof(__e), __pexp, sizeof(_Vp));
     return false;
   }
 else
   {

     _Vp* const __pi = __atomic_impl::__clear_padding(__i);


     _Vp __exp = __e;


     _Vp* const __pexp = __atomic_impl::__clear_padding(__exp);
# 1042 "/usr/include/c++/15/bits/atomic_base.h" 3
     while (true)
       {

  _Vp __orig = __exp;

  if (__atomic_compare_exchange(__pval, __pexp, __pi,
           __is_weak, int(__s), int(__f)))
    return true;


  _Vp __curr = __exp;


  if (__builtin_memcmp(__atomic_impl::__clear_padding(__orig),
         __atomic_impl::__clear_padding(__curr),
         sizeof(_Vp)))
    {

      __builtin_memcpy(std::__addressof(__e), __pexp,
         sizeof(_Vp));
      return false;
    }
       }
   }
      }
#pragma GCC diagnostic pop
  }
# 2105 "/usr/include/c++/15/bits/atomic_base.h" 3

}
# 34 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 2 3
# 62 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;


    explicit
    _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;



  };
# 101 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>*)
    {

      return __gthread_active_p() == 0;



    }

  template<typename _Tp>
   
    inline bool
    atomic_is_lock_free(const shared_ptr<_Tp>* __p)
    { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }
# 130 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_load(const shared_ptr<_Tp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }
# 170 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    inline void
    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp>
   
    inline void
    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline void
    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline void
    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }
# 211 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,
        __shared_ptr<_Tp, _Lp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }
# 264 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    bool
    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
         shared_ptr<_Tp>* __v,
         shared_ptr<_Tp> __w,
         memory_order,
         memory_order)
    {
      shared_ptr<_Tp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<shared_ptr<_Tp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp>
   
    inline bool
    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp>
   
    inline bool
    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
       shared_ptr<_Tp>* __v,
       shared_ptr<_Tp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp>
   
    inline bool
    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    bool
    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,
         __shared_ptr<_Tp, _Lp>* __v,
         __shared_ptr<_Tp, _Lp> __w,
         memory_order,
         memory_order)
    {
      __shared_ptr<_Tp, _Lp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<__shared_ptr<_Tp, _Lp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp>* __v,
     __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }
# 868 "/usr/include/c++/15/bits/shared_ptr_atomic.h" 3

}
# 84 "/usr/include/c++/15/memory" 2 3




# 1 "/usr/include/c++/15/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/15/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/15/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } ;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/c++/15/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 118 "/usr/include/c++/15/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 130 "/usr/include/c++/15/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 141 "/usr/include/c++/15/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 158 "/usr/include/c++/15/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 176 "/usr/include/c++/15/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 186 "/usr/include/c++/15/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 do { if (std::__is_constant_evaluated() && !bool(_M_ptr != 0)) std::__glibcxx_assert_fail(); } while (false);
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 do { if (std::__is_constant_evaluated() && !bool(_M_ptr != 0)) std::__glibcxx_assert_fail(); } while (false);
 return _M_ptr;
      }
# 216 "/usr/include/c++/15/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 230 "/usr/include/c++/15/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 245 "/usr/include/c++/15/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 270 "/usr/include/c++/15/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } ;



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } ;



  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1, typename>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {
     
      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      _M_enable_shared_from_this_with(__tmp);
    }

  template<typename _Tp>
  template<typename _Tp1, typename>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }


  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }


#pragma GCC diagnostic pop


}
# 89 "/usr/include/c++/15/memory" 2 3
# 118 "/usr/include/c++/15/memory" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 119 "/usr/include/c++/15/memory" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 139 "/usr/include/c++/15/memory" 3
enum class pointer_safety { relaxed, preferred, strict };


inline void
declare_reachable(void*) { }


template <typename _Tp>
  inline _Tp*
  undeclare_reachable(_Tp* __p) { return __p; }


inline void
declare_no_pointers(char*, size_t) { }


inline void
undeclare_no_pointers(char*, size_t) { }


inline pointer_safety
get_pointer_safety() noexcept { return pointer_safety::relaxed; }



}
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/addressof.hpp" 2





# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/addressof.hpp"
namespace asio {
namespace detail {


using std::addressof;




}
}
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp" 2

namespace asio {
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp"
inline void* asio_handler_allocate(
    std::size_t size, ...);
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp"
inline void asio_handler_deallocate(
    void* pointer, std::size_t size, ...);

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/call_stack.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/call_stack.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/tss_ptr.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/tss_ptr.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/keyword_tss_ptr.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/keyword_tss_ptr.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/keyword_tss_ptr.hpp" 2

namespace asio {
namespace detail {

template <typename T>
class keyword_tss_ptr
  : private noncopyable
{
public:

  keyword_tss_ptr()
  {
  }


  ~keyword_tss_ptr()
  {
  }


  operator T*() const
  {
    return value_;
  }


  void operator=(T* value)
  {
    value_ = value;
  }

private:
  static __thread T* value_;
};

template <typename T>
__thread T* keyword_tss_ptr<T>::value_;

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/keyword_tss_ptr.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/tss_ptr.hpp" 2
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/tss_ptr.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/tss_ptr.hpp" 2

namespace asio {
namespace detail {

template <typename T>
class tss_ptr



  : public keyword_tss_ptr<T>





{
public:
  void operator=(T* value)
  {



    keyword_tss_ptr<T>::operator=(value);





  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/tss_ptr.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/call_stack.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/call_stack.hpp" 2

namespace asio {
namespace detail {



template <typename Key, typename Value = unsigned char>
class call_stack
{
public:

  class context
    : private noncopyable
  {
  public:

    explicit context(Key* k)
      : key_(k),
        next_(call_stack<Key, Value>::top_)
    {
      value_ = reinterpret_cast<unsigned char*>(this);
      call_stack<Key, Value>::top_ = this;
    }


    context(Key* k, Value& v)
      : key_(k),
        value_(&v),
        next_(call_stack<Key, Value>::top_)
    {
      call_stack<Key, Value>::top_ = this;
    }


    ~context()
    {
      call_stack<Key, Value>::top_ = next_;
    }


    Value* next_by_key() const
    {
      context* elem = next_;
      while (elem)
      {
        if (elem->key_ == key_)
          return elem->value_;
        elem = elem->next_;
      }
      return 0;
    }

  private:
    friend class call_stack<Key, Value>;


    Key* key_;


    Value* value_;


    context* next_;
  };

  friend class context;



  static Value* contains(Key* k)
  {
    context* elem = top_;
    while (elem)
    {
      if (elem->key_ == k)
        return elem->value_;
      elem = elem->next_;
    }
    return 0;
  }


  static Value* top()
  {
    context* elem = top_;
    return elem ? elem->value_ : 0;
  }

private:

  static tss_ptr<context> top_;
};

template <typename Key, typename Value>
tss_ptr<typename call_stack<Key, Value>::context>
call_stack<Key, Value>::top_;

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 124 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/call_stack.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_thread_info.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_thread_info.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/op_queue.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/op_queue.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/op_queue.hpp" 2

namespace asio {
namespace detail {

template <typename Operation>
class op_queue;

class op_queue_access
{
public:
  template <typename Operation>
  static Operation* next(Operation* o)
  {
    return static_cast<Operation*>(o->next_);
  }

  template <typename Operation1, typename Operation2>
  static void next(Operation1*& o1, Operation2* o2)
  {
    o1->next_ = o2;
  }

  template <typename Operation>
  static void destroy(Operation* o)
  {
    o->destroy();
  }

  template <typename Operation>
  static Operation*& front(op_queue<Operation>& q)
  {
    return q.front_;
  }

  template <typename Operation>
  static Operation*& back(op_queue<Operation>& q)
  {
    return q.back_;
  }
};

template <typename Operation>
class op_queue
  : private noncopyable
{
public:

  op_queue()
    : front_(0),
      back_(0)
  {
  }


  ~op_queue()
  {
    while (Operation* op = front_)
    {
      pop();
      op_queue_access::destroy(op);
    }
  }


  Operation* front()
  {
    return front_;
  }


  void pop()
  {
    if (front_)
    {
      Operation* tmp = front_;
      front_ = op_queue_access::next(front_);
      if (front_ == 0)
        back_ = 0;
      op_queue_access::next(tmp, static_cast<Operation*>(0));
    }
  }


  void push(Operation* h)
  {
    op_queue_access::next(h, static_cast<Operation*>(0));
    if (back_)
    {
      op_queue_access::next(back_, h);
      back_ = h;
    }
    else
    {
      front_ = back_ = h;
    }
  }



  template <typename OtherOperation>
  void push(op_queue<OtherOperation>& q)
  {
    if (Operation* other_front = op_queue_access::front(q))
    {
      if (back_)
        op_queue_access::next(back_, other_front);
      else
        front_ = other_front;
      back_ = op_queue_access::back(q);
      op_queue_access::front(q) = 0;
      op_queue_access::back(q) = 0;
    }
  }


  bool empty() const
  {
    return front_ == 0;
  }

private:
  friend class op_queue_access;


  Operation* front_;


  Operation* back_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/op_queue.hpp" 2
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_thread_info.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp"
# 1 "/usr/include/c++/15/climits" 1 3
# 47 "/usr/include/c++/15/climits" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/syslimits.h" 1 3 4






#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 1 3 4
# 210 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 195 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 196 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 204 "/usr/include/limits.h" 2 3 4
# 211 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 2 3 4
# 10 "/usr/lib/gcc/x86_64-linux-gnu/15/include/syslimits.h" 2 3 4
#pragma GCC diagnostic pop
# 35 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 2 3 4
# 48 "/usr/include/c++/15/climits" 2 3

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
# 64 "/usr/include/c++/15/climits" 3
#pragma GCC diagnostic pop
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp" 2


# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp"
namespace asio {
namespace detail {

class thread_info_base
  : private noncopyable
{
public:
  thread_info_base()
    : reusable_memory_(0)
  {
  }

  ~thread_info_base()
  {
    if (reusable_memory_)
      ::operator delete(reusable_memory_);
  }

  static void* allocate(thread_info_base* this_thread, std::size_t size)
  {
    if (this_thread && this_thread->reusable_memory_)
    {
      void* const pointer = this_thread->reusable_memory_;
      this_thread->reusable_memory_ = 0;

      unsigned char* const mem = static_cast<unsigned char*>(pointer);
      if (static_cast<std::size_t>(mem[0]) >= size)
      {
        mem[size] = mem[0];
        return pointer;
      }

      ::operator delete(pointer);
    }

    void* const pointer = ::operator new(size + 1);
    unsigned char* const mem = static_cast<unsigned char*>(pointer);
    mem[size] = (size <= 
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp" 3 4
                        (0x7f * 2 + 1)
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp"
                                 ) ? static_cast<unsigned char>(size) : 0;
    return pointer;
  }

  static void deallocate(thread_info_base* this_thread,
      void* pointer, std::size_t size)
  {
    if (size <= 
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp" 3 4
               (0x7f * 2 + 1)
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp"
                        )
    {
      if (this_thread && this_thread->reusable_memory_ == 0)
      {
        unsigned char* const mem = static_cast<unsigned char*>(pointer);
        mem[0] = mem[size];
        this_thread->reusable_memory_ = pointer;
        return;
      }
    }

    ::operator delete(pointer);
  }

private:
  void* reusable_memory_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 90 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread_info_base.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_thread_info.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_thread_info.hpp" 2

namespace asio {
namespace detail {

class task_io_service;
class task_io_service_operation;

struct task_io_service_thread_info : public thread_info_base
{
  op_queue<task_io_service_operation> private_op_queue;
  long private_outstanding_work;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_thread_info.hpp" 2
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp" 2

namespace asio {





void* asio_handler_allocate(std::size_t size, ...)
{





  typedef detail::task_io_service io_service_impl;
  typedef detail::task_io_service_thread_info thread_info;

  typedef detail::call_stack<io_service_impl, thread_info> call_stack;
  return thread_info::allocate(call_stack::top(), size);



}

void asio_handler_deallocate(void* pointer, std::size_t size, ...)
{





  typedef detail::task_io_service io_service_impl;
  typedef detail::task_io_service_thread_info thread_info;

  typedef detail::call_stack<io_service_impl, thread_info> call_stack;
  thread_info::deallocate(call_stack::top(), pointer, size);




}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/handler_alloc_hook.ipp" 2
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp" 2




namespace asio_handler_alloc_helpers {

template <typename Handler>
inline void* allocate(std::size_t s, Handler& h)
{



  using asio::asio_handler_allocate;
  return asio_handler_allocate(s, asio::detail::addressof(h));

}

template <typename Handler>
inline void deallocate(void* p, std::size_t s, Handler& h)
{



  using asio::asio_handler_deallocate;
  asio_handler_deallocate(p, s, asio::detail::addressof(h));

}

}
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_alloc_helpers.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_cont_helpers.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_cont_helpers.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_continuation_hook.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_continuation_hook.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_continuation_hook.hpp" 2

namespace asio {
# 45 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_continuation_hook.hpp"
inline bool asio_handler_is_continuation(...)
{
  return false;
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_continuation_hook.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_cont_helpers.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_cont_helpers.hpp" 2




namespace asio_handler_cont_helpers {

template <typename Context>
inline bool is_continuation(Context& context)
{



  using asio::asio_handler_is_continuation;
  return asio_handler_is_continuation(
      asio::detail::addressof(context));

}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_cont_helpers.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_invoke_helpers.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_invoke_helpers.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_invoke_hook.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_invoke_hook.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_invoke_hook.hpp" 2

namespace asio {
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_invoke_hook.hpp"
template <typename Function>
inline void asio_handler_invoke(Function& function, ...)
{
  function();
}


template <typename Function>
inline void asio_handler_invoke(const Function& function, ...)
{
  Function tmp(function);
  tmp();
}



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_invoke_hook.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_invoke_helpers.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_invoke_helpers.hpp" 2




namespace asio_handler_invoke_helpers {

template <typename Function, typename Context>
inline void invoke(Function& function, Context& context)
{




  using asio::asio_handler_invoke;
  asio_handler_invoke(function, asio::detail::addressof(context));

}

template <typename Function, typename Context>
inline void invoke(const Function& function, Context& context)
{




  using asio::asio_handler_invoke;
  asio_handler_invoke(function, asio::detail::addressof(context));

}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_invoke_helpers.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp" 2

namespace asio {
namespace detail {

template <typename Handler, typename Arg1>
class binder1
{
public:
  binder1(const Handler& handler, const Arg1& arg1)
    : handler_(handler),
      arg1_(arg1)
  {
  }

  binder1(Handler& handler, const Arg1& arg1)
    : handler_(static_cast<Handler&&>(handler)),
      arg1_(arg1)
  {
  }

  void operator()()
  {
    handler_(static_cast<const Arg1&>(arg1_));
  }

  void operator()() const
  {
    handler_(arg1_);
  }


  Handler handler_;
  Arg1 arg1_;
};

template <typename Handler, typename Arg1>
inline void* asio_handler_allocate(std::size_t size,
    binder1<Handler, Arg1>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->handler_);
}

template <typename Handler, typename Arg1>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    binder1<Handler, Arg1>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->handler_);
}

template <typename Handler, typename Arg1>
inline bool asio_handler_is_continuation(
    binder1<Handler, Arg1>* this_handler)
{
  return asio_handler_cont_helpers::is_continuation(
      this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1>
inline void asio_handler_invoke(Function& function,
    binder1<Handler, Arg1>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1>
inline void asio_handler_invoke(const Function& function,
    binder1<Handler, Arg1>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Handler, typename Arg1>
inline binder1<Handler, Arg1> bind_handler(Handler handler,
    const Arg1& arg1)
{
  return binder1<Handler, Arg1>(handler, arg1);
}

template <typename Handler, typename Arg1, typename Arg2>
class binder2
{
public:
  binder2(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
    : handler_(handler),
      arg1_(arg1),
      arg2_(arg2)
  {
  }

  binder2(Handler& handler, const Arg1& arg1, const Arg2& arg2)
    : handler_(static_cast<Handler&&>(handler)),
      arg1_(arg1),
      arg2_(arg2)
  {
  }

  void operator()()
  {
    handler_(static_cast<const Arg1&>(arg1_),
        static_cast<const Arg2&>(arg2_));
  }

  void operator()() const
  {
    handler_(arg1_, arg2_);
  }


  Handler handler_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Handler, typename Arg1, typename Arg2>
inline void* asio_handler_allocate(std::size_t size,
    binder2<Handler, Arg1, Arg2>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    binder2<Handler, Arg1, Arg2>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2>
inline bool asio_handler_is_continuation(
    binder2<Handler, Arg1, Arg2>* this_handler)
{
  return asio_handler_cont_helpers::is_continuation(
      this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2>
inline void asio_handler_invoke(Function& function,
    binder2<Handler, Arg1, Arg2>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2>
inline void asio_handler_invoke(const Function& function,
    binder2<Handler, Arg1, Arg2>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2>
inline binder2<Handler, Arg1, Arg2> bind_handler(Handler handler,
    const Arg1& arg1, const Arg2& arg2)
{
  return binder2<Handler, Arg1, Arg2>(handler, arg1, arg2);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3>
class binder3
{
public:
  binder3(const Handler& handler, const Arg1& arg1, const Arg2& arg2,
      const Arg3& arg3)
    : handler_(handler),
      arg1_(arg1),
      arg2_(arg2),
      arg3_(arg3)
  {
  }

  binder3(Handler& handler, const Arg1& arg1, const Arg2& arg2,
      const Arg3& arg3)
    : handler_(static_cast<Handler&&>(handler)),
      arg1_(arg1),
      arg2_(arg2),
      arg3_(arg3)
  {
  }

  void operator()()
  {
    handler_(static_cast<const Arg1&>(arg1_),
        static_cast<const Arg2&>(arg2_),
        static_cast<const Arg3&>(arg3_));
  }

  void operator()() const
  {
    handler_(arg1_, arg2_, arg3_);
  }


  Handler handler_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Handler, typename Arg1, typename Arg2, typename Arg3>
inline void* asio_handler_allocate(std::size_t size,
    binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3>
inline bool asio_handler_is_continuation(
    binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
{
  return asio_handler_cont_helpers::is_continuation(
      this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2,
    typename Arg3>
inline void asio_handler_invoke(Function& function,
    binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2,
    typename Arg3>
inline void asio_handler_invoke(const Function& function,
    binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3>
inline binder3<Handler, Arg1, Arg2, Arg3> bind_handler(Handler handler,
    const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
{
  return binder3<Handler, Arg1, Arg2, Arg3>(handler, arg1, arg2, arg3);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4>
class binder4
{
public:
  binder4(const Handler& handler, const Arg1& arg1, const Arg2& arg2,
      const Arg3& arg3, const Arg4& arg4)
    : handler_(handler),
      arg1_(arg1),
      arg2_(arg2),
      arg3_(arg3),
      arg4_(arg4)
  {
  }

  binder4(Handler& handler, const Arg1& arg1, const Arg2& arg2,
      const Arg3& arg3, const Arg4& arg4)
    : handler_(static_cast<Handler&&>(handler)),
      arg1_(arg1),
      arg2_(arg2),
      arg3_(arg3),
      arg4_(arg4)
  {
  }

  void operator()()
  {
    handler_(static_cast<const Arg1&>(arg1_),
        static_cast<const Arg2&>(arg2_),
        static_cast<const Arg3&>(arg3_),
        static_cast<const Arg4&>(arg4_));
  }

  void operator()() const
  {
    handler_(arg1_, arg2_, arg3_, arg4_);
  }


  Handler handler_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4>
inline void* asio_handler_allocate(std::size_t size,
    binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4>
inline bool asio_handler_is_continuation(
    binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
{
  return asio_handler_cont_helpers::is_continuation(
      this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2,
    typename Arg3, typename Arg4>
inline void asio_handler_invoke(Function& function,
    binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2,
    typename Arg3, typename Arg4>
inline void asio_handler_invoke(const Function& function,
    binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4>
inline binder4<Handler, Arg1, Arg2, Arg3, Arg4> bind_handler(
    Handler handler, const Arg1& arg1, const Arg2& arg2,
    const Arg3& arg3, const Arg4& arg4)
{
  return binder4<Handler, Arg1, Arg2, Arg3, Arg4>(handler, arg1, arg2, arg3,
      arg4);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Arg5>
class binder5
{
public:
  binder5(const Handler& handler, const Arg1& arg1, const Arg2& arg2,
      const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
    : handler_(handler),
      arg1_(arg1),
      arg2_(arg2),
      arg3_(arg3),
      arg4_(arg4),
      arg5_(arg5)
  {
  }

  binder5(Handler& handler, const Arg1& arg1, const Arg2& arg2,
      const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
    : handler_(static_cast<Handler&&>(handler)),
      arg1_(arg1),
      arg2_(arg2),
      arg3_(arg3),
      arg4_(arg4),
      arg5_(arg5)
  {
  }

  void operator()()
  {
    handler_(static_cast<const Arg1&>(arg1_),
        static_cast<const Arg2&>(arg2_),
        static_cast<const Arg3&>(arg3_),
        static_cast<const Arg4&>(arg4_),
        static_cast<const Arg5&>(arg5_));
  }

  void operator()() const
  {
    handler_(arg1_, arg2_, arg3_, arg4_, arg5_);
  }


  Handler handler_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
};

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Arg5>
inline void* asio_handler_allocate(std::size_t size,
    binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Arg5>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Arg5>
inline bool asio_handler_is_continuation(
    binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
{
  return asio_handler_cont_helpers::is_continuation(
      this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2,
    typename Arg3, typename Arg4, typename Arg5>
inline void asio_handler_invoke(Function& function,
    binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Function, typename Handler, typename Arg1, typename Arg2,
    typename Arg3, typename Arg4, typename Arg5>
inline void asio_handler_invoke(const Function& function,
    binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->handler_);
}

template <typename Handler, typename Arg1, typename Arg2, typename Arg3,
    typename Arg4, typename Arg5>
inline binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5> bind_handler(
    Handler handler, const Arg1& arg1, const Arg2& arg2,
    const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
{
  return binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>(handler, arg1, arg2,
      arg3, arg4, arg5);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 488 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/bind_handler.hpp" 2
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wrapped_handler.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wrapped_handler.hpp" 2

namespace asio {
namespace detail {

struct is_continuation_delegated
{
  template <typename Dispatcher, typename Handler>
  bool operator()(Dispatcher&, Handler& handler) const
  {
    return asio_handler_cont_helpers::is_continuation(handler);
  }
};

struct is_continuation_if_running
{
  template <typename Dispatcher, typename Handler>
  bool operator()(Dispatcher& dispatcher, Handler&) const
  {
    return dispatcher.running_in_this_thread();
  }
};

template <typename Dispatcher, typename Handler,
    typename IsContinuation = is_continuation_delegated>
class wrapped_handler
{
public:
  typedef void result_type;

  wrapped_handler(Dispatcher dispatcher, Handler& handler)
    : dispatcher_(dispatcher),
      handler_(static_cast<Handler&&>(handler))
  {
  }


  wrapped_handler(const wrapped_handler& other)
    : dispatcher_(other.dispatcher_),
      handler_(other.handler_)
  {
  }

  wrapped_handler(wrapped_handler&& other)
    : dispatcher_(other.dispatcher_),
      handler_(static_cast<Handler&&>(other.handler_))
  {
  }


  void operator()()
  {
    dispatcher_.dispatch(static_cast<Handler&&>(handler_));
  }

  void operator()() const
  {
    dispatcher_.dispatch(handler_);
  }

  template <typename Arg1>
  void operator()(const Arg1& arg1)
  {
    dispatcher_.dispatch(detail::bind_handler(handler_, arg1));
  }

  template <typename Arg1>
  void operator()(const Arg1& arg1) const
  {
    dispatcher_.dispatch(detail::bind_handler(handler_, arg1));
  }

  template <typename Arg1, typename Arg2>
  void operator()(const Arg1& arg1, const Arg2& arg2)
  {
    dispatcher_.dispatch(detail::bind_handler(handler_, arg1, arg2));
  }

  template <typename Arg1, typename Arg2>
  void operator()(const Arg1& arg1, const Arg2& arg2) const
  {
    dispatcher_.dispatch(detail::bind_handler(handler_, arg1, arg2));
  }

  template <typename Arg1, typename Arg2, typename Arg3>
  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
  {
    dispatcher_.dispatch(detail::bind_handler(handler_, arg1, arg2, arg3));
  }

  template <typename Arg1, typename Arg2, typename Arg3>
  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const
  {
    dispatcher_.dispatch(detail::bind_handler(handler_, arg1, arg2, arg3));
  }

  template <typename Arg1, typename Arg2, typename Arg3, typename Arg4>
  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,
      const Arg4& arg4)
  {
    dispatcher_.dispatch(
        detail::bind_handler(handler_, arg1, arg2, arg3, arg4));
  }

  template <typename Arg1, typename Arg2, typename Arg3, typename Arg4>
  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,
      const Arg4& arg4) const
  {
    dispatcher_.dispatch(
        detail::bind_handler(handler_, arg1, arg2, arg3, arg4));
  }

  template <typename Arg1, typename Arg2, typename Arg3, typename Arg4,
      typename Arg5>
  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,
      const Arg4& arg4, const Arg5& arg5)
  {
    dispatcher_.dispatch(
        detail::bind_handler(handler_, arg1, arg2, arg3, arg4, arg5));
  }

  template <typename Arg1, typename Arg2, typename Arg3, typename Arg4,
      typename Arg5>
  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,
      const Arg4& arg4, const Arg5& arg5) const
  {
    dispatcher_.dispatch(
        detail::bind_handler(handler_, arg1, arg2, arg3, arg4, arg5));
  }


  Dispatcher dispatcher_;
  Handler handler_;
};

template <typename Handler, typename Context>
class rewrapped_handler
{
public:
  explicit rewrapped_handler(Handler& handler, const Context& context)
    : context_(context),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  explicit rewrapped_handler(const Handler& handler, const Context& context)
    : context_(context),
      handler_(handler)
  {
  }


  rewrapped_handler(const rewrapped_handler& other)
    : context_(other.context_),
      handler_(other.handler_)
  {
  }

  rewrapped_handler(rewrapped_handler&& other)
    : context_(static_cast<Context&&>(other.context_)),
      handler_(static_cast<Handler&&>(other.handler_))
  {
  }


  void operator()()
  {
    handler_();
  }

  void operator()() const
  {
    handler_();
  }


  Context context_;
  Handler handler_;
};

template <typename Dispatcher, typename Handler, typename IsContinuation>
inline void* asio_handler_allocate(std::size_t size,
    wrapped_handler<Dispatcher, Handler, IsContinuation>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->handler_);
}

template <typename Dispatcher, typename Handler, typename IsContinuation>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    wrapped_handler<Dispatcher, Handler, IsContinuation>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->handler_);
}

template <typename Dispatcher, typename Handler, typename IsContinuation>
inline bool asio_handler_is_continuation(
    wrapped_handler<Dispatcher, Handler, IsContinuation>* this_handler)
{
  return IsContinuation()(this_handler->dispatcher_, this_handler->handler_);
}

template <typename Function, typename Dispatcher,
    typename Handler, typename IsContinuation>
inline void asio_handler_invoke(Function& function,
    wrapped_handler<Dispatcher, Handler, IsContinuation>* this_handler)
{
  this_handler->dispatcher_.dispatch(
      rewrapped_handler<Function, Handler>(
        function, this_handler->handler_));
}

template <typename Function, typename Dispatcher,
    typename Handler, typename IsContinuation>
inline void asio_handler_invoke(const Function& function,
    wrapped_handler<Dispatcher, Handler, IsContinuation>* this_handler)
{
  this_handler->dispatcher_.dispatch(
      rewrapped_handler<Function, Handler>(
        function, this_handler->handler_));
}

template <typename Handler, typename Context>
inline void* asio_handler_allocate(std::size_t size,
    rewrapped_handler<Handler, Context>* this_handler)
{
  return asio_handler_alloc_helpers::allocate(
      size, this_handler->context_);
}

template <typename Handler, typename Context>
inline void asio_handler_deallocate(void* pointer, std::size_t size,
    rewrapped_handler<Handler, Context>* this_handler)
{
  asio_handler_alloc_helpers::deallocate(
      pointer, size, this_handler->context_);
}

template <typename Dispatcher, typename Context>
inline bool asio_handler_is_continuation(
    rewrapped_handler<Dispatcher, Context>* this_handler)
{
  return asio_handler_cont_helpers::is_continuation(
      this_handler->context_);
}

template <typename Function, typename Handler, typename Context>
inline void asio_handler_invoke(Function& function,
    rewrapped_handler<Handler, Context>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->context_);
}

template <typename Function, typename Handler, typename Context>
inline void asio_handler_invoke(const Function& function,
    rewrapped_handler<Handler, Context>* this_handler)
{
  asio_handler_invoke_helpers::invoke(
      function, this_handler->context_);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 290 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wrapped_handler.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp"
# 1 "/usr/include/c++/15/system_error" 1 3
# 43 "/usr/include/c++/15/system_error" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/error_constants.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/15/bits/error_constants.h" 3

# 36 "/usr/include/x86_64-linux-gnu/c++/15/bits/error_constants.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,




      wrong_protocol_type = 91
    };


}
# 44 "/usr/include/c++/15/system_error" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{






  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 84 "/usr/include/c++/15/system_error" 3
inline namespace _V2 {
# 108 "/usr/include/c++/15/system_error" 3
  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;


    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:

    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 146 "/usr/include/c++/15/system_error" 3
  public:

    virtual error_condition
    default_error_condition(int __i) const noexcept;


    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;


    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;


    [[__nodiscard__]]
    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }
# 172 "/usr/include/c++/15/system_error" 3
    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }

  };




  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  generic_category() noexcept;


  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  system_category() noexcept;



}





namespace __adl_only
{
  void make_error_code() = delete;
  void make_error_condition() = delete;
}
# 225 "/usr/include/c++/15/system_error" 3
  class error_code
  {
    template<typename _ErrorCodeEnum>
      using _Check
 = __enable_if_t<is_error_code_enum<_ErrorCodeEnum>::value>;

  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }


    template<typename _ErrorCodeEnum,
      typename = _Check<_ErrorCodeEnum>>
      error_code(_ErrorCodeEnum __e) noexcept
      {
 using __adl_only::make_error_code;
 *this = make_error_code(__e);
      }

    error_code(const error_code&) = default;
    error_code& operator=(const error_code&) = default;

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    [[__nodiscard__]]
    int
    value() const noexcept { return _M_value; }


    [[__nodiscard__]]
    const error_category&
    category() const noexcept { return *_M_cat; }


    error_condition
    default_error_condition() const noexcept;


    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }


    [[__nodiscard__]]
    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };
# 302 "/usr/include/c++/15/system_error" 3
  [[__nodiscard__]]
  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }
# 325 "/usr/include/c++/15/system_error" 3
  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }







  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }
# 356 "/usr/include/c++/15/system_error" 3
  class error_condition
  {
    template<typename _ErrorConditionEnum>
      using _Check
 = __enable_if_t<is_error_condition_enum<_ErrorConditionEnum>::value>;

  public:

    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }


    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }


    template<typename _ErrorConditionEnum,
      typename = _Check<_ErrorConditionEnum>>
      error_condition(_ErrorConditionEnum __e) noexcept
      {
 using __adl_only::make_error_condition;
 *this = make_error_condition(__e);
      }

    error_condition(const error_condition&) = default;
    error_condition& operator=(const error_condition&) = default;


    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    void
    clear() noexcept
    { assign(0, generic_category()); }




    [[__nodiscard__]]
    int
    value() const noexcept { return _M_value; }


    [[__nodiscard__]]
    const error_category&
    category() const noexcept { return *_M_cat; }


    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }


    [[__nodiscard__]]
    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };
# 435 "/usr/include/c++/15/system_error" 3
  [[__nodiscard__]]
  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }
# 449 "/usr/include/c++/15/system_error" 3
  [[__nodiscard__]]
  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return __lhs.category() == __rhs.category()
      && __lhs.value() == __rhs.value();
  }
# 465 "/usr/include/c++/15/system_error" 3
  [[__nodiscard__]]
  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return __lhs.category().equivalent(__lhs.value(), __rhs)
      || __rhs.category().equivalent(__lhs, __rhs.value());
  }
# 480 "/usr/include/c++/15/system_error" 3
  [[__nodiscard__]]
  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return __lhs.category() == __rhs.category()
      && __lhs.value() == __rhs.value();
  }
# 508 "/usr/include/c++/15/system_error" 3
  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }


  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }
# 558 "/usr/include/c++/15/system_error" 3
  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + (": " + error_code(__v, __ecat).message())),
      _M_code(__v, __ecat) { }


    system_error (const system_error &) = default;
    system_error &operator= (const system_error &) = default;


    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e.value());
 return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);
      }
    };
# 638 "/usr/include/c++/15/system_error" 3

}
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 2


# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp"
namespace asio {



typedef std::error_category error_category;
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp"
extern inline const error_category& system_category();



typedef std::error_code error_code;
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp"
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp"
# 1 "/usr/include/c++/15/cstring" 1 3
# 47 "/usr/include/c++/15/cstring" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 48 "/usr/include/c++/15/cstring" 2 3
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4


# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) noexcept (true)
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) noexcept (true)
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 115 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     noexcept (true) __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     noexcept (true) __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) noexcept (true) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     noexcept (true) __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     noexcept (true) __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) noexcept (true)
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) noexcept (true)
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     noexcept (true) __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     noexcept (true) __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) noexcept (true)
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) noexcept (true)
{
  return __builtin_strrchr (__s, __c);
}

}
# 281 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     noexcept (true) __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     noexcept (true) __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     noexcept (true) __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     noexcept (true) __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) noexcept (true)
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) noexcept (true)
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     noexcept (true) __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     noexcept (true) __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) noexcept (true)
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) noexcept (true)
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     noexcept (true) __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     noexcept (true) __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 389 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)))
    __attribute__ ((__access__ (__read_only__, 1, 2)))
    __attribute__ ((__access__ (__read_only__, 3, 4)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) noexcept (true);
# 444 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));




extern const char *strerrordesc_np (int __err) noexcept (true);

extern const char *strerrorname_np (int __err) noexcept (true);





extern char *strerror_l (int __errnum, locale_t __l) noexcept (true);



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     noexcept (true) __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     noexcept (true) __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) noexcept (true)
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) noexcept (true)
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     noexcept (true) __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     noexcept (true) __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) noexcept (true)
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) noexcept (true)
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) noexcept (true) __attribute__ ((__const__));





extern int ffsl (long int __l) noexcept (true) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     noexcept (true) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) noexcept (true);



extern const char *sigabbrev_np (int __sig) noexcept (true);


extern const char *sigdescr_np (int __sig) noexcept (true);



extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlcpy (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



extern size_t strlcat (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__read_write__, 1, 3)));




extern int strverscmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__read_write__, 1, 2)));







extern "C++" char *basename (char *__filename)
     noexcept (true) __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     noexcept (true) __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 552 "/usr/include/string.h" 3 4
}
# 49 "/usr/include/c++/15/cstring" 2 3
# 74 "/usr/include/c++/15/cstring" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;

  using ::strtok;

  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 127 "/usr/include/c++/15/cstring" 3

}
}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/local_free_on_block_exit.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 1
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
# 1 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/lib/linux/uapi/x86/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/lib/linux/uapi/x86/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 2 "/usr/lib/linux/uapi/x86/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 2 "/usr/lib/linux/uapi/x86/asm/ioctls.h" 2 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/lib/linux/uapi/x86/asm/ioctls.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4





extern int ioctl (int __fd, unsigned long int __request, ...) noexcept (true);
# 53 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4
}
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/poll.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/poll.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/poll.h" 2 3 4







typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };


extern "C" {
# 54 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 64 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    const struct timespec *__timeout,
    const __sigset_t *__ss)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 82 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
}
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
struct stat
  {



    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 74 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 89 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 99 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
  };



struct stat64
  {



    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 151 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];




  };
# 26 "/usr/include/x86_64-linux-gnu/bits/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) noexcept (true) __attribute__ ((__nonnull__ (2)));
# 240 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) noexcept (true) __attribute__ ((__nonnull__ (2)));
# 264 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 291 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 313 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 338 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 352 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) noexcept (true);





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) noexcept (true);




extern __mode_t getumask (void) noexcept (true);



extern int mkdir (const char *__path, __mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) noexcept (true) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (2)));






extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     noexcept (true);
# 452 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int futimens (int __fd, const struct timespec __times[2]) noexcept (true);
# 465 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u32 stx_dio_mem_align;
 __u32 stx_dio_offset_align;

 __u64 __spare3[12];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 62 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  noexcept (true) __attribute__ ((__nonnull__ (5)));

}
# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 466 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4


}
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 267 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 357 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 358 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 384 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    noexcept (true);






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 439 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) noexcept (true);





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 177 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 186 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 209 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 219 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 244 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 255 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 265 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 301 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) noexcept (true);
# 313 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) noexcept (true);
# 323 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 334 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 344 "/usr/include/fcntl.h" 3 4
}
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2






# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 181 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 182 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


struct __attribute__ ((__may_alias__)) sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 197 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct __attribute__ ((__may_alias__)) sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_SOCK_DEVMEM = 0x2000000,

    MSG_ZEROCOPY = 0x4000000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 319 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) noexcept (true);




extern __inline __attribute__ ((__gnu_inline__)) struct cmsghdr *
__attribute__ ((__leaf__)) __cmsg_nxthdr (struct msghdr *__mhdr, struct cmsghdr *__cmsg) noexcept (true)
{







  unsigned char * __msg_control_ptr = (unsigned char *) __mhdr->msg_control;
  unsigned char * __cmsg_ptr = (unsigned char *) __cmsg;

  size_t __size_needed = sizeof (struct cmsghdr)
                         + ((sizeof (size_t) - ((__cmsg->cmsg_len) & (sizeof (size_t) - 1))) & (sizeof (size_t) - 1));


  if ((size_t) __cmsg->cmsg_len < sizeof (struct cmsghdr))
    return (struct cmsghdr *) 0;



  if (((size_t)
         (__msg_control_ptr + __mhdr->msg_controllen - __cmsg_ptr)
       < __size_needed)
      || ((size_t)
            (__msg_control_ptr + __mhdr->msg_controllen - __cmsg_ptr
             - __size_needed)
          < __cmsg->cmsg_len))

    return (struct cmsghdr *) 0;


  __cmsg = (struct cmsghdr *) ((unsigned char *) __cmsg
          + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1)));
  return __cmsg;
}




enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02

    , SCM_SECURITY = 0x03

    , SCM_PIDFD = 0x04


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};




# 1 "/usr/lib/linux/uapi/x86/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4





# 1 "/usr/lib/linux/uapi/x86/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 2 "/usr/lib/linux/uapi/x86/asm/sockios.h" 2 3 4
# 7 "/usr/include/asm-generic/socket.h" 2 3 4
# 2 "/usr/lib/linux/uapi/x86/asm/socket.h" 2 3 4
# 393 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4






struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 34 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h" 1 3 4





struct osockaddr
{
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 90 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) noexcept (true);





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) noexcept (true);


extern int bind (int __fd, const struct sockaddr * __addr, socklen_t __len)
     noexcept (true);


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) noexcept (true);
# 126 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) noexcept (true);






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, const struct sockaddr * __addr,
         socklen_t __addr_len);
# 163 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);
# 174 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);
# 195 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);
# 216 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);
# 235 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);
# 255 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) noexcept (true);
# 277 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) noexcept (true);
# 296 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int listen (int __fd, int __n) noexcept (true);
# 306 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, struct sockaddr *__restrict __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 324 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) noexcept (true);




extern int sockatmark (int __fd) noexcept (true);







extern int isfdtype (int __fd, int __fdtype) noexcept (true);
# 346 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
}
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/uio.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern "C" {
# 41 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__access__ (__read_only__, 2, 3)));
# 52 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__access__ (__read_only__, 2, 3)));
# 67 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset)
  __attribute__ ((__access__ (__read_only__, 2, 3)));
# 80 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset)
  __attribute__ ((__access__ (__read_only__, 2, 3)));
# 110 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset)
  __attribute__ ((__access__ (__read_only__, 2, 3)));
# 123 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset)
  __attribute__ ((__access__ (__read_only__, 2, 3)));







extern ssize_t preadv2 (int __fp, const struct iovec *__iovec, int __count,
   __off_t __offset, int ___flags)
  __attribute__ ((__access__ (__read_only__, 2, 3)));


extern ssize_t pwritev2 (int __fd, const struct iovec *__iodev, int __count,
    __off_t __offset, int __flags) ;
# 161 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64v2 (int __fp, const struct iovec *__iovec,
      int __count, __off64_t __offset,
      int ___flags)
  __attribute__ ((__access__ (__read_only__, 2, 3)));


extern ssize_t pwritev64v2 (int __fd, const struct iovec *__iodev,
       int __count, __off64_t __offset,
       int __flags)
  __attribute__ ((__access__ (__read_only__, 2, 3)));



}




# 1 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4
extern "C" {


extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  noexcept (true);


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  noexcept (true);
# 54 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/un.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/un.h" 3 4
extern "C" {


struct __attribute__ ((__may_alias__)) sockaddr_un
  {
    sa_family_t sun_family;
    char sun_path[108];
  };



# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/sys/un.h" 2 3 4







}
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 27 "/usr/include/netinet/in.h" 3 4
extern "C" {


typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/x86_64-linux-gnu/bits/in.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_L2TP = 115,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_ETHERNET = 143,

    IPPROTO_RAW = 255,

    IPPROTO_SMC = 256,

    IPPROTO_MPTCP = 262,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 223 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];
 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];
      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 249 "/usr/include/netinet/in.h" 3 4
struct __attribute__ ((__may_alias__)) sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr)
      - (sizeof (unsigned short int))
      - sizeof (in_port_t)
      - sizeof (struct in_addr)];
  };





struct __attribute__ ((__may_alias__)) sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };


struct ip_mreqn
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_address;


    int imr_ifindex;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 401 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) noexcept (true) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     noexcept (true) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     noexcept (true) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     noexcept (true) __attribute__ ((__const__));




# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 413 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 414 "/usr/include/netinet/in.h" 2 3 4
# 529 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) noexcept (true);


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     noexcept (true);
# 559 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     noexcept (true) __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) noexcept (true) __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) noexcept (true) __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     noexcept (true) __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     noexcept (true) __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     noexcept (true) __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) noexcept (true);
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) noexcept (true);
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     noexcept (true);
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) noexcept (true);
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) noexcept (true);
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) noexcept (true);
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) noexcept (true);



extern socklen_t inet6_rth_space (int __type, int __segments) noexcept (true);
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) noexcept (true);
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) noexcept (true);
extern int inet6_rth_reverse (const void *__in, void *__out) noexcept (true);
extern int inet6_rth_segments (const void *__bp) noexcept (true);
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     noexcept (true);





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     noexcept (true);


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     noexcept (true);



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) noexcept (true);


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) noexcept (true);


}
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2

# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 93 "/usr/include/netinet/tcp.h" 3 4
typedef uint32_t tcp_seq;




struct tcphdr
  {
    __extension__ union
    {
      struct
      {
 uint16_t th_sport;
 uint16_t th_dport;
 tcp_seq th_seq;
 tcp_seq th_ack;

 uint8_t th_x2:4;
 uint8_t th_off:4;





 uint8_t th_flags;






 uint16_t th_win;
 uint16_t th_sum;
 uint16_t th_urp;
      };
      struct
      {
 uint16_t source;
 uint16_t dest;
 uint32_t seq;
 uint32_t ack_seq;

 uint16_t res1:4;
 uint16_t doff:4;
 uint16_t fin:1;
 uint16_t syn:1;
 uint16_t rst:1;
 uint16_t psh:1;
 uint16_t ack:1;
 uint16_t urg:1;
 uint16_t res2:2;
# 156 "/usr/include/netinet/tcp.h" 3 4
 uint16_t window;
 uint16_t check;
 uint16_t urg_ptr;
      };
    };
};

enum
{
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT,
  TCP_SYN_RECV,
  TCP_FIN_WAIT1,
  TCP_FIN_WAIT2,
  TCP_TIME_WAIT,
  TCP_CLOSE,
  TCP_CLOSE_WAIT,
  TCP_LAST_ACK,
  TCP_LISTEN,
  TCP_CLOSING
};
# 217 "/usr/include/netinet/tcp.h" 3 4
enum tcp_ca_state
{
  TCP_CA_Open = 0,
  TCP_CA_Disorder = 1,
  TCP_CA_CWR = 2,
  TCP_CA_Recovery = 3,
  TCP_CA_Loss = 4
};

struct tcp_info
{
  uint8_t tcpi_state;
  uint8_t tcpi_ca_state;
  uint8_t tcpi_retransmits;
  uint8_t tcpi_probes;
  uint8_t tcpi_backoff;
  uint8_t tcpi_options;
  uint8_t tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

  uint32_t tcpi_rto;
  uint32_t tcpi_ato;
  uint32_t tcpi_snd_mss;
  uint32_t tcpi_rcv_mss;

  uint32_t tcpi_unacked;
  uint32_t tcpi_sacked;
  uint32_t tcpi_lost;
  uint32_t tcpi_retrans;
  uint32_t tcpi_fackets;


  uint32_t tcpi_last_data_sent;
  uint32_t tcpi_last_ack_sent;
  uint32_t tcpi_last_data_recv;
  uint32_t tcpi_last_ack_recv;


  uint32_t tcpi_pmtu;
  uint32_t tcpi_rcv_ssthresh;
  uint32_t tcpi_rtt;
  uint32_t tcpi_rttvar;
  uint32_t tcpi_snd_ssthresh;
  uint32_t tcpi_snd_cwnd;
  uint32_t tcpi_advmss;
  uint32_t tcpi_reordering;

  uint32_t tcpi_rcv_rtt;
  uint32_t tcpi_rcv_space;

  uint32_t tcpi_total_retrans;
};
# 277 "/usr/include/netinet/tcp.h" 3 4
struct tcp_md5sig
{
  struct sockaddr_storage tcpm_addr;
  uint8_t tcpm_flags;
  uint8_t tcpm_prefixlen;
  uint16_t tcpm_keylen;
  int tcpm_ifindex;
  uint8_t tcpm_key[80];
};


struct tcp_repair_opt
{
  uint32_t opt_code;
  uint32_t opt_val;
};


enum
{
  TCP_NO_QUEUE,
  TCP_RECV_QUEUE,
  TCP_SEND_QUEUE,
  TCP_QUEUES_NR,
};
# 320 "/usr/include/netinet/tcp.h" 3 4
struct tcp_cookie_transactions
{
  uint16_t tcpct_flags;
  uint8_t __tcpct_pad1;
  uint8_t tcpct_cookie_desired;
  uint16_t tcpct_s_data_desired;
  uint16_t tcpct_used;
  uint8_t tcpct_value[536U];
};


struct tcp_repair_window
{
  uint32_t snd_wl1;
  uint32_t snd_wnd;
  uint32_t max_window;
  uint32_t rcv_wnd;
  uint32_t rcv_wup;
};


struct tcp_zerocopy_receive
{
  uint64_t address;
  uint32_t length;
  uint32_t recv_skip_hint;
};
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2

# 1 "/usr/include/arpa/inet.h" 1 3 4
# 30 "/usr/include/arpa/inet.h" 3 4
extern "C" {



extern in_addr_t inet_addr (const char *__cp) noexcept (true);


extern in_addr_t inet_lnaof (struct in_addr __in) noexcept (true);



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     noexcept (true);


extern in_addr_t inet_netof (struct in_addr __in) noexcept (true);



extern in_addr_t inet_network (const char *__cp) noexcept (true);



extern char *inet_ntoa (struct in_addr __in) noexcept (true);




extern int inet_pton (int __af, const char *__restrict __cp,
        void *__restrict __buf) noexcept (true);




extern const char *inet_ntop (int __af, const void *__restrict __cp,
         char *__restrict __buf, socklen_t __len)
     noexcept (true);






extern int inet_aton (const char *__cp, struct in_addr *__inp) noexcept (true);



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) noexcept (true)
  __attribute__ ((__deprecated__ ("Use inet_ntop instead")));




extern char *inet_net_ntop (int __af, const void *__cp, int __bits,
       char *__buf, size_t __len) noexcept (true);




extern int inet_net_pton (int __af, const char *__cp,
     void *__buf, size_t __len) noexcept (true);




extern unsigned int inet_nsap_addr (const char *__cp,
        unsigned char *__buf, int __len) noexcept (true);



extern char *inet_nsap_ntoa (int __len, const unsigned char *__cp,
        char *__buf) noexcept (true);


}
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4

extern "C" {

struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) noexcept (true);
extern void endrpcent (void) noexcept (true);
extern struct rpcent *getrpcbyname (const char *__name) noexcept (true);
extern struct rpcent *getrpcbynumber (int __number) noexcept (true);
extern struct rpcent *getrpcent (void) noexcept (true);


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) noexcept (true);

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) noexcept (true);

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) noexcept (true);


}
# 33 "/usr/include/netdb.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 37 "/usr/include/netdb.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 41 "/usr/include/netdb.h" 2 3 4
# 51 "/usr/include/netdb.h" 3 4
extern "C" {







extern int *__h_errno_location (void) noexcept (true) __attribute__ ((__const__));
# 90 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) noexcept (true);


extern const char *hstrerror (int __err_num) noexcept (true);




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 153 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 165 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 196 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 235 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 306 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 372 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 393 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 410 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 421 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 449 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 461 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 477 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 489 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 503 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 513 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 526 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 537 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 549 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 558 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 660 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) noexcept (true);


extern const char *gai_strerror (int __ecode) noexcept (true);





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 690 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[],
     int __ent, struct sigevent *__restrict __sig);
# 701 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);
# 716 "/usr/include/netdb.h" 3 4
extern int gai_error (struct gaicb *__req) noexcept (true);


extern int gai_cancel (struct gaicb *__gaicbp) noexcept (true);


}
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/include/net/if.h" 1 3 4
# 33 "/usr/include/net/if.h" 3 4
struct if_nameindex
  {
    unsigned int if_index;
    char *if_name;
  };




enum
  {
    IFF_UP = 0x1,

    IFF_BROADCAST = 0x2,

    IFF_DEBUG = 0x4,

    IFF_LOOPBACK = 0x8,

    IFF_POINTOPOINT = 0x10,

    IFF_NOTRAILERS = 0x20,

    IFF_RUNNING = 0x40,

    IFF_NOARP = 0x80,

    IFF_PROMISC = 0x100,



    IFF_ALLMULTI = 0x200,


    IFF_MASTER = 0x400,

    IFF_SLAVE = 0x800,


    IFF_MULTICAST = 0x1000,


    IFF_PORTSEL = 0x2000,

    IFF_AUTOMEDIA = 0x4000,

    IFF_DYNAMIC = 0x8000

  };






struct ifaddr
  {
    struct sockaddr ifa_addr;
    union
      {
 struct sockaddr ifu_broadaddr;
 struct sockaddr ifu_dstaddr;
      } ifa_ifu;
    struct iface *ifa_ifp;
    struct ifaddr *ifa_next;
  };
# 111 "/usr/include/net/if.h" 3 4
struct ifmap
  {
    unsigned long int mem_start;
    unsigned long int mem_end;
    unsigned short int base_addr;
    unsigned char irq;
    unsigned char dma;
    unsigned char port;

  };





struct ifreq
  {


    union
      {
 char ifrn_name[16];
      } ifr_ifrn;

    union
      {
 struct sockaddr ifru_addr;
 struct sockaddr ifru_dstaddr;
 struct sockaddr ifru_broadaddr;
 struct sockaddr ifru_netmask;
 struct sockaddr ifru_hwaddr;
 short int ifru_flags;
 int ifru_ivalue;
 int ifru_mtu;
 struct ifmap ifru_map;
 char ifru_slave[16];
 char ifru_newname[16];
 __caddr_t ifru_data;
      } ifr_ifru;
  };
# 176 "/usr/include/net/if.h" 3 4
struct ifconf
  {
    int ifc_len;
    union
      {
 __caddr_t ifcu_buf;
 struct ifreq *ifcu_req;
      } ifc_ifcu;
  };





extern "C" {


extern unsigned int if_nametoindex (const char *__ifname) noexcept (true);
extern char *if_indextoname (unsigned int __ifindex,
        char __ifname[16]) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 2)));


extern struct if_nameindex *if_nameindex (void) noexcept (true);


extern void if_freenameindex (struct if_nameindex *__ptr) noexcept (true);

}
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/limits.h" 1 3 4
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 90 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2


# 91 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
namespace asio {
namespace detail {
# 281 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
typedef int socket_type;
const int invalid_socket = -1;
const int socket_error_retval = -1;
const int max_addr_v4_str_len = 
# 284 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 3 4
                               16
# 284 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
                                              ;

const int max_addr_v6_str_len = 
# 286 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 3 4
                               46 
# 286 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
                                                + 1 + 
# 286 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 3 4
                                                      16
# 286 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
                                                                 ;



typedef sockaddr socket_addr_type;
typedef in_addr in4_addr_type;
# 300 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
typedef ip_mreq in4_mreq_type;

typedef sockaddr_in sockaddr_in4_type;
typedef in6_addr in6_addr_type;
typedef ipv6_mreq in6_mreq_type;
typedef sockaddr_in6 sockaddr_in6_type;
typedef sockaddr_storage sockaddr_storage_type;
typedef sockaddr_un sockaddr_un_type;
typedef addrinfo addrinfo_type;
typedef ::linger linger_type;
typedef int ioctl_arg_type;
typedef uint32_t u_long_type;
typedef uint16_t u_short_type;

typedef ssize_t signed_size_type;
# 393 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
const int max_iov_len = 
# 393 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 3 4
                       1024
# 393 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp"
                              ;





const int custom_socket_option_level = 0xA5100000;
const int enable_connection_aborted_option = 1;
const int always_fail_option = 2;

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 407 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_types.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 1
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 2

namespace asio {
namespace detail {

class system_category : public error_category
{
public:
  const char* name() const noexcept(true)
  {
    return "asio.system";
  }

  std::string message(int value) const
  {
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp"
    if (value == 
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 3 4
                125
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp"
                         )
      return "Operation aborted.";





    char buf[256] = "";
    using namespace std;
    return strerror_result(strerror_r(value, buf, sizeof(buf)), buf);


  }

private:

  static const char* strerror_result(int, const char* s) { return s; }
  static const char* strerror_result(const char* s, const char*) { return s; }
};

}

const error_category& system_category()
{
  static detail::system_category instance;
  return instance;
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error_code.ipp" 2
# 186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2

namespace asio {

class io_service;
template <typename Service> Service& use_service(io_service& ios);
template <typename Service> void add_service(io_service& ios, Service* svc);
template <typename Service> bool has_service(io_service& ios);

namespace detail {




  typedef class task_io_service io_service_impl;

  class service_registry;
}
# 184 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
class io_service
  : private noncopyable
{
private:
  typedef detail::io_service_impl impl_type;




public:
  class work;
  friend class work;

  class id;

  class service;

  class strand;


  inline io_service();
# 213 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline explicit io_service(std::size_t concurrency_hint);
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline ~io_service();
# 275 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t run();
# 303 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t run(asio::error_code& ec);
# 319 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t run_one();
# 335 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t run_one(asio::error_code& ec);
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t poll();
# 359 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t poll(asio::error_code& ec);
# 371 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t poll_one();
# 383 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline std::size_t poll_one(asio::error_code& ec);
# 392 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline void stop();
# 404 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline bool stopped() const;
# 417 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline void reset();
# 440 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  template <typename CompletionHandler>
  typename ::asio::async_result< typename ::asio::handler_type<CompletionHandler, void ()>::type>::type
  dispatch(CompletionHandler&& handler);
# 466 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  template <typename CompletionHandler>
  typename ::asio::async_result< typename ::asio::handler_type<CompletionHandler, void ()>::type>::type
  post(CompletionHandler&& handler);
# 492 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  template <typename Handler>



  detail::wrapped_handler<io_service&, Handler>

  wrap(Handler handler);


  enum fork_event
  {

    fork_prepare,


    fork_parent,


    fork_child
  };
# 553 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  inline void notify_fork(asio::io_service::fork_event event);
# 566 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  template <typename Service>
  friend Service& use_service(io_service& ios);
# 586 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  template <typename Service>
  friend void add_service(io_service& ios, Service* svc);
# 598 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  template <typename Service>
  friend bool has_service(io_service& ios);

private:
# 610 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
  asio::detail::service_registry* service_registry_;


  impl_type& impl_;
};
# 626 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp"
class io_service::work
{
public:






  explicit work(asio::io_service& io_service);







  work(const work& other);







  ~work();


  asio::io_service& get_io_service();

private:

  void operator=(const work& other);


  detail::io_service_impl& io_service_impl_;
};


class io_service::id
  : private noncopyable
{
public:

  id() {}
};


class io_service::service
  : private noncopyable
{
public:

  asio::io_service& get_io_service();

protected:




  inline service(asio::io_service& owner);


  inline virtual ~service();

private:

  virtual void shutdown_service() = 0;







  inline virtual void fork_service(
      asio::io_service::fork_event event);

  friend class asio::detail::service_registry;
  struct key
  {
    key() : type_info_(0), id_(0) {}
    const std::type_info* type_info_;
    const asio::io_service::id* id_;
  } key_;

  asio::io_service& owner_;
  service* next_;
};


class service_already_exists
  : public std::logic_error
{
public:
  inline service_already_exists();
};



class invalid_service_owner
  : public std::logic_error
{
public:
  inline invalid_service_owner();
};

namespace detail {


template <typename Type>
class service_id
  : public asio::io_service::id
{
};


template <typename Type>
class service_base
  : public asio::io_service::service
{
public:
  static asio::detail::service_id<Type> id;


  service_base(asio::io_service& io_service)
    : asio::io_service::service(io_service)
  {
  }
};

template <typename Type>
asio::detail::service_id<Type> service_base<Type>::id;

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 764 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_type_requirements.hpp" 1
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_type_requirements.hpp"
namespace asio {
namespace detail {





template <typename Handler>
auto zero_arg_handler_test(Handler h, void*)
  -> decltype(
    sizeof(Handler(static_cast<const Handler&>(h))),
    ((h)()),
    char(0));

template <typename Handler>
char (&zero_arg_handler_test(Handler, ...))[2];

template <typename Handler, typename Arg1>
auto one_arg_handler_test(Handler h, Arg1* a1)
  -> decltype(
    sizeof(Handler(static_cast<const Handler&>(h))),
    ((h)(*a1)),
    char(0));

template <typename Handler>
char (&one_arg_handler_test(Handler h, ...))[2];

template <typename Handler, typename Arg1, typename Arg2>
auto two_arg_handler_test(Handler h, Arg1* a1, Arg2* a2)
  -> decltype(
    sizeof(Handler(static_cast<const Handler&>(h))),
    ((h)(*a1, *a2)),
    char(0));

template <typename Handler>
char (&two_arg_handler_test(Handler, ...))[2];
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_type_requirements.hpp"
template <typename T> T& lvref();
template <typename T> T& lvref(T);
template <typename T> const T& clvref();
template <typename T> const T& clvref(T);
template <typename T> char argbyv(T);

template <int>
struct handler_type_requirements
{
};
# 495 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_type_requirements.hpp"
}
}
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/mutex.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/mutex.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_lock.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_lock.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_lock.hpp" 2

namespace asio {
namespace detail {


template <typename Mutex>
class scoped_lock
  : private noncopyable
{
public:

  enum adopt_lock_t { adopt_lock };


  scoped_lock(Mutex& m, adopt_lock_t)
    : mutex_(m),
      locked_(true)
  {
  }


  explicit scoped_lock(Mutex& m)
    : mutex_(m)
  {
    mutex_.lock();
    locked_ = true;
  }


  ~scoped_lock()
  {
    if (locked_)
      mutex_.unlock();
  }


  void lock()
  {
    if (!locked_)
    {
      mutex_.lock();
      locked_ = true;
    }
  }


  void unlock()
  {
    if (locked_)
    {
      mutex_.unlock();
      locked_ = false;
    }
  }


  bool locked() const
  {
    return locked_;
  }


  Mutex& mutex()
  {
    return mutex_;
  }

private:

  Mutex& mutex_;


  bool locked_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_lock.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp" 2

namespace asio {
namespace detail {

class posix_event;

class posix_mutex
  : private noncopyable
{
public:
  typedef asio::detail::scoped_lock<posix_mutex> scoped_lock;


  inline posix_mutex();


  ~posix_mutex()
  {
    ::pthread_mutex_destroy(&mutex_);
  }


  void lock()
  {
    (void)::pthread_mutex_lock(&mutex_);
  }


  void unlock()
  {
    (void)::pthread_mutex_unlock(&mutex_);
  }

private:
  friend class posix_event;
  ::pthread_mutex_t mutex_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_error.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_error.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_error.hpp" 2

namespace asio {
namespace detail {

inline void do_throw_error(const asio::error_code& err);

inline void do_throw_error(const asio::error_code& err,
    const char* location);

inline void throw_error(const asio::error_code& err)
{
  if (err)
    do_throw_error(err);
}

inline void throw_error(const asio::error_code& err,
    const char* location)
{
  if (err)
    do_throw_error(err, location);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_error.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_error.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_exception.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_exception.hpp"
namespace asio {
namespace detail {






template <typename Exception>
void throw_exception(const Exception& e);





template <typename Exception>
void throw_exception(const Exception& e)
{
  throw e;
}




}
}
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/system_error.hpp" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/system_error.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/system_error.hpp" 2

namespace asio {



typedef std::system_error system_error;
# 127 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/system_error.hpp"
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 130 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/system_error.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp" 2

namespace asio {
namespace detail {

void do_throw_error(const asio::error_code& err)
{
  asio::system_error e(err);
  asio::detail::throw_exception(e);
}

void do_throw_error(const asio::error_code& err, const char* location)
{
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp"
  asio::system_error e(err, location);
  asio::detail::throw_exception(e);



}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/throw_error.ipp" 2
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/throw_error.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 1
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 2

namespace asio {
namespace error {

enum basic_errors
{

  access_denied = 
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                 13
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                          ,


  address_family_not_supported = 
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                                97
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                               ,


  address_in_use = 
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                  98
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                               ,


  already_connected = 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                     106
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                               ,


  already_started = 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                   114
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                              ,


  broken_pipe = 
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
               32

                               
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                              ,


  connection_aborted = 
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                      103
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                     ,


  connection_refused = 
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                      111
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                     ,


  connection_reset = 
# 95 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                    104
# 95 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                 ,


  bad_descriptor = 
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                  9
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                          ,


  fault = 
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
         14
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                  ,


  host_unreachable = 
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                    113
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                   ,


  in_progress = 
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
               115
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                             ,


  interrupted = 
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
               4
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                       ,


  invalid_argument = 
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                    22
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                             ,


  message_size = 
# 116 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                90
# 116 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                           ,


  name_too_long = 
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                 36
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                ,


  network_down = 
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                100
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                           ,


  network_reset = 
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                 102
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                             ,


  network_unreachable = 
# 128 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                       101
# 128 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                     ,


  no_descriptors = 
# 131 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                  24
# 131 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                           ,


  no_buffer_space = 
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                   105
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                             ,


  no_memory = 
# 137 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
             12

                                
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                               ,


  no_permission = 
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                 1

                               
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                              ,


  no_protocol_option = 
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                      92
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                    ,


  no_such_device = 
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                  19

                                
# 152 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                               ,


  not_connected = 
# 155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                 107
# 155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                            ,


  not_socket = 
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
              88
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                         ,


  operation_aborted = 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                     125

                                   
# 163 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                  ,


  operation_not_supported = 
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                           95
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                        ,


  shut_down = 
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
             108
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                         ,


  timed_out = 
# 172 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
             110
# 172 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                         ,


  try_again = 
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
             11

                                
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                               ,


  would_block = 
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
               11

# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
};

enum netdb_errors
{

  host_not_found = 
# 186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                  1
# 186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                  ,


  host_not_found_try_again = 
# 189 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                            2
# 189 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                                       ,


  no_data = 
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
           4
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                    ,


  no_recovery = 
# 195 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
               3

# 196 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
};

enum addrinfo_errors
{

  service_not_found = 
# 201 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                     -8

                                          
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
                                         ,


  socket_type_not_supported = 
# 206 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 3 4
                             -7



# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
};

enum misc_errors
{

  already_open = 1,


  eof,


  not_found,


  fd_set_failure
};

inline const asio::error_category& get_system_category()
{
  return asio::system_category();
}



extern inline
const asio::error_category& get_netdb_category();

extern inline
const asio::error_category& get_addrinfo_category();
# 253 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
extern inline
const asio::error_category& get_misc_category();

static const asio::error_category& system_category
  = asio::error::get_system_category();
static const asio::error_category& netdb_category
  = asio::error::get_netdb_category();
static const asio::error_category& addrinfo_category
  = asio::error::get_addrinfo_category();
static const asio::error_category& misc_category
  = asio::error::get_misc_category();

}
}


namespace std {

template<> struct is_error_code_enum<asio::error::basic_errors>
{
  static const bool value = true;
};

template<> struct is_error_code_enum<asio::error::netdb_errors>
{
  static const bool value = true;
};

template<> struct is_error_code_enum<asio::error::addrinfo_errors>
{
  static const bool value = true;
};

template<> struct is_error_code_enum<asio::error::misc_errors>
{
  static const bool value = true;
};

}


namespace asio {
namespace error {

inline asio::error_code make_error_code(basic_errors e)
{
  return asio::error_code(
      static_cast<int>(e), get_system_category());
}

inline asio::error_code make_error_code(netdb_errors e)
{
  return asio::error_code(
      static_cast<int>(e), get_netdb_category());
}

inline asio::error_code make_error_code(addrinfo_errors e)
{
  return asio::error_code(
      static_cast<int>(e), get_addrinfo_category());
}

inline asio::error_code make_error_code(misc_errors e)
{
  return asio::error_code(
      static_cast<int>(e), get_misc_category());
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 325 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 2
# 333 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error.ipp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error.ipp" 2

namespace asio {
namespace error {



namespace detail {

class netdb_category : public asio::error_category
{
public:
  const char* name() const noexcept(true)
  {
    return "asio.netdb";
  }

  std::string message(int value) const
  {
    if (value == error::host_not_found)
      return "Host not found (authoritative)";
    if (value == error::host_not_found_try_again)
      return "Host not found (non-authoritative), try again later";
    if (value == error::no_data)
      return "The query is valid, but it does not have associated data";
    if (value == error::no_recovery)
      return "A non-recoverable error occurred during database lookup";
    return "asio.netdb error";
  }
};

}

const asio::error_category& get_netdb_category()
{
  static detail::netdb_category instance;
  return instance;
}

namespace detail {

class addrinfo_category : public asio::error_category
{
public:
  const char* name() const noexcept(true)
  {
    return "asio.addrinfo";
  }

  std::string message(int value) const
  {
    if (value == error::service_not_found)
      return "Service not found";
    if (value == error::socket_type_not_supported)
      return "Socket type not supported";
    return "asio.addrinfo error";
  }
};

}

const asio::error_category& get_addrinfo_category()
{
  static detail::addrinfo_category instance;
  return instance;
}



namespace detail {

class misc_category : public asio::error_category
{
public:
  const char* name() const noexcept(true)
  {
    return "asio.misc";
  }

  std::string message(int value) const
  {
    if (value == error::already_open)
      return "Already open";
    if (value == error::eof)
      return "End of file";
    if (value == error::not_found)
      return "Element not found";
    if (value == error::fd_set_failure)
      return "The descriptor does not fit into the select call's fd_set";
    return "asio.misc error";
  }
};

}

const asio::error_category& get_misc_category()
{
  static detail::misc_category instance;
  return instance;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 127 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/error.ipp" 2
# 334 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp" 2

namespace asio {
namespace detail {

posix_mutex::posix_mutex()
{
  int error = ::pthread_mutex_init(&mutex_, 0);
  asio::error_code ec(error,
      asio::error::get_system_category());
  asio::detail::throw_error(ec, "mutex");
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 43 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_mutex.ipp" 2
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_mutex.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/mutex.hpp" 2






namespace asio {
namespace detail {






typedef posix_mutex mutex;




}
}
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 2

namespace asio {
namespace detail {

template <typename T>
class typeid_wrapper {};

class service_registry
  : private noncopyable
{
public:

  template <typename Service, typename Arg>
  service_registry(asio::io_service& o,
      Service* initial_service, Arg arg);


  inline ~service_registry();


  inline void notify_fork(asio::io_service::fork_event fork_ev);



  template <typename Service>
  Service& first_service();




  template <typename Service>
  Service& use_service();



  template <typename Service>
  void add_service(Service* new_service);


  template <typename Service>
  bool has_service() const;

private:

  inline static void init_key(
      asio::io_service::service::key& key,
      const asio::io_service::id& id);



  template <typename Service>
  static void init_key(asio::io_service::service::key& key,
      const asio::detail::service_id<Service>& );



  inline static bool keys_match(
      const asio::io_service::service::key& key1,
      const asio::io_service::service::key& key2);


  typedef asio::io_service::service*
    (*factory_type)(asio::io_service&);


  template <typename Service>
  static asio::io_service::service* create(
      asio::io_service& owner);


  inline static void destroy(
      asio::io_service::service* service);


  struct auto_service_ptr;
  friend struct auto_service_ptr;
  struct auto_service_ptr
  {
    asio::io_service::service* ptr_;
    ~auto_service_ptr() { destroy(ptr_); }
  };




  inline asio::io_service::service* do_use_service(
      const asio::io_service::service::key& key,
      factory_type factory);



  inline void do_add_service(
      const asio::io_service::service::key& key,
      asio::io_service::service* new_service);


  inline bool do_has_service(
      const asio::io_service::service::key& key) const;


  mutable asio::detail::mutex mutex_;


  asio::io_service& owner_;


  asio::io_service::service* first_service_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 138 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.hpp" 2

namespace asio {
namespace detail {

template <typename Service, typename Arg>
service_registry::service_registry(
    asio::io_service& o, Service*, Arg arg)
  : owner_(o),
    first_service_(new Service(o, arg))
{
  asio::io_service::service::key key;
  init_key(key, Service::id);
  first_service_->key_ = key;
  first_service_->next_ = 0;
}

template <typename Service>
Service& service_registry::first_service()
{
  return *static_cast<Service*>(first_service_);
}

template <typename Service>
Service& service_registry::use_service()
{
  asio::io_service::service::key key;
  init_key(key, Service::id);
  factory_type factory = &service_registry::create<Service>;
  return *static_cast<Service*>(do_use_service(key, factory));
}

template <typename Service>
void service_registry::add_service(Service* new_service)
{
  asio::io_service::service::key key;
  init_key(key, Service::id);
  return do_add_service(key, new_service);
}

template <typename Service>
bool service_registry::has_service() const
{
  asio::io_service::service::key key;
  init_key(key, Service::id);
  return do_has_service(key);
}


template <typename Service>
void service_registry::init_key(asio::io_service::service::key& key,
    const asio::detail::service_id<Service>& )
{
  key.type_info_ = &typeid(typeid_wrapper<Service>);
  key.id_ = 0;
}


template <typename Service>
asio::io_service::service* service_registry::create(
    asio::io_service& owner)
{
  return new Service(owner);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 87 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.hpp" 2
# 140 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp"
# 1 "/usr/include/c++/15/vector" 1 3
# 68 "/usr/include/c++/15/vector" 3
# 1 "/usr/include/c++/15/bits/stl_vector.h" 1 3
# 84 "/usr/include/c++/15/bits/stl_vector.h" 3

# 84 "/usr/include/c++/15/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl_data
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;


 _Vector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }



 _Vector_impl_data(_Vector_impl_data&& __x) noexcept
 : _M_start(__x._M_start), _M_finish(__x._M_finish),
   _M_end_of_storage(__x._M_end_of_storage)
 { __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }



 void
 _M_copy_data(_Vector_impl_data const& __x) noexcept
 {
   _M_start = __x._M_start;
   _M_finish = __x._M_finish;
   _M_end_of_storage = __x._M_end_of_storage;
 }


 void
 _M_swap_data(_Vector_impl_data& __x) noexcept
 {


   _Vector_impl_data __tmp;
   __tmp._M_copy_data(*this);
   _M_copy_data(__x);
   __x._M_copy_data(__tmp);
 }
      };

      struct _Vector_impl
 : public _Tp_alloc_type, public _Vector_impl_data
      {

 _Vector_impl() noexcept(is_nothrow_default_constructible<_Tp_alloc_type>::value)




 : _Tp_alloc_type()
 { }


 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a)
 { }





 _Vector_impl(_Vector_impl&& __x) noexcept
 : _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a))
 { }


 _Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 : _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 { }
# 300 "/usr/include/c++/15/bits/stl_vector.h" 3
      };

    public:
      typedef _Alloc allocator_type;

     
      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return this->_M_impl; }

     
      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return this->_M_impl; }

     
      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }


      _Vector_base() = default;




     
      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }



     
      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }


     
      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Vector_base&&) = default;



     
      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

     
      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


     
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }


     
      ~_Vector_base() noexcept
      {
 _M_deallocate(_M_impl._M_start,
        _M_impl._M_end_of_storage - _M_impl._M_start);
      }

    public:
      _Vector_impl _M_impl;

     
      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

     
      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    protected:

     
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
# 432 "/usr/include/c++/15/bits/stl_vector.h" 3
    };
# 457 "/usr/include/c++/15/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 470 "/usr/include/c++/15/bits/stl_vector.h" 3
      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
   "std::vector must have a non-const, non-volatile value_type");

      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
   "std::vector must have the same value_type as its allocator");



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    private:

      static constexpr bool
      _S_nothrow_relocate(true_type)
      {
 return noexcept(std::__relocate_a(std::declval<pointer>(),
       std::declval<pointer>(),
       std::declval<pointer>(),
       std::declval<_Tp_alloc_type&>()));
      }

      static constexpr bool
      _S_nothrow_relocate(false_type)
      { return false; }

      static constexpr bool
      _S_use_relocate()
      {



 return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
      }

      static pointer
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
       _Tp_alloc_type& __alloc, true_type) noexcept
      {
 return std::__relocate_a(__first, __last, __result, __alloc);
      }

      static pointer
      _S_do_relocate(pointer, pointer, pointer __result,
       _Tp_alloc_type&, false_type) noexcept
      { return __result; }

      static pointer
      _S_relocate(pointer __first, pointer __last, pointer __result,
    _Tp_alloc_type& __alloc) noexcept
      {




 using __do_it = __bool_constant<_S_use_relocate()>;
 return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});

      }


    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:







      vector() = default;
# 570 "/usr/include/c++/15/bits/stl_vector.h" 3
      explicit
     
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 584 "/usr/include/c++/15/bits/stl_vector.h" 3
      explicit
     
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(_S_check_init_len(__n, __a), __a)
      { _M_default_initialize(__n); }
# 598 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(_S_check_init_len(__n, __a), __a)
      { _M_fill_initialize(__n, __value); }
# 630 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 650 "/usr/include/c++/15/bits/stl_vector.h" 3
      vector(vector&&) noexcept = default;


     
      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }

    private:
     
      vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
      : _Base(__m, std::move(__rv))
      { }

     
      vector(vector&& __rv, const allocator_type& __m, false_type)
      : _Base(__m)
      {
 if (__rv.get_allocator() == __m)
   this->_M_impl._M_swap_data(__rv._M_impl);
 else if (!__rv.empty())
   {
     this->_M_create_storage(__rv.size());
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }

    public:

     
      vector(vector&& __rv, const __type_identity_t<allocator_type>& __m)
      noexcept( noexcept(
 vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
        std::declval<typename _Alloc_traits::is_always_equal>())) )
      : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
      { }
# 707 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize_n(__l.begin(), __l.end(), __l.size());
      }
# 733 "/usr/include/c++/15/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 {
# 751 "/usr/include/c++/15/bits/stl_vector.h" 3
   _M_range_initialize(__first, __last,
         std::__iterator_category(__first));
 }
# 799 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      ~vector() noexcept
      {
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 ;
      }
# 816 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      vector&
      operator=(const vector& __x);
# 831 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 853 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 873 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 891 "/usr/include/c++/15/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 920 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 988 "/usr/include/c++/15/bits/stl_vector.h" 3
      using _Base::get_allocator;







      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      [[__nodiscard__]]
      size_type
      size() const noexcept
      {
 ptrdiff_t __dif = this->_M_impl._M_finish - this->_M_impl._M_start;
 if (__dif < 0)
    __builtin_unreachable ();
 return size_type(__dif);
      }


      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      { return _S_max_size(_M_get_Tp_allocator()); }
# 1141 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 1162 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 1196 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      [[__nodiscard__]]
      size_type
      capacity() const noexcept
      {
 ptrdiff_t __dif = this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start;
 if (__dif < 0)
    __builtin_unreachable ();
 return size_type(__dif);
      }





      [[__nodiscard__]]
      bool
      empty() const noexcept
      { return begin() == end(); }
# 1243 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      reserve(size_type __n);
# 1259 "/usr/include/c++/15/bits/stl_vector.h" 3
      [[__nodiscard__]]
      reference
      operator[](size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return *(this->_M_impl._M_start + __n);
      }
# 1278 "/usr/include/c++/15/bits/stl_vector.h" 3
      [[__nodiscard__]]
      const_reference
      operator[](size_type __n) const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return *(this->_M_impl._M_start + __n);
      }

    protected:

     
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 1311 "/usr/include/c++/15/bits/stl_vector.h" 3
      [[__nodiscard__]]
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1330 "/usr/include/c++/15/bits/stl_vector.h" 3
      [[__nodiscard__]]
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      [[__nodiscard__]]
      reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }





      [[__nodiscard__]]
      const_reference
      front() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }





      [[__nodiscard__]]
      reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }





      [[__nodiscard__]]
      const_reference
      back() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }
# 1393 "/usr/include/c++/15/bits/stl_vector.h" 3
      [[__nodiscard__]]
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      [[__nodiscard__]]
      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 1414 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_append(__x);
      }


     
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>




 void

 emplace_back(_Args&&... __args);
# 1455 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      pop_back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 ;
      }
# 1478 "/usr/include/c++/15/bits/stl_vector.h" 3
      template<typename... _Args>

 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1495 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1526 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1544 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1570 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1613 "/usr/include/c++/15/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_range_insert(begin() + __offset, __first, __last,
     std::__iterator_category(__first));
   return begin() + __offset;
 }
# 1789 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1817 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1842 "/usr/include/c++/15/bits/stl_vector.h" 3
     
      void
      swap(vector& __x) noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(_Alloc_traits::propagate_on_container_swap::value || _M_get_Tp_allocator() == __x._M_get_Tp_allocator())) std::__glibcxx_assert_fail(); } while (false)
                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







     
      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    private:

      struct _Guard_alloc
      {
 pointer _M_storage;
 size_type _M_len;
 _Base& _M_vect;


 _Guard_alloc(pointer __s, size_type __l, _Base& __vect)
 : _M_storage(__s), _M_len(__l), _M_vect(__vect)
 { }


 ~_Guard_alloc()
 {
   if (_M_storage)
     _M_vect._M_deallocate(_M_storage, _M_len);
 }


 pointer
 _M_release()
 {
   pointer __res = _M_storage;
   _M_storage = pointer();
   return __res;
 }

      private:
 _Guard_alloc(const _Guard_alloc&);
      };

    protected:




      template<typename _ForwardIterator>

 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   _Guard_alloc __guard(this->_M_allocate(__n), __n, *this);
   std::__uninitialized_copy_a
     (__first, __last, __guard._M_storage, _M_get_Tp_allocator());
   return __guard._M_release();
 }
# 1948 "/usr/include/c++/15/bits/stl_vector.h" 3
      template<typename _InputIterator>

 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   try {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   } catch(...) {
     clear();
     throw;
   }
 }


      template<typename _ForwardIterator>

 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   _M_range_initialize_n(__first, __last,
    std::distance(__first, __last));
 }

      template<typename _Iterator, typename _Sentinel>

 void
 _M_range_initialize_n(_Iterator __first, _Sentinel __last,
         size_type __n)
 {
   pointer __start =
     this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   this->_M_impl._M_start = this->_M_impl._M_finish = __start;
   this->_M_impl._M_end_of_storage = __start + __n;
   this->_M_impl._M_finish
       = std::__uninitialized_copy_a(std::move(__first), __last,
         __start, _M_get_Tp_allocator());
 }



     
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



     
      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 2023 "/usr/include/c++/15/bits/stl_vector.h" 3
      template<typename _Integer>

 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>

 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>

 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>

 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



     
      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>

 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>

 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>

 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>

 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



     
      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



     
      void
      _M_default_append(size_type __n);

     
      bool
      _M_shrink_to_fit();
# 2125 "/usr/include/c++/15/bits/stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }


 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() noexcept { return _M_storage._M_val; }

      private:
 _Tp*
 _M_ptr() noexcept { return std::__addressof(_M_storage._M_val); }

 union _Storage
 {
   constexpr _Storage() : _M_byte() { }
   ~_Storage() { }
   _Storage& operator=(const _Storage&) = delete;
   unsigned char _M_byte;
   _Tp _M_val;
 };

 vector* _M_this;
 _Storage _M_storage;
      };



      template<typename _Arg>

 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>

 void
 _M_realloc_insert(iterator __position, _Args&&... __args);

      template<typename... _Args>

 void
 _M_realloc_append(_Args&&... __args);


     
      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>

 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


     
      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



     
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + (std::max)(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }


      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
 if (__n > _S_max_size(_Tp_alloc_type(__a)))
   __throw_length_error(
       ("cannot create std::vector larger than max_size()"));
 return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) noexcept
      {



 const size_t __diffmax
   = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 const size_t __allocmax = _Alloc_traits::max_size(__a);
 return (std::min)(__diffmax, __allocmax);
      }





     
      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 if (size_type __n = this->_M_impl._M_finish - __pos)
   {
     std::_Destroy(__pos, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     this->_M_impl._M_finish = __pos;
     ;
   }
      }

     
      iterator
      _M_erase(iterator __position);

     
      iterator
      _M_erase(iterator __first, iterator __last);


    private:



     
      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__x._M_impl);
 __tmp._M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



     
      void
      _M_move_assign(vector&& __x, false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), true_type());
 else
   {


     this->_M_assign_aux(std::make_move_iterator(__x.begin()),
           std::make_move_iterator(__x.end()),
    std::random_access_iterator_tag());
     __x.clear();
   }
      }


      template<typename _Up>

 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>

 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__to_address(__ptr); }






    };
# 2335 "/usr/include/c++/15/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 2375 "/usr/include/c++/15/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Tp, typename _Alloc>
   
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 2430 "/usr/include/c++/15/bits/stl_vector.h" 3

}
# 69 "/usr/include/c++/15/vector" 2 3
# 1 "/usr/include/c++/15/bits/stl_bvector.h" 1 3
# 68 "/usr/include/c++/15/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  __attribute__((__nonnull__))
 
  void
  __fill_bvector_n(_Bit_type*, size_t, bool) noexcept;



  struct _Bit_reference
  {
  private:
    template<typename, typename> friend class vector;
    friend struct _Bit_iterator;
    friend struct _Bit_const_iterator;

   
    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    _Bit_type * _M_p;
    _Bit_type _M_mask;

   
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

  public:

    _Bit_reference(const _Bit_reference&) = default;


    [[__nodiscard__]]
    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

   
    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }
# 131 "/usr/include/c++/15/bits/stl_bvector.h" 3
   
    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    [[__nodiscard__]]
    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    [[__nodiscard__]]
    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

   
    void
    flip() noexcept
    { *_M_p ^= _M_mask; }


   
    friend void
    swap(_Bit_reference __x, _Bit_reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

   
    friend void
    swap(_Bit_reference __x, bool& __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

   
    friend void
    swap(bool& __x, _Bit_reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

  };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    inline __attribute__((__always_inline__))
    void
    _M_assume_normalized() const
    {

      unsigned int __ofst = _M_offset;
      __attribute__ ((__assume__ (__ofst < unsigned(_S_word_bit))));

    }

   
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

   
    void
    _M_bump_up()
    {
      _M_assume_normalized();
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

   
    void
    _M_bump_down()
    {
      _M_assume_normalized();
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

   
    void
    _M_incr(ptrdiff_t __i)
    {
      _M_assume_normalized();
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    [[__nodiscard__]]
    friend bool
    operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      __x._M_assume_normalized();
      __y._M_assume_normalized();
      return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset;
    }
# 266 "/usr/include/c++/15/bits/stl_bvector.h" 3
    [[__nodiscard__]]
    friend bool
    operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      __x._M_assume_normalized();
      __y._M_assume_normalized();
      return __x._M_p < __y._M_p
     || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);
    }

    [[__nodiscard__]]
    friend bool
    operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x == __y); }

    [[__nodiscard__]]
    friend bool
    operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return __y < __x; }

    [[__nodiscard__]]
    friend bool
    operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__y < __x); }

    [[__nodiscard__]]
    friend bool
    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x < __y); }


    friend ptrdiff_t
    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      __x._M_assume_normalized();
      __y._M_assume_normalized();
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
       + __x._M_offset - __y._M_offset);
    }
  };
#pragma GCC diagnostic pop

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;



    typedef _Bit_reference* pointer;

    typedef _Bit_iterator iterator;

   
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

   
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

   
    iterator
    _M_const_cast() const
    { return *this; }

    [[__nodiscard__]]
    reference
    operator*() const
    {
      _M_assume_normalized();
      return reference(_M_p, 1UL << _M_offset);
    }

   
    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

   
    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

   
    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

   
    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

   
    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

   
    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    [[__nodiscard__]]
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    [[__nodiscard__]]
    friend iterator
    operator+(const iterator& __x, difference_type __n)
    {
      iterator __tmp = __x;
      __tmp += __n;
      return __tmp;
    }

    [[__nodiscard__]]
    friend iterator
    operator+(difference_type __n, const iterator& __x)
    { return __x + __n; }

    [[__nodiscard__]]
    friend iterator
    operator-(const iterator& __x, difference_type __n)
    {
      iterator __tmp = __x;
      __tmp -= __n;
      return __tmp;
    }
  };

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;



    typedef const bool* pointer;

    typedef _Bit_const_iterator const_iterator;

   
    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

   
    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

   
    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

   
    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    [[__nodiscard__]]
    const_reference
    operator*() const
    {
      _M_assume_normalized();
      return _Bit_reference(_M_p, 1UL << _M_offset);
    }

   
    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

   
    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

   
    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

   
    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

   
    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

   
    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    [[__nodiscard__]]
    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    [[__nodiscard__]]
    friend const_iterator
    operator+(const const_iterator& __x, difference_type __n)
    {
      const_iterator __tmp = __x;
      __tmp += __n;
      return __tmp;
    }

    [[__nodiscard__]]
    friend const_iterator
    operator-(const const_iterator& __x, difference_type __n)
    {
      const_iterator __tmp = __x;
      __tmp -= __n;
      return __tmp;
    }

    [[__nodiscard__]]
    friend const_iterator
    operator+(difference_type __n, const const_iterator& __x)
    { return __x + __n; }
  };

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl_data
      {

 _Bit_iterator _M_start;
# 553 "/usr/include/c++/15/bits/stl_bvector.h" 3
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;


 _Bvector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl_data(const _Bvector_impl_data&) = default;

 _Bvector_impl_data&
 operator=(const _Bvector_impl_data&) = default;


 _Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
 : _Bvector_impl_data(__x)
 { __x._M_reset(); }


 void
 _M_move_data(_Bvector_impl_data&& __x) noexcept
 {
   *this = __x;
   __x._M_reset();
 }



 void
 _M_reset() noexcept
 { *this = _Bvector_impl_data(); }


 void
 _M_swap_data(_Bvector_impl_data& __x) noexcept
 {


   std::swap(*this, __x);
 }
      };

      struct _Bvector_impl
 : public _Bit_alloc_type, public _Bvector_impl_data
      {

 _Bvector_impl() noexcept(is_nothrow_default_constructible<_Bit_alloc_type>::value)




 : _Bit_alloc_type()
 { }


 _Bvector_impl(const _Bit_alloc_type& __a) noexcept
 : _Bit_alloc_type(__a)
 { }





 _Bvector_impl(_Bvector_impl&& __x) noexcept
 : _Bit_alloc_type(std::move(__x)), _Bvector_impl_data(std::move(__x))
 { }


 _Bvector_impl(_Bit_alloc_type&& __a, _Bvector_impl&& __x) noexcept
 : _Bit_alloc_type(std::move(__a)), _Bvector_impl_data(std::move(__x))
 { }



 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (this->_M_end_of_storage)
     return std::__addressof(this->_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

     
      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return this->_M_impl; }

     
      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return this->_M_impl; }

     
      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }


      _Bvector_base() = default;




     
      _Bvector_base(const allocator_type& __a)
      : _M_impl(_Bit_alloc_type(__a)) { }


      _Bvector_base(_Bvector_base&&) = default;

     
      _Bvector_base(_Bvector_base&& __x, const allocator_type& __a) noexcept
      : _M_impl(_Bit_alloc_type(__a), std::move(__x._M_impl))
      { }


     
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

     
      _Bit_pointer
      _M_allocate(size_t __n)
      {
 _Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
# 694 "/usr/include/c++/15/bits/stl_bvector.h" 3
 return __p;
      }

     
      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_reset();
   }
      }


     
      void
      _M_move_data(_Bvector_base&& __x) noexcept
      { _M_impl._M_move_data(std::move(__x._M_impl)); }


      constexpr
      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };
# 745 "/usr/include/c++/15/bits/stl_bvector.h" 3
  template<typename _Alloc>
    class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
    {
      typedef _Bvector_base<_Alloc> _Base;
      typedef typename _Base::_Bit_pointer _Bit_pointer;
      typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


      friend struct std::hash<vector>;






    public:
      typedef bool value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Bit_reference reference;
      typedef bool const_reference;
      typedef _Bit_reference* pointer;
      typedef const bool* const_pointer;
      typedef _Bit_iterator iterator;
      typedef _Bit_const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef _Alloc allocator_type;

     
      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_S_nword;
      using _Base::_M_get_Bit_allocator;

    public:

      vector() = default;




     
      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }


     
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

     
      vector(size_type __n, const bool& __value,
      const allocator_type& __a = allocator_type())





      : _Base(__a)
      {
 _M_initialize(__n);
 _M_initialize_value(__value);
      }

     
      vector(const vector& __x)
      : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
      {
 const_iterator __xbegin = __x.begin(), __xend = __x.end();
 _M_initialize(__x.size());
 _M_copy_aligned(__xbegin, __xend, begin());
      }


      vector(vector&&) = default;

    private:
     
      vector(vector&& __x, const allocator_type& __a, true_type) noexcept
      : _Base(std::move(__x), __a)
      { }

     
      vector(vector&& __x, const allocator_type& __a, false_type)
      : _Base(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_move_data(std::move(__x));
 else
   {
     _M_initialize(__x.size());
     _M_copy_aligned(__x.begin(), __x.end(), begin());
     __x.clear();
   }
      }

    public:
     
      vector(vector&& __x, const __type_identity_t<allocator_type>& __a)
      noexcept(_Bit_alloc_traits::_S_always_equal())
      : vector(std::move(__x), __a,
        typename _Bit_alloc_traits::is_always_equal{})
      { }

     
      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
      : _Base(__a)
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), begin());
      }

     
      vector(initializer_list<bool> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_initialize_range(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 {
   _M_initialize_range(__first, __last,
         std::__iterator_category(__first));
 }
# 925 "/usr/include/c++/15/bits/stl_bvector.h" 3
     
      ~vector() noexcept { }

     
      vector&
      operator=(const vector& __x)
      {
 if (&__x == this)
   return *this;

 if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
   {
     if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
       {
  this->_M_deallocate();
  std::__alloc_on_copy(_M_get_Bit_allocator(),
         __x._M_get_Bit_allocator());
  _M_initialize(__x.size());
       }
     else
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
   }

 if (__x.size() > capacity())
   {
     this->_M_deallocate();
     _M_initialize(__x.size());
   }
 this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
        begin());
 return *this;
      }


     
      vector&
      operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
      {
 if (_Bit_alloc_traits::_S_propagate_on_move_assign()
     || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
   {
     this->_M_deallocate();
     this->_M_move_data(std::move(__x));
     std::__alloc_on_move(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
   }
 else
   {
     if (__x.size() > capacity())
       {
  this->_M_deallocate();
  _M_initialize(__x.size());
       }
     this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
            begin());
     __x.clear();
   }
 return *this;
      }

     
      vector&
      operator=(initializer_list<bool> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }






     
      void
      assign(size_type __n, const bool& __x)
      { _M_fill_assign(__n, __x); }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 1023 "/usr/include/c++/15/bits/stl_bvector.h" 3
     
      void
      assign(initializer_list<bool> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
# 1063 "/usr/include/c++/15/bits/stl_bvector.h" 3
      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start._M_p, 0); }

      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }

      [[__nodiscard__]]
      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }

      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }

      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }


      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }

      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }

      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      [[__nodiscard__]]
      size_type
      size() const noexcept
      { return size_type(end() - begin()); }

      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      {
 const size_type __isize =
   __gnu_cxx::__numeric_traits<difference_type>::__max
   - int(_S_word_bit) + 1;
 const size_type __asize
   = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 return (__asize <= __isize / int(_S_word_bit)
  ? __asize * int(_S_word_bit) : __isize);
      }

      [[__nodiscard__]]
      size_type
      capacity() const noexcept
      { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
    - begin()); }

      [[__nodiscard__]]
      bool
      empty() const noexcept
      { return begin() == end(); }

      [[__nodiscard__]]
      reference
      operator[](size_type __n)
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return _Bit_reference (this->_M_impl._M_start._M_p
          + __n / int(_S_word_bit),
          1UL << __n % int(_S_word_bit));
      }

      [[__nodiscard__]]
      const_reference
      operator[](size_type __n) const
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return _Bit_reference (this->_M_impl._M_start._M_p
          + __n / int(_S_word_bit),
          1UL << __n % int(_S_word_bit));
      }

    protected:
     
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
      [[__nodiscard__]]
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }

      [[__nodiscard__]]
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }

     
      void
      reserve(size_type __n)
      {
 if (__n > max_size())
   __throw_length_error(("vector::reserve"));
 if (capacity() < __n)
   _M_reallocate(__n);
      }

      [[__nodiscard__]]
      reference
      front()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }

      [[__nodiscard__]]
      const_reference
      front() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }

      [[__nodiscard__]]
      reference
      back()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }

      [[__nodiscard__]]
      const_reference
      back() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }

     
      void
      push_back(bool __x)
      {
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(end(), __x);
      }

     
      void
      swap(vector& __x) noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(_Bit_alloc_traits::propagate_on_container_swap::value || _M_get_Bit_allocator() == __x._M_get_Bit_allocator())) std::__glibcxx_assert_fail(); } while (false)
                                                            ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
      }


     
      static void
      swap(reference __x, reference __y) noexcept
      {
 bool __tmp = __x;
 __x = __y;
 __y = __tmp;
      }

     
      iterator

      insert(const_iterator __position, const bool& __x)



      {
 const difference_type __n = __position - begin();
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
     && __position == end())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(__position._M_const_cast(), __x);
 return begin() + __n;
      }


     
      iterator
      insert(const_iterator __position)
      { return this->insert(__position._M_const_cast(), false); }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 iterator
 insert(const_iterator __position,
        _InputIterator __first, _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_range(__position._M_const_cast(),
     __first, __last,
     std::__iterator_category(__first));
   return begin() + __offset;
 }
# 1329 "/usr/include/c++/15/bits/stl_bvector.h" 3
     
      iterator
      insert(const_iterator __position, size_type __n, const bool& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }







     
      iterator
      insert(const_iterator __p, initializer_list<bool> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1463 "/usr/include/c++/15/bits/stl_bvector.h" 3
     
      void
      pop_back()
      { --this->_M_impl._M_finish; }

     
      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }

     
      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

     
      void
      resize(size_type __new_size, bool __x = bool())
      {
 if (__new_size < size())
   _M_erase_at_end(begin() + difference_type(__new_size));
 else
   insert(end(), __new_size - size(), __x);
      }


     
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }


     
      void
      flip() noexcept
      {
 _Bit_type * const __end = this->_M_impl._M_end_addr();
 for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
   *__p = ~*__p;
      }

     
      void
      clear() noexcept
      { _M_erase_at_end(begin()); }


      template<typename... _Args>




 void

 emplace_back(_Args&&... __args)
 {
   push_back(bool(std::forward<_Args>(__args)...));



 }

      template<typename... _Args>

 iterator
 emplace(const_iterator __pos, _Args&&... __args)
 { return insert(__pos, bool(std::forward<_Args>(__args)...)); }


    protected:

     
      iterator
      _M_copy_aligned(const_iterator __first, const_iterator __last,
        iterator __result)
      {
 _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 return std::copy(const_iterator(__last._M_p, 0), __last,
    iterator(__q, 0));
      }

     
      void
      _M_initialize(size_type __n)
      {
 if (__n)
   {
     _Bit_pointer __q = this->_M_allocate(__n);
     this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
     iterator __start = iterator(std::__addressof(*__q), 0);
     this->_M_impl._M_start = __start;
     this->_M_impl._M_finish = __start + difference_type(__n);
   }
      }

     
      void
      _M_initialize_value(bool __x) noexcept
      {
 if (_Bit_type* __p = this->_M_impl._M_start._M_p)
   __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
      }

     
      void
      _M_reallocate(size_type __n);


     
      bool
      _M_shrink_to_fit();
# 1603 "/usr/include/c++/15/bits/stl_bvector.h" 3
      template<typename _InputIterator>

 void
 _M_initialize_range(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }

      template<typename _ForwardIterator>

 void
 _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   _M_initialize(__n);
   std::copy(__first, __last, begin());
 }
# 1639 "/usr/include/c++/15/bits/stl_bvector.h" 3
     
      void
      _M_fill_assign(size_t __n, bool __x)
      {
 if (__n > size())
   {
     _M_initialize_value(__x);
     insert(end(), __n - size(), __x);
   }
 else
   {
     _M_erase_at_end(begin() + __n);
     _M_initialize_value(__x);
   }
      }

      template<typename _InputIterator>

 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag)
 {
   iterator __cur = begin();
   for (; __first != __last && __cur != end(); ++__cur, (void)++__first)
     *__cur = *__first;
   if (__first == __last)
     _M_erase_at_end(__cur);
   else
     insert(end(), __first, __last);
 }

      template<typename _ForwardIterator>

 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len < size())
     _M_erase_at_end(std::copy(__first, __last, begin()));
   else
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
 }
# 1706 "/usr/include/c++/15/bits/stl_bvector.h" 3
     
      void
      _M_fill_insert(iterator __position, size_type __n, bool __x);

      template<typename _InputIterator>

 void
 _M_insert_range(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     {
       __pos = insert(__pos, *__first);
       ++__pos;
     }
 }

      template<typename _ForwardIterator>

 void
 _M_insert_range(iterator __position, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);

     
      void
      _M_insert_aux(iterator __position, bool __x);

     
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

     
      void
      _M_erase_at_end(iterator __pos)
      { this->_M_impl._M_finish = __pos; }

     
      iterator
      _M_erase(iterator __pos);

     
      iterator
      _M_erase(iterator __first, iterator __last);

    protected:






      void data() = delete;



    };




 
  inline void
  __fill_bvector(_Bit_type* __v, unsigned int __first, unsigned int __last,
   bool __x) noexcept
  {
    const _Bit_type __fmask = ~0ul << __first;
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    const _Bit_type __mask = __fmask & __lmask;

    if (__x)
      *__v |= __mask;
    else
      *__v &= ~__mask;
  }


  __attribute__((__nonnull__))
 
  inline void
  __fill_bvector_n(_Bit_type* __p, size_t __n, bool __x) noexcept
  {
# 1802 "/usr/include/c++/15/bits/stl_bvector.h" 3
    __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
  }


 
  inline void
  __fill_a1(std::_Bit_iterator __first,
     std::_Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 _Bit_type* __first_p = __first._M_p;
 if (__first._M_offset != 0)
   __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);

 __fill_bvector_n(__first_p, __last._M_p - __first_p, __x);

 if (__last._M_offset != 0)
   __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
      }
    else if (__first._M_offset != __last._M_offset)
      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);
  }




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };



}
# 70 "/usr/include/c++/15/vector" 2 3




# 1 "/usr/include/c++/15/bits/vector.tcc" 1 3
# 59 "/usr/include/c++/15/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp;

   if (_S_use_relocate())
     {
       __tmp = this->_M_allocate(__n);
       _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
     __tmp, _M_get_Tp_allocator());
     }
   else

     {
       __tmp = _M_allocate_and_copy(__n,
  std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
  std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   ;
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>




      void

      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_append(std::forward<_Args>(__args)...);



      }


  template<typename _Tp, typename _Alloc>
   
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   do { if (std::__is_constant_evaluated() && !bool(__position != const_iterator())) std::__glibcxx_assert_fail(); } while (false);
   if (!(__position != const_iterator()))
     __builtin_unreachable();

   if (__position == end())
     {
       ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           __x);
       ++this->_M_impl._M_finish;
       ;
     }
   else
     {

       const auto __pos = begin() + (__position - cbegin());


       _Temporary_value __x_copy(this, __x);
       _M_insert_aux(__pos, std::move(__x_copy._M_val()));



     }
 }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
   
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      ;
      return __position;
    }

  template<typename _Tp, typename _Alloc>
   
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
   
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
 {
   ;

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      const size_type __sz = size();
      if (__n > capacity())
 {
   if (__n <= __sz)
     __builtin_unreachable();
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > __sz)
 {
   std::fill(begin(), end(), __val);
   const size_type __add = __n - __sz;
   ;
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __add, __val, _M_get_Tp_allocator());
   ;
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, (void)++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __sz = size();
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     if (__len <= __sz)
       __builtin_unreachable();

     _S_check_init_len(__len, _M_get_Tp_allocator());
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     ;
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (__sz >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, __sz);
     std::copy(__first, __mid, this->_M_impl._M_start);
     const size_type __attribute__((__unused__)) __n = __len - __sz;
     ;
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     ;
   }
      }


  template<typename _Tp, typename _Alloc>
   
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
     
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
       ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
       ;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
     
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
      ;
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1)));
      ++this->_M_impl._M_finish;
      ;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                     ;



      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
     
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len = _M_check_len(1u, "vector::_M_realloc_insert");
      if (__len <= 0)
 __builtin_unreachable ();
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);

      {
 _Guard_alloc __guard(__new_start, __len, *this);
# 481 "/usr/include/c++/15/bits/vector.tcc" 3
 _Alloc_traits::construct(this->_M_impl,
     std::__to_address(__new_start + __elems_before),
     std::forward<_Args>(__args)...);







 if (_S_use_relocate())
   {

     __new_finish = _S_relocate(__old_start, __position.base(),
           __new_start, _M_get_Tp_allocator());
     ++__new_finish;
     __new_finish = _S_relocate(__position.base(), __old_finish,
           __new_finish, _M_get_Tp_allocator());
   }
 else

   {

     struct _Guard_elts
     {
       pointer _M_first, _M_last;
       _Tp_alloc_type& _M_alloc;

      
       _Guard_elts(pointer __elt, _Tp_alloc_type& __a)
       : _M_first(__elt), _M_last(__elt + 1), _M_alloc(__a)
       { }

      
       ~_Guard_elts()
       { std::_Destroy(_M_first, _M_last, _M_alloc); }

     private:
       _Guard_elts(const _Guard_elts&);
     };


     _Guard_elts __guard_elts(__new_start + __elems_before, _M_impl);

     __new_finish = std::__uninitialized_move_if_noexcept_a(
        __old_start, __position.base(),
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;

     __guard_elts._M_first = __new_start;

     __new_finish = std::__uninitialized_move_if_noexcept_a(
         __position.base(), __old_finish,
         __new_finish, _M_get_Tp_allocator());


     __guard_elts._M_first = __old_start;
     __guard_elts._M_last = __old_finish;
   }
 __guard._M_storage = __old_start;
 __guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
      }



      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
     
      void
      vector<_Tp, _Alloc>::
      _M_realloc_append(_Args&&... __args)






    {
      const size_type __len = _M_check_len(1u, "vector::_M_realloc_append");
      if (__len <= 0)
 __builtin_unreachable ();
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems = end() - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);

      {
 _Guard_alloc __guard(__new_start, __len, *this);
# 586 "/usr/include/c++/15/bits/vector.tcc" 3
 _Alloc_traits::construct(this->_M_impl,
     std::__to_address(__new_start + __elems),
     std::forward<_Args>(__args)...);







 if (_S_use_relocate())
   {

     __new_finish = _S_relocate(__old_start, __old_finish,
           __new_start, _M_get_Tp_allocator());
     ++__new_finish;
   }
 else

   {

     struct _Guard_elts
     {
       pointer _M_first, _M_last;
       _Tp_alloc_type& _M_alloc;

      
       _Guard_elts(pointer __elt, _Tp_alloc_type& __a)
       : _M_first(__elt), _M_last(__elt + 1), _M_alloc(__a)
       { }

      
       ~_Guard_elts()
       { std::_Destroy(_M_first, _M_last, _M_alloc); }

     private:
       _Guard_elts(const _Guard_elts&);
     };


     _Guard_elts __guard_elts(__new_start + __elems, _M_impl);

     __new_finish = std::__uninitialized_move_if_noexcept_a(
        __old_start, __old_finish,
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;


     __guard_elts._M_first = __old_start;
     __guard_elts._M_last = __old_finish;
   }
 __guard._M_storage = __old_start;
 __guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
      }



      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    ;
    std::__uninitialized_move_a(__old_finish - __n,
           __old_finish,
           __old_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    ;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    ;
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(__old_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    ;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    ;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {


       pointer __old_start = this->_M_impl._M_start;
       pointer __old_finish = this->_M_impl._M_finish;
       const pointer __pos = __position.base();

       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __pos - __old_start;
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__old_start, __pos, __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__pos, __old_finish, __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
       ;
       _M_deallocate(__old_start,
       this->_M_impl._M_end_of_storage - __old_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   const size_type __size = size();
   size_type __navail = size_type(this->_M_impl._M_end_of_storage
      - this->_M_impl._M_finish);

   if (__size > max_size() || __navail > max_size() - __size)
     __builtin_unreachable();

   if (__navail >= __n)
     {
       if (!this->_M_impl._M_finish)
  __builtin_unreachable();

       ;
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
       ;
     }
   else
     {


       pointer __old_start = this->_M_impl._M_start;
       pointer __old_finish = this->_M_impl._M_finish;

       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       pointer __new_start(this->_M_allocate(__len));

       {
  _Guard_alloc __guard(__new_start, __len, *this);

  std::__uninitialized_default_n_a(__new_start + __size, __n,
       _M_get_Tp_allocator());

  if (_S_use_relocate())
    {
      _S_relocate(__old_start, __old_finish,
    __new_start, _M_get_Tp_allocator());
    }
  else
    {

      struct _Guard_elts
      {
        pointer _M_first, _M_last;
        _Tp_alloc_type& _M_alloc;

       
        _Guard_elts(pointer __first, size_type __n,
      _Tp_alloc_type& __a)
        : _M_first(__first), _M_last(__first + __n), _M_alloc(__a)
        { }

       
        ~_Guard_elts()
        { std::_Destroy(_M_first, _M_last, _M_alloc); }

      private:
        _Guard_elts(const _Guard_elts&);
      };
      _Guard_elts __guard_elts(__new_start + __size, __n, _M_impl);

      std::__uninitialized_move_if_noexcept_a(
        __old_start, __old_finish, __new_start,
        _M_get_Tp_allocator());

      __guard_elts._M_first = __old_start;
      __guard_elts._M_last = __old_finish;
    }
  ;
  __guard._M_storage = __old_start;
  __guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
       }



       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
   
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      ;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 if (__pos == end())
   {
     for (; __first != __last; ++__first)
       insert(end(), *__first);
   }
 else if (__first != __last)
   {
     vector __tmp(__first, __last, _M_get_Tp_allocator());
     insert(__pos,
     std::make_move_iterator(__tmp.begin()),
     std::make_move_iterator(__tmp.end()));
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      ;
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      ;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      ;
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      ;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      ;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {



  pointer __old_start = this->_M_impl._M_start;
  pointer __old_finish = this->_M_impl._M_finish;

  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");





  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__old_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), __old_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(__old_start, __old_finish,
         _M_get_Tp_allocator());
  ;
  _M_deallocate(__old_start,
         this->_M_impl._M_end_of_storage - __old_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }
# 1109 "/usr/include/c++/15/bits/vector.tcc" 3
  template<typename _Alloc>
   
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      const iterator __begin = begin(), __end = end();
      if (size_type(__end - __begin) > __n)
 __builtin_unreachable();
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(__begin, __end, __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
   
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   iterator __begin = begin(), __end = end();
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(__begin, __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, __end,
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
     
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  const iterator __begin = begin(), __end = end();
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(__begin, __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, __end, __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
   
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
   
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
   
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
   
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   if (size_type __n = size())
     _M_reallocate(__n);
   else
     {
       this->_M_deallocate();
       this->_M_impl._M_reset();
     }
   return true;
 }
      catch(...)
 { return false; }
    }




}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 75 "/usr/include/c++/15/vector" 2 3
# 88 "/usr/include/c++/15/vector" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 89 "/usr/include/c++/15/vector" 2 3
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp" 2


# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp"
namespace asio {
namespace detail {

service_registry::~service_registry()
{



  asio::io_service::service* service = first_service_;
  while (service)
  {
    service->shutdown_service();
    service = service->next_;
  }


  while (first_service_)
  {
    asio::io_service::service* next_service = first_service_->next_;
    destroy(first_service_);
    first_service_ = next_service;
  }
}

void service_registry::notify_fork(asio::io_service::fork_event fork_ev)
{



  std::vector<asio::io_service::service*> services;
  {
    asio::detail::mutex::scoped_lock lock(mutex_);
    asio::io_service::service* service = first_service_;
    while (service)
    {
      services.push_back(service);
      service = service->next_;
    }
  }





  std::size_t num_services = services.size();
  if (fork_ev == asio::io_service::fork_prepare)
    for (std::size_t i = 0; i < num_services; ++i)
      services[i]->fork_service(fork_ev);
  else
    for (std::size_t i = num_services; i > 0; --i)
      services[i - 1]->fork_service(fork_ev);
}

void service_registry::init_key(asio::io_service::service::key& key,
    const asio::io_service::id& id)
{
  key.type_info_ = 0;
  key.id_ = &id;
}

bool service_registry::keys_match(
    const asio::io_service::service::key& key1,
    const asio::io_service::service::key& key2)
{
  if (key1.id_ && key2.id_)
    if (key1.id_ == key2.id_)
      return true;
  if (key1.type_info_ && key2.type_info_)
    if (*key1.type_info_ == *key2.type_info_)
      return true;
  return false;
}

void service_registry::destroy(asio::io_service::service* service)
{
  delete service;
}

asio::io_service::service* service_registry::do_use_service(
    const asio::io_service::service::key& key,
    factory_type factory)
{
  asio::detail::mutex::scoped_lock lock(mutex_);


  asio::io_service::service* service = first_service_;
  while (service)
  {
    if (keys_match(service->key_, key))
      return service;
    service = service->next_;
  }




  lock.unlock();
  auto_service_ptr new_service = { factory(owner_) };
  new_service.ptr_->key_ = key;
  lock.lock();



  service = first_service_;
  while (service)
  {
    if (keys_match(service->key_, key))
      return service;
    service = service->next_;
  }


  new_service.ptr_->next_ = first_service_;
  first_service_ = new_service.ptr_;
  new_service.ptr_ = 0;
  return first_service_;
}

void service_registry::do_add_service(
    const asio::io_service::service::key& key,
    asio::io_service::service* new_service)
{
  if (&owner_ != &new_service->get_io_service())
    asio::detail::throw_exception(invalid_service_owner());

  asio::detail::mutex::scoped_lock lock(mutex_);


  asio::io_service::service* service = first_service_;
  while (service)
  {
    if (keys_match(service->key_, key))
      asio::detail::throw_exception(service_already_exists());
    service = service->next_;
  }


  new_service->key_ = key;
  new_service->next_ = first_service_;
  first_service_ = new_service;
}

bool service_registry::do_has_service(
    const asio::io_service::service::key& key) const
{
  asio::detail::mutex::scoped_lock lock(mutex_);

  asio::io_service::service* service = first_service_;
  while (service)
  {
    if (keys_match(service->key_, key))
      return true;
    service = service->next_;
  }

  return false;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/service_registry.ipp" 2
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/service_registry.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2

namespace asio {

template <typename Service>
inline Service& use_service(io_service& ios)
{

  (void)static_cast<io_service::service*>(static_cast<Service*>(0));
  (void)static_cast<const io_service::id*>(&Service::id);

  return ios.service_registry_->template use_service<Service>();
}

template <>
inline detail::io_service_impl& use_service<detail::io_service_impl>(
    io_service& ios)
{
  return ios.impl_;
}

template <typename Service>
inline void add_service(io_service& ios, Service* svc)
{

  (void)static_cast<io_service::service*>(static_cast<Service*>(0));
  (void)static_cast<const io_service::id*>(&Service::id);

  ios.service_registry_->template add_service<Service>(svc);
}

template <typename Service>
inline bool has_service(io_service& ios)
{

  (void)static_cast<io_service::service*>(static_cast<Service*>(0));
  (void)static_cast<const io_service::id*>(&Service::id);

  return ios.service_registry_->template has_service<Service>();
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/atomic_count.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/atomic_count.hpp"
# 1 "/usr/include/c++/15/atomic" 1 3
# 50 "/usr/include/c++/15/atomic" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 51 "/usr/include/c++/15/atomic" 2 3






# 56 "/usr/include/c++/15/atomic" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    struct atomic;



  template<>
  struct atomic<bool>
  {
    using value_type = bool;

  private:
    __atomic_base<bool> _M_base;

  public:
    atomic() noexcept = default;
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
    { return _M_base.operator=(__i); }

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
    { return _M_base.load(); }

    bool
    is_lock_free() const noexcept { return _M_base.is_lock_free(); }

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }





    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
    { return _M_base.load(__m); }

    bool
    exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    exchange(bool __i,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
     memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }
# 191 "/usr/include/c++/15/atomic" 3
  };






  template<typename _Tp>
    struct atomic
    {
      using value_type = _Tp;

    private:

      static constexpr int _S_min_alignment
 = (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16
 ? 0 : sizeof(_Tp);

      static constexpr int _S_alignment
        = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);

      alignas(_S_alignment) _Tp _M_i;

      static_assert(__is_trivially_copyable(_Tp),
      "std::atomic requires a trivially copyable type");

      static_assert(sizeof(_Tp) > 0,
      "Incomplete or zero-sized types are not supported");
# 227 "/usr/include/c++/15/atomic" 3
    public:
# 236 "/usr/include/c++/15/atomic" 3
      atomic() = default;


      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i)
      {

 if (__atomic_impl::__maybe_has_padding<_Tp>())
   __builtin_clear_padding(std::__addressof(_M_i));

      }

      operator _Tp() const noexcept
      { return load(); }

      operator _Tp() const volatile noexcept
      { return load(); }

      _Tp
      operator=(_Tp __i) noexcept
      { store(__i); return __i; }

      _Tp
      operator=(_Tp __i) volatile noexcept
      { store(__i); return __i; }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }






      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 __atomic_store(std::__addressof(_M_i),
         __atomic_impl::__clear_padding(__i),
         int(__m));
      }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 __atomic_store(std::__addressof(_M_i),
         __atomic_impl::__clear_padding(__i),
         int(__m));
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 return *__ptr;
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i),
     __atomic_impl::__clear_padding(__i),
     __ptr, int(__m));
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i),
     __atomic_impl::__clear_padding(__i),
     __ptr, int(__m));
 return *__ptr;
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, true,
       __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) volatile noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, true,
       __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, false,
       __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) volatile noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, false,
       __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
          memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }
# 419 "/usr/include/c++/15/atomic" 3
    };


  template<typename _Tp>
    struct atomic<_Tp*>
    {
      using value_type = _Tp*;
      using difference_type = ptrdiff_t;

      typedef _Tp* __pointer_type;
      typedef __atomic_base<_Tp*> __base_type;
      __base_type _M_b;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }

      operator __pointer_type() const noexcept
      { return __pointer_type(_M_b); }

      operator __pointer_type() const volatile noexcept
      { return __pointer_type(_M_b); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator++(int) noexcept
      {



 return _M_b++;
      }

      __pointer_type
      operator++(int) volatile noexcept
      {



 return _M_b++;
      }

      __pointer_type
      operator--(int) noexcept
      {



 return _M_b--;
      }

      __pointer_type
      operator--(int) volatile noexcept
      {



 return _M_b--;
      }

      __pointer_type
      operator++() noexcept
      {



 return ++_M_b;
      }

      __pointer_type
      operator++() volatile noexcept
      {



 return ++_M_b;
      }

      __pointer_type
      operator--() noexcept
      {



 return --_M_b;
      }

      __pointer_type
      operator--() volatile noexcept
      {



 return --_M_b;
      }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      {



 return _M_b.operator+=(__d);
      }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      {



 return _M_b.operator+=(__d);
      }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      {



 return _M_b.operator-=(__d);
      }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      {



 return _M_b.operator-=(__d);
      }

      bool
      is_lock_free() const noexcept
      { return _M_b.is_lock_free(); }

      bool
      is_lock_free() const volatile noexcept
      { return _M_b.is_lock_free(); }






      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.store(__p, __m); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.store(__p, __m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { return _M_b.load(__m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      { return _M_b.load(__m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.exchange(__p, __m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.exchange(__p, __m); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_weak(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_weak(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }
# 673 "/usr/include/c++/15/atomic" 3
      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      {



 return _M_b.fetch_add(__d, __m);
      }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      {



 return _M_b.fetch_add(__d, __m);
      }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      {



 return _M_b.fetch_sub(__d, __m);
      }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      {



 return _M_b.fetch_sub(__d, __m);
      }
    };



  template<>
    struct atomic<char> : __atomic_base<char>
    {
      typedef char __integral_type;
      typedef __atomic_base<char> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<signed char> : __atomic_base<signed char>
    {
      typedef signed char __integral_type;
      typedef __atomic_base<signed char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned char> : __atomic_base<unsigned char>
    {
      typedef unsigned char __integral_type;
      typedef __atomic_base<unsigned char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<short> : __atomic_base<short>
    {
      typedef short __integral_type;
      typedef __atomic_base<short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned short> : __atomic_base<unsigned short>
    {
      typedef unsigned short __integral_type;
      typedef __atomic_base<unsigned short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<int> : __atomic_base<int>
    {
      typedef int __integral_type;
      typedef __atomic_base<int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned int> : __atomic_base<unsigned int>
    {
      typedef unsigned int __integral_type;
      typedef __atomic_base<unsigned int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<long> : __atomic_base<long>
    {
      typedef long __integral_type;
      typedef __atomic_base<long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned long> : __atomic_base<unsigned long>
    {
      typedef unsigned long __integral_type;
      typedef __atomic_base<unsigned long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<long long> : __atomic_base<long long>
    {
      typedef long long __integral_type;
      typedef __atomic_base<long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned long long> : __atomic_base<unsigned long long>
    {
      typedef unsigned long long __integral_type;
      typedef __atomic_base<unsigned long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<wchar_t> : __atomic_base<wchar_t>
    {
      typedef wchar_t __integral_type;
      typedef __atomic_base<wchar_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };
# 1018 "/usr/include/c++/15/atomic" 3
  template<>
    struct atomic<char16_t> : __atomic_base<char16_t>
    {
      typedef char16_t __integral_type;
      typedef __atomic_base<char16_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;





    };


  template<>
    struct atomic<char32_t> : __atomic_base<char32_t>
    {
      typedef char32_t __integral_type;
      typedef __atomic_base<char32_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;





    };



  typedef atomic<bool> atomic_bool;


  typedef atomic<char> atomic_char;


  typedef atomic<signed char> atomic_schar;


  typedef atomic<unsigned char> atomic_uchar;


  typedef atomic<short> atomic_short;


  typedef atomic<unsigned short> atomic_ushort;


  typedef atomic<int> atomic_int;


  typedef atomic<unsigned int> atomic_uint;


  typedef atomic<long> atomic_long;


  typedef atomic<unsigned long> atomic_ulong;


  typedef atomic<long long> atomic_llong;


  typedef atomic<unsigned long long> atomic_ullong;


  typedef atomic<wchar_t> atomic_wchar_t;







  typedef atomic<char16_t> atomic_char16_t;


  typedef atomic<char32_t> atomic_char32_t;






  typedef atomic<int8_t> atomic_int8_t;


  typedef atomic<uint8_t> atomic_uint8_t;


  typedef atomic<int16_t> atomic_int16_t;


  typedef atomic<uint16_t> atomic_uint16_t;


  typedef atomic<int32_t> atomic_int32_t;


  typedef atomic<uint32_t> atomic_uint32_t;


  typedef atomic<int64_t> atomic_int64_t;


  typedef atomic<uint64_t> atomic_uint64_t;



  typedef atomic<int_least8_t> atomic_int_least8_t;


  typedef atomic<uint_least8_t> atomic_uint_least8_t;


  typedef atomic<int_least16_t> atomic_int_least16_t;


  typedef atomic<uint_least16_t> atomic_uint_least16_t;


  typedef atomic<int_least32_t> atomic_int_least32_t;


  typedef atomic<uint_least32_t> atomic_uint_least32_t;


  typedef atomic<int_least64_t> atomic_int_least64_t;


  typedef atomic<uint_least64_t> atomic_uint_least64_t;



  typedef atomic<int_fast8_t> atomic_int_fast8_t;


  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;


  typedef atomic<int_fast16_t> atomic_int_fast16_t;


  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;


  typedef atomic<int_fast32_t> atomic_int_fast32_t;


  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;


  typedef atomic<int_fast64_t> atomic_int_fast64_t;


  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;



  typedef atomic<intptr_t> atomic_intptr_t;


  typedef atomic<uintptr_t> atomic_uintptr_t;


  typedef atomic<size_t> atomic_size_t;


  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;


  typedef atomic<intmax_t> atomic_intmax_t;


  typedef atomic<uintmax_t> atomic_uintmax_t;


  inline bool
  atomic_flag_test_and_set_explicit(atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline bool
  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }
# 1244 "/usr/include/c++/15/atomic" 3
  inline void
  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept
  { __a->clear(__m); }

  inline void
  atomic_flag_clear_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { __a->clear(__m); }

  inline bool
  atomic_flag_test_and_set(atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline bool
  atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(volatile atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }
# 1291 "/usr/include/c++/15/atomic" 3
  template<typename _Tp>
    using __atomic_val_t = __type_identity_t<_Tp>;
  template<typename _Tp>
    using __atomic_diff_t = typename atomic<_Tp>::difference_type;




  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const volatile atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline void
    atomic_init(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_init(volatile atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(volatile atomic<_ITp>* __a, __atomic_val_t<_ITp> __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const atomic<_ITp>* __a, memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const volatile atomic<_ITp>* __a,
    memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(volatile atomic<_ITp>* __a,
        __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(volatile atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(atomic<_ITp>* __a,
         __atomic_val_t<_ITp>* __i1,
         __atomic_val_t<_ITp> __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(volatile atomic<_ITp>* __a,
         __atomic_val_t<_ITp>* __i1,
         __atomic_val_t<_ITp> __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }


  template<typename _ITp>
    inline void
    atomic_store(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline void
    atomic_store(volatile atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const volatile atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(volatile atomic<_ITp>* __a,
      __atomic_val_t<_ITp> __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(atomic<_ITp>* __a,
     __atomic_val_t<_ITp>* __i1,
     __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(volatile atomic<_ITp>* __a,
     __atomic_val_t<_ITp>* __i1,
     __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(volatile atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }
# 1497 "/usr/include/c++/15/atomic" 3
  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(volatile atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(volatile atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a,
        __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a,
        __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(volatile atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(volatile atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(__atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(volatile __atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(__atomic_base<_ITp>* __a,
      __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(volatile __atomic_base<_ITp>* __a,
      __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(__atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }
# 1798 "/usr/include/c++/15/atomic" 3

}
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/atomic_count.hpp" 2





# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/atomic_count.hpp"
namespace asio {
namespace detail {





typedef std::atomic<long> atomic_count;
inline void increment(atomic_count& a, long b) { a += b; }





}
}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/event.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/event.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/assert.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/assert.hpp"
# 1 "/usr/include/c++/15/cassert" 1 3
# 46 "/usr/include/c++/15/cassert" 3
# 1 "/usr/include/assert.h" 1 3 4
# 47 "/usr/include/c++/15/cassert" 2 3
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/assert.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 2

namespace asio {
namespace detail {

class posix_event
  : private noncopyable
{
public:

  inline posix_event();


  ~posix_event()
  {
    ::pthread_cond_destroy(&cond_);
  }


  template <typename Lock>
  void signal(Lock& lock)
  {
    this->signal_all(lock);
  }


  template <typename Lock>
  void signal_all(Lock& lock)
  {
    
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 3 4
   (static_cast<void> (0))
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp"
                             ;
    (void)lock;
    state_ |= 1;
    ::pthread_cond_broadcast(&cond_);
  }


  template <typename Lock>
  void unlock_and_signal_one(Lock& lock)
  {
    
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 3 4
   (static_cast<void> (0))
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp"
                             ;
    state_ |= 1;
    bool have_waiters = (state_ > 1);
    lock.unlock();
    if (have_waiters)
      ::pthread_cond_signal(&cond_);
  }


  template <typename Lock>
  bool maybe_unlock_and_signal_one(Lock& lock)
  {
    
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 3 4
   (static_cast<void> (0))
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp"
                             ;
    state_ |= 1;
    if (state_ > 1)
    {
      lock.unlock();
      ::pthread_cond_signal(&cond_);
      return true;
    }
    return false;
  }


  template <typename Lock>
  void clear(Lock& lock)
  {
    
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 3 4
   (static_cast<void> (0))
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp"
                             ;
    (void)lock;
    state_ &= ~std::size_t(1);
  }


  template <typename Lock>
  void wait(Lock& lock)
  {
    
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 3 4
   (static_cast<void> (0))
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp"
                             ;
    while ((state_ & 1) == 0)
    {
      state_ += 2;
      ::pthread_cond_wait(&cond_, &lock.mutex().mutex_);
      state_ -= 2;
    }
  }

private:
  ::pthread_cond_t cond_;
  std::size_t state_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_event.ipp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_event.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_event.ipp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_event.ipp" 2

namespace asio {
namespace detail {

posix_event::posix_event()
  : state_(0)
{
  int error = ::pthread_cond_init(&cond_, 0);
  asio::error_code ec(error,
      asio::error::get_system_category());
  asio::detail::throw_error(ec, "event");
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_event.ipp" 2
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_event.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/event.hpp" 2






namespace asio {
namespace detail {






typedef posix_event event;




}
}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_fwd.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_fwd.hpp"
namespace asio {
namespace detail {






typedef class epoll_reactor reactor;
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_fwd.hpp"
}
}
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_operation.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_operation.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_tracking.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_tracking.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_tracking.hpp" 2

namespace asio {
namespace detail {
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_tracking.hpp"
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 154 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_tracking.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/handler_tracking.ipp" 1
# 157 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/handler_tracking.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_operation.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_operation.hpp" 2

namespace asio {
namespace detail {

class task_io_service;



class task_io_service_operation
{
public:
  void complete(task_io_service& owner,
      const asio::error_code& ec, std::size_t bytes_transferred)
  {
    func_(&owner, this, ec, bytes_transferred);
  }

  void destroy()
  {
    func_(0, this, asio::error_code(), 0);
  }

protected:
  typedef void (*func_type)(task_io_service*,
      task_io_service_operation*,
      const asio::error_code&, std::size_t);

  task_io_service_operation(func_type func)
    : next_(0),
      func_(func),
      task_result_(0)
  {
  }


  ~task_io_service_operation()
  {
  }

private:
  friend class op_queue_access;
  task_io_service_operation* next_;
  func_type func_;
protected:
  friend class task_io_service;
  unsigned int task_result_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service_operation.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2

namespace asio {
namespace detail {

struct task_io_service_thread_info;

class task_io_service
  : public asio::detail::service_base<task_io_service>
{
public:
  typedef task_io_service_operation operation;



  inline task_io_service(asio::io_service& io_service,
      std::size_t concurrency_hint = 0);


  inline void shutdown_service();


  inline void init_task();


  inline std::size_t run(asio::error_code& ec);


  inline std::size_t run_one(asio::error_code& ec);


  inline std::size_t poll(asio::error_code& ec);


  inline std::size_t poll_one(asio::error_code& ec);


  inline void stop();


  inline bool stopped() const;


  inline void reset();


  void work_started()
  {
    ++outstanding_work_;
  }


  void work_finished()
  {
    if (--outstanding_work_ == 0)
      stop();
  }


  bool can_dispatch()
  {
    return thread_call_stack::contains(this) != 0;
  }


  template <typename Handler>
  void dispatch(Handler& handler);


  template <typename Handler>
  void post(Handler& handler);



  inline void post_immediate_completion(
      operation* op, bool is_continuation);



  inline void post_deferred_completion(operation* op);



  inline void post_deferred_completions(op_queue<operation>& ops);



  inline void abandon_operations(op_queue<operation>& ops);

private:

  typedef task_io_service_thread_info thread_info;



  inline void do_dispatch(operation* op);


  inline std::size_t do_run_one(mutex::scoped_lock& lock,
      thread_info& this_thread, const asio::error_code& ec);


  inline std::size_t do_poll_one(mutex::scoped_lock& lock,
      thread_info& this_thread, const asio::error_code& ec);


  inline void stop_all_threads(mutex::scoped_lock& lock);


  inline void wake_one_thread_and_unlock(
      mutex::scoped_lock& lock);


  struct task_cleanup;
  friend struct task_cleanup;


  struct work_cleanup;
  friend struct work_cleanup;


  const bool one_thread_;


  mutable mutex mutex_;


  event wakeup_event_;


  reactor* task_;


  struct task_operation : operation
  {
    task_operation() : operation(0) {}
  } task_operation_;


  bool task_interrupted_;


  atomic_count outstanding_work_;


  op_queue<operation> op_queue_;


  bool stopped_;


  bool shutdown_;


  typedef call_stack<task_io_service, thread_info> thread_call_stack;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/completion_handler.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/completion_handler.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/fenced_block.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/fenced_block.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/gcc_x86_fenced_block.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/gcc_x86_fenced_block.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/gcc_x86_fenced_block.hpp" 2

namespace asio {
namespace detail {

class gcc_x86_fenced_block
  : private noncopyable
{
public:
  enum half_t { half };
  enum full_t { full };


  explicit gcc_x86_fenced_block(half_t)
  {
  }


  explicit gcc_x86_fenced_block(full_t)
  {
    lbarrier();
  }


  ~gcc_x86_fenced_block()
  {
    sbarrier();
  }

private:
  static int barrier()
  {
    int r = 0, m = 1;
    __asm__ __volatile__ (
        "xchgl %0, %1" :
        "=r"(r), "=m"(m) :
        "0"(1), "m"(m) :
        "memory", "cc");
    return r;
  }

  static void lbarrier()
  {


    __builtin_ia32_lfence();






  }

  static void sbarrier()
  {


    __builtin_ia32_sfence();






  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/gcc_x86_fenced_block.hpp" 2
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/fenced_block.hpp" 2
# 45 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/fenced_block.hpp"
namespace asio {
namespace detail {
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/fenced_block.hpp"
typedef gcc_x86_fenced_block fenced_block;
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/fenced_block.hpp"
}
}
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/completion_handler.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/operation.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/operation.hpp"
namespace asio {
namespace detail {




typedef task_io_service_operation operation;


}
}
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/completion_handler.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/completion_handler.hpp" 2

namespace asio {
namespace detail {

template <typename Handler>
class completion_handler : public operation
{
public:
  struct ptr { Handler* h; void* v; completion_handler* p; ~ptr() { reset(); } void reset() { if (p) { p->~completion_handler(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(completion_handler), *h); v = 0; } } };

  completion_handler(Handler& h)
    : operation(&completion_handler::do_complete),
      handler_(static_cast<Handler&&>(h))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    completion_handler* h(static_cast<completion_handler*>(base));
    ptr p = { asio::detail::addressof(h->handler_), h, h };

    (void)0;







    Handler handler(static_cast<Handler&&>(h->handler_));
    p.h = asio::detail::addressof(handler);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/completion_handler.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.hpp" 2

namespace asio {
namespace detail {

template <typename Handler>
void task_io_service::dispatch(Handler& handler)
{
  if (thread_call_stack::contains(this))
  {
    fenced_block b(fenced_block::full);
    asio_handler_invoke_helpers::invoke(handler, handler);
  }
  else
  {

    typedef completion_handler<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0;

    do_dispatch(p.p);
    p.v = p.p = 0;
  }
}

template <typename Handler>
void task_io_service::post(Handler& handler)
{
  bool is_continuation =
    asio_handler_cont_helpers::is_continuation(handler);


  typedef completion_handler<Handler> op;
  typename op::ptr p = { asio::detail::addressof(handler),
    asio_handler_alloc_helpers::allocate(
      sizeof(op), handler), 0 };
  p.p = new (p.v) op(handler);

  (void)0;

  post_immediate_completion(p.p, is_continuation);
  p.v = p.p = 0;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.hpp" 2
# 195 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/limits.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/limits.hpp"
# 1 "/usr/include/c++/15/limits" 1 3
# 44 "/usr/include/c++/15/limits" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#pragma GCC diagnostic ignored "-Wlong-long"
#pragma GCC diagnostic ignored "-Wc++23-extensions"
# 165 "/usr/include/c++/15/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 209 "/usr/include/c++/15/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 295 "/usr/include/c++/15/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 318 "/usr/include/c++/15/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 390 "/usr/include/c++/15/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 803 "/usr/include/c++/15/limits" 3
  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffffffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffffffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffffffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1665 "/usr/include/c++/15/limits" 3
  __extension__ template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; __extension__ template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1676 "/usr/include/c++/15/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435082228750796873653722224568e-38F; }

      static constexpr float
      max() noexcept { return 3.40282346638528859811704183484516925e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282346638528859811704183484516925e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.22507385850720138309023271733240406e-308L); }

      static constexpr double
      max() noexcept { return double(1.79769313486231570814527423731704357e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.79769313486231570814527423731704357e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.22044604925031308084726333618164062e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.94065645841246544176568792868221372e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502126385303097021e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502126385303097021e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443400745280086994171e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460252840593361941982e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };
# 1996 "/usr/include/c++/15/limits" 3
__extension__ template<> struct numeric_limits<_Float32> { static constexpr bool is_specialized = true; static constexpr _Float32 min() noexcept { return 1.17549435082228750796873653722224568e-38F32; } static constexpr _Float32 max() noexcept { return 3.40282346638528859811704183484516925e+38F32; } static constexpr _Float32 lowest() noexcept { return -3.40282346638528859811704183484516925e+38F32; } static constexpr int digits = 24; static constexpr int digits10 = 6; static constexpr int max_digits10 = (2 + (24) * 643L / 2136); static constexpr bool is_signed = true; static constexpr bool is_integer = false; static constexpr bool is_exact = false; static constexpr int radix = 2; static constexpr _Float32 epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F32; } static constexpr _Float32 round_error() noexcept { return 0.5F32; } static constexpr int min_exponent = (-125); static constexpr int min_exponent10 = (-37); static constexpr int max_exponent = 128; static constexpr int max_exponent10 = 38; static constexpr bool has_infinity = 1; static constexpr bool has_quiet_NaN = 1; static constexpr bool has_signaling_NaN = has_quiet_NaN; static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr _Float32 infinity() noexcept { return __builtin_huge_valf32(); } static constexpr _Float32 quiet_NaN() noexcept { return __builtin_nanf32(""); } static constexpr _Float32 signaling_NaN() noexcept { return __builtin_nansf32(""); } static constexpr _Float32 denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F32; } static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = false; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_to_nearest; };


__extension__ template<> struct numeric_limits<_Float64> { static constexpr bool is_specialized = true; static constexpr _Float64 min() noexcept { return 2.22507385850720138309023271733240406e-308F64; } static constexpr _Float64 max() noexcept { return 1.79769313486231570814527423731704357e+308F64; } static constexpr _Float64 lowest() noexcept { return -1.79769313486231570814527423731704357e+308F64; } static constexpr int digits = 53; static constexpr int digits10 = 15; static constexpr int max_digits10 = (2 + (53) * 643L / 2136); static constexpr bool is_signed = true; static constexpr bool is_integer = false; static constexpr bool is_exact = false; static constexpr int radix = 2; static constexpr _Float64 epsilon() noexcept { return 2.22044604925031308084726333618164062e-16F64; } static constexpr _Float64 round_error() noexcept { return 0.5F64; } static constexpr int min_exponent = (-1021); static constexpr int min_exponent10 = (-307); static constexpr int max_exponent = 1024; static constexpr int max_exponent10 = 308; static constexpr bool has_infinity = 1; static constexpr bool has_quiet_NaN = 1; static constexpr bool has_signaling_NaN = has_quiet_NaN; static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr _Float64 infinity() noexcept { return __builtin_huge_valf64(); } static constexpr _Float64 quiet_NaN() noexcept { return __builtin_nanf64(""); } static constexpr _Float64 signaling_NaN() noexcept { return __builtin_nansf64(""); } static constexpr _Float64 denorm_min() noexcept { return 4.94065645841246544176568792868221372e-324F64; } static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = false; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_to_nearest; };


__extension__ template<> struct numeric_limits<_Float128> { static constexpr bool is_specialized = true; static constexpr _Float128 min() noexcept { return 3.36210314311209350626267781732175260e-4932F128; } static constexpr _Float128 max() noexcept { return 1.18973149535723176508575932662800702e+4932F128; } static constexpr _Float128 lowest() noexcept { return -1.18973149535723176508575932662800702e+4932F128; } static constexpr int digits = 113; static constexpr int digits10 = 33; static constexpr int max_digits10 = (2 + (113) * 643L / 2136); static constexpr bool is_signed = true; static constexpr bool is_integer = false; static constexpr bool is_exact = false; static constexpr int radix = 2; static constexpr _Float128 epsilon() noexcept { return 1.92592994438723585305597794258492732e-34F128; } static constexpr _Float128 round_error() noexcept { return 0.5F128; } static constexpr int min_exponent = (-16381); static constexpr int min_exponent10 = (-4931); static constexpr int max_exponent = 16384; static constexpr int max_exponent10 = 4932; static constexpr bool has_infinity = 1; static constexpr bool has_quiet_NaN = 1; static constexpr bool has_signaling_NaN = has_quiet_NaN; static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr _Float128 infinity() noexcept { return __builtin_huge_valf128(); } static constexpr _Float128 quiet_NaN() noexcept { return __builtin_nanf128(""); } static constexpr _Float128 signaling_NaN() noexcept { return __builtin_nansf128(""); } static constexpr _Float128 denorm_min() noexcept { return 6.47517511943802511092443895822764655e-4966F128; } static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = false; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_to_nearest; };
# 2094 "/usr/include/c++/15/limits" 3
  __extension__
  template<>
    struct numeric_limits<__float128>
    {
      static constexpr bool is_specialized = true;

      static constexpr __float128
      min() noexcept
      {


 return double(9.3132257461547852e-10) * _S_1pm16352();



      }

      static constexpr __float128
      max() noexcept
      {



 return (__float128(double(3.4028236692093843e+38))
    + double(3.7778931862957153e+22) + double(8.35584e+6))
   * _S_1p16256();



      }

      static constexpr __float128
      lowest() noexcept
      { return -max(); }

      static constexpr int digits = 113;
      static constexpr int digits10 = 33;

      static constexpr int max_digits10 = 36;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr __float128
      epsilon() noexcept
      { return double(1.9259299443872359e-34); }

      static constexpr __float128
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = -16381;
      static constexpr int min_exponent10 = -4931;
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;


      static constexpr bool has_signaling_NaN = true;



      static constexpr float_denorm_style has_denorm
 = denorm_present;
      static constexpr bool has_denorm_loss = false;

      static constexpr __float128
      infinity() noexcept
      { return __builtin_huge_val(); }

      static constexpr __float128
      quiet_NaN() noexcept
      { return __builtin_nan(""); }

      static constexpr __float128
      signaling_NaN() noexcept
      {

 return __builtin_nansq("");





      }

      static constexpr __float128
      denorm_min() noexcept
      {


 return double(1.7936620343357659e-43) * _S_1pm16352();



      }

      static constexpr bool is_iec559 = has_signaling_NaN;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
 = round_to_nearest;


    private:
      static constexpr __float128
      _S_4p(__float128 __v) noexcept
      { return __v * __v * __v * __v; }

      static constexpr __float128
      _S_1pm4088() noexcept
      { return _S_4p( double(2.2250738585072014e-308)); }

      static constexpr __float128
      _S_1pm16352() noexcept
      { return _S_4p(_S_1pm4088()); }

      static constexpr __float128
      _S_1p4064() noexcept
      { return _S_4p( double(7.0222388080559215e+305)); }

      static constexpr __float128
      _S_1p16256() noexcept
      { return _S_4p(_S_1p4064()); }

    };




}
# 2239 "/usr/include/c++/15/limits" 3
#pragma GCC diagnostic pop
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/limits.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/object_pool.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/object_pool.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/object_pool.hpp" 2


# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/object_pool.hpp"
namespace asio {
namespace detail {

template <typename Object>
class object_pool;

class object_pool_access
{
public:
  template <typename Object>
  static Object* create()
  {
    return new Object;
  }

  template <typename Object>
  static void destroy(Object* o)
  {
    delete o;
  }

  template <typename Object>
  static Object*& next(Object* o)
  {
    return o->next_;
  }

  template <typename Object>
  static Object*& prev(Object* o)
  {
    return o->prev_;
  }
};

template <typename Object>
class object_pool
  : private noncopyable
{
public:

  object_pool()
    : live_list_(0),
      free_list_(0)
  {
  }


  ~object_pool()
  {
    destroy_list(live_list_);
    destroy_list(free_list_);
  }


  Object* first()
  {
    return live_list_;
  }


  Object* alloc()
  {
    Object* o = free_list_;
    if (o)
      free_list_ = object_pool_access::next(free_list_);
    else
      o = object_pool_access::create<Object>();

    object_pool_access::next(o) = live_list_;
    object_pool_access::prev(o) = 0;
    if (live_list_)
      object_pool_access::prev(live_list_) = o;
    live_list_ = o;

    return o;
  }


  void free(Object* o)
  {
    if (live_list_ == o)
      live_list_ = object_pool_access::next(o);

    if (object_pool_access::prev(o))
    {
      object_pool_access::next(object_pool_access::prev(o))
        = object_pool_access::next(o);
    }

    if (object_pool_access::next(o))
    {
      object_pool_access::prev(object_pool_access::next(o))
        = object_pool_access::prev(o);
    }

    object_pool_access::next(o) = free_list_;
    object_pool_access::prev(o) = 0;
    free_list_ = o;
  }

private:

  void destroy_list(Object* list)
  {
    while (list)
    {
      Object* o = list;
      list = object_pool_access::next(o);
      object_pool_access::destroy(o);
    }
  }


  Object* live_list_;


  Object* free_list_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 145 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/object_pool.hpp" 2
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_op.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_op.hpp" 2

namespace asio {
namespace detail {

class reactor_op
  : public operation
{
public:

  asio::error_code ec_;


  std::size_t bytes_transferred_;


  bool perform()
  {
    return perform_func_(this);
  }

protected:
  typedef bool (*perform_func_type)(reactor_op*);

  reactor_op(perform_func_type perform_func, func_type complete_func)
    : operation(complete_func),
      bytes_transferred_(0),
      perform_func_(perform_func)
  {
  }

private:
  perform_func_type perform_func_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor_op.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/select_interrupter.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/select_interrupter.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/eventfd_select_interrupter.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/eventfd_select_interrupter.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/eventfd_select_interrupter.hpp" 2

namespace asio {
namespace detail {

class eventfd_select_interrupter
{
public:

  inline eventfd_select_interrupter();


  inline ~eventfd_select_interrupter();


  inline void recreate();


  inline void interrupt();


  inline bool reset();


  int read_descriptor() const
  {
    return read_descriptor_;
  }

private:

  inline void open_descriptors();


  inline void close_descriptors();





  int read_descriptor_;





  int write_descriptor_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/eventfd_select_interrupter.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
# 1 "/usr/include/x86_64-linux-gnu/sys/eventfd.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/eventfd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/eventfd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/eventfd.h" 3 4

# 23 "/usr/include/x86_64-linux-gnu/bits/eventfd.h" 3 4
enum
  {
    EFD_SEMAPHORE = 00000001,

    EFD_CLOEXEC = 02000000,

    EFD_NONBLOCK = 00004000

  };
# 25 "/usr/include/x86_64-linux-gnu/sys/eventfd.h" 2 3 4


typedef uint64_t eventfd_t;


extern "C" {



extern int eventfd (unsigned int __count, int __flags) noexcept (true);


extern int eventfd_read (int __fd, eventfd_t *__value);


extern int eventfd_write (int __fd, eventfd_t __value);

}
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/cstdint.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/cstdint.hpp"

# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/cstdint.hpp"
namespace asio {


using std::int16_t;
using std::uint16_t;
using std::int32_t;
using std::uint32_t;
using std::int64_t;
using std::uint64_t;
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/cstdint.hpp"
}
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/eventfd_select_interrupter.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 2

namespace asio {
namespace detail {

eventfd_select_interrupter::eventfd_select_interrupter()
{
  open_descriptors();
}

void eventfd_select_interrupter::open_descriptors()
{
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
  write_descriptor_ = read_descriptor_ =
    ::eventfd(0, 
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                EFD_CLOEXEC 
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                            | 
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                              EFD_NONBLOCK
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                          );




  if (read_descriptor_ == -1 && 
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                               (*__errno_location ()) 
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                     == 
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                        22
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                              )
  {
    write_descriptor_ = read_descriptor_ = ::eventfd(0, 0);
    if (read_descriptor_ != -1)
    {
      ::fcntl(read_descriptor_, 
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                               4
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                      , 
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                        04000
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                                  );
      ::fcntl(read_descriptor_, 
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                               2
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                      , 
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                        1
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                                  );
    }
  }


  if (read_descriptor_ == -1)
  {
    int pipe_fds[2];
    if (pipe(pipe_fds) == 0)
    {
      read_descriptor_ = pipe_fds[0];
      ::fcntl(read_descriptor_, 
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                               4
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                      , 
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                        04000
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                                  );
      ::fcntl(read_descriptor_, 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                               2
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                      , 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                        1
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                                  );
      write_descriptor_ = pipe_fds[1];
      ::fcntl(write_descriptor_, 
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                4
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                       , 
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                         04000
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                                   );
      ::fcntl(write_descriptor_, 
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                2
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                       , 
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                         1
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                                   );
    }
    else
    {
      asio::error_code ec(
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                         (*__errno_location ())
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                              ,
          asio::error::get_system_category());
      asio::detail::throw_error(ec, "eventfd_select_interrupter");
    }
  }
}

eventfd_select_interrupter::~eventfd_select_interrupter()
{
  close_descriptors();
}

void eventfd_select_interrupter::close_descriptors()
{
  if (write_descriptor_ != -1 && write_descriptor_ != read_descriptor_)
    ::close(write_descriptor_);
  if (read_descriptor_ != -1)
    ::close(read_descriptor_);
}

void eventfd_select_interrupter::recreate()
{
  close_descriptors();

  write_descriptor_ = -1;
  read_descriptor_ = -1;

  open_descriptors();
}

void eventfd_select_interrupter::interrupt()
{
  uint64_t counter(1UL);
  int result = ::write(write_descriptor_, &counter, sizeof(uint64_t));
  (void)result;
}

bool eventfd_select_interrupter::reset()
{
  if (write_descriptor_ == read_descriptor_)
  {
    for (;;)
    {

      uint64_t counter(0);
      
# 133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
     (*__errno_location ()) 
# 133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
           = 0;
      int bytes_read = ::read(read_descriptor_, &counter, sizeof(uint64_t));
      if (bytes_read < 0 && 
# 135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                           (*__errno_location ()) 
# 135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                 == 
# 135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                    4
# 135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                         )
        continue;
      bool was_interrupted = (bytes_read > 0);
      return was_interrupted;
    }
  }
  else
  {
    for (;;)
    {

      char data[1024];
      int bytes_read = ::read(read_descriptor_, data, sizeof(data));
      if (bytes_read < 0 && 
# 148 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                           (*__errno_location ()) 
# 148 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                 == 
# 148 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 3 4
                                    4
# 148 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp"
                                         )
        continue;
      bool was_interrupted = (bytes_read > 0);
      while (bytes_read == sizeof(data))
        bytes_read = ::read(read_descriptor_, data, sizeof(data));
      return was_interrupted;
    }
  }
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 162 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/eventfd_select_interrupter.ipp" 2
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/eventfd_select_interrupter.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/select_interrupter.hpp" 2




namespace asio {
namespace detail {




typedef eventfd_select_interrupter select_interrupter;




}
}
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_base.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_base.hpp" 2

namespace asio {
namespace detail {

class timer_queue_base
  : private noncopyable
{
public:

  timer_queue_base() : next_(0) {}


  virtual ~timer_queue_base() {}


  virtual bool empty() const = 0;


  virtual long wait_duration_msec(long max_duration) const = 0;


  virtual long wait_duration_usec(long max_duration) const = 0;


  virtual void get_ready_timers(op_queue<operation>& ops) = 0;


  virtual void get_all_timers(op_queue<operation>& ops) = 0;

private:
  friend class timer_queue_set;


  timer_queue_base* next_;
};

template <typename Time_Traits>
class timer_queue;

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_base.hpp" 2
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_set.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_set.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_set.hpp" 2

namespace asio {
namespace detail {

class timer_queue_set
{
public:

  inline timer_queue_set();


  inline void insert(timer_queue_base* q);


  inline void erase(timer_queue_base* q);


  inline bool all_empty() const;


  inline long wait_duration_msec(long max_duration) const;


  inline long wait_duration_usec(long max_duration) const;


  inline void get_ready_timers(op_queue<operation>& ops);


  inline void get_all_timers(op_queue<operation>& ops);

private:
  timer_queue_base* first_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_set.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/timer_queue_set.ipp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/timer_queue_set.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_set.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/timer_queue_set.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/timer_queue_set.ipp" 2

namespace asio {
namespace detail {

timer_queue_set::timer_queue_set()
  : first_(0)
{
}

void timer_queue_set::insert(timer_queue_base* q)
{
  q->next_ = first_;
  first_ = q;
}

void timer_queue_set::erase(timer_queue_base* q)
{
  if (first_)
  {
    if (q == first_)
    {
      first_ = q->next_;
      q->next_ = 0;
      return;
    }

    for (timer_queue_base* p = first_; p->next_; p = p->next_)
    {
      if (p->next_ == q)
      {
        p->next_ = q->next_;
        q->next_ = 0;
        return;
      }
    }
  }
}

bool timer_queue_set::all_empty() const
{
  for (timer_queue_base* p = first_; p; p = p->next_)
    if (!p->empty())
      return false;
  return true;
}

long timer_queue_set::wait_duration_msec(long max_duration) const
{
  long min_duration = max_duration;
  for (timer_queue_base* p = first_; p; p = p->next_)
    min_duration = p->wait_duration_msec(min_duration);
  return min_duration;
}

long timer_queue_set::wait_duration_usec(long max_duration) const
{
  long min_duration = max_duration;
  for (timer_queue_base* p = first_; p; p = p->next_)
    min_duration = p->wait_duration_usec(min_duration);
  return min_duration;
}

void timer_queue_set::get_ready_timers(op_queue<operation>& ops)
{
  for (timer_queue_base* p = first_; p; p = p->next_)
    p->get_ready_timers(ops);
}

void timer_queue_set::get_all_timers(op_queue<operation>& ops)
{
  for (timer_queue_base* p = first_; p; p = p->next_)
    p->get_all_timers(ops);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/timer_queue_set.ipp" 2
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue_set.hpp" 2
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_op.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_op.hpp" 2

namespace asio {
namespace detail {

class wait_op
  : public operation
{
public:

  asio::error_code ec_;

protected:
  wait_op(func_type func)
    : operation(func)
  {
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_op.hpp" 2
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 36 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2

namespace asio {
namespace detail {

class epoll_reactor
  : public asio::detail::service_base<epoll_reactor>
{
public:
  enum op_types { read_op = 0, write_op = 1,
    connect_op = 1, except_op = 2, max_ops = 3 };


  class descriptor_state : operation
  {
    friend class epoll_reactor;
    friend class object_pool_access;

    descriptor_state* next_;
    descriptor_state* prev_;

    mutex mutex_;
    epoll_reactor* reactor_;
    int descriptor_;
    uint32_t registered_events_;
    op_queue<reactor_op> op_queue_[max_ops];
    bool shutdown_;

    inline descriptor_state();
    void set_ready_events(uint32_t events) { task_result_ = events; }
    inline operation* perform_io(uint32_t events);
    inline static void do_complete(
        io_service_impl* owner, operation* base,
        const asio::error_code& ec, std::size_t bytes_transferred);
  };


  typedef descriptor_state* per_descriptor_data;


  inline epoll_reactor(asio::io_service& io_service);


  inline ~epoll_reactor();


  inline void shutdown_service();


  inline void fork_service(
      asio::io_service::fork_event fork_ev);


  inline void init_task();



  inline int register_descriptor(socket_type descriptor,
      per_descriptor_data& descriptor_data);



  inline int register_internal_descriptor(
      int op_type, socket_type descriptor,
      per_descriptor_data& descriptor_data, reactor_op* op);


  inline void move_descriptor(socket_type descriptor,
      per_descriptor_data& target_descriptor_data,
      per_descriptor_data& source_descriptor_data);


  void post_immediate_completion(reactor_op* op, bool is_continuation)
  {
    io_service_.post_immediate_completion(op, is_continuation);
  }



  inline void start_op(int op_type, socket_type descriptor,
      per_descriptor_data& descriptor_data, reactor_op* op,
      bool is_continuation, bool allow_speculative);




  inline void cancel_ops(socket_type descriptor,
      per_descriptor_data& descriptor_data);



  inline void deregister_descriptor(socket_type descriptor,
      per_descriptor_data& descriptor_data, bool closing);


  inline void deregister_internal_descriptor(
      socket_type descriptor, per_descriptor_data& descriptor_data);


  template <typename Time_Traits>
  void add_timer_queue(timer_queue<Time_Traits>& timer_queue);


  template <typename Time_Traits>
  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue);



  template <typename Time_Traits>
  void schedule_timer(timer_queue<Time_Traits>& queue,
      const typename Time_Traits::time_type& time,
      typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op);



  template <typename Time_Traits>
  std::size_t cancel_timer(timer_queue<Time_Traits>& queue,
      typename timer_queue<Time_Traits>::per_timer_data& timer,
      std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)());


  inline void run(bool block, op_queue<operation>& ops);


  inline void interrupt();

private:

  enum { epoll_size = 20000 };



  inline static int do_epoll_create();


  inline static int do_timerfd_create();


  inline descriptor_state* allocate_descriptor_state();


  inline void free_descriptor_state(descriptor_state* s);


  inline void do_add_timer_queue(timer_queue_base& queue);


  inline void do_remove_timer_queue(timer_queue_base& queue);


  inline void update_timeout();




  inline int get_timeout();




  inline int get_timeout(itimerspec& ts);



  io_service_impl& io_service_;


  mutex mutex_;


  select_interrupter interrupter_;


  int epoll_fd_;


  int timer_fd_;


  timer_queue_set timer_queues_;


  bool shutdown_;


  mutex registered_descriptors_mutex_;


  object_pool<descriptor_state> registered_descriptors_;


  struct perform_io_cleanup_on_block_exit;
  friend struct perform_io_cleanup_on_block_exit;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 234 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.hpp" 2

namespace asio {
namespace detail {

template <typename Time_Traits>
void epoll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_add_timer_queue(queue);
}

template <typename Time_Traits>
void epoll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_remove_timer_queue(queue);
}

template <typename Time_Traits>
void epoll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,
    const typename Time_Traits::time_type& time,
    typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
{
  mutex::scoped_lock lock(mutex_);

  if (shutdown_)
  {
    io_service_.post_immediate_completion(op, false);
    return;
  }

  bool earliest = queue.enqueue_timer(time, timer, op);
  io_service_.work_started();
  if (earliest)
    update_timeout();
}

template <typename Time_Traits>
std::size_t epoll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& timer,
    std::size_t max_cancelled)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  std::size_t n = queue.cancel_timer(timer, ops, max_cancelled);
  lock.unlock();
  io_service_.post_deferred_completions(ops);
  return n;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.hpp" 2
# 236 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
# 1 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/epoll.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/epoll.h" 3 4

# 23 "/usr/include/x86_64-linux-gnu/bits/epoll.h" 3 4
enum
  {
    EPOLL_CLOEXEC = 02000000

  };
# 30 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 2 3 4






enum EPOLL_EVENTS
  {
    EPOLLIN = 0x001,

    EPOLLPRI = 0x002,

    EPOLLOUT = 0x004,

    EPOLLRDNORM = 0x040,

    EPOLLRDBAND = 0x080,

    EPOLLWRNORM = 0x100,

    EPOLLWRBAND = 0x200,

    EPOLLMSG = 0x400,

    EPOLLERR = 0x008,

    EPOLLHUP = 0x010,

    EPOLLRDHUP = 0x2000,

    EPOLLEXCLUSIVE = 1u << 28,

    EPOLLWAKEUP = 1u << 29,

    EPOLLONESHOT = 1u << 30,

    EPOLLET = 1u << 31

  };
# 77 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 3 4
typedef union epoll_data
{
  void *ptr;
  int fd;
  uint32_t u32;
  uint64_t u64;
} epoll_data_t;

struct epoll_event
{
  uint32_t events;
  epoll_data_t data;
} __attribute__ ((__packed__));

struct epoll_params
{
  uint32_t busy_poll_usecs;
  uint16_t busy_poll_budget;
  uint8_t prefer_busy_poll;


  uint8_t __pad;
};





extern "C" {





extern int epoll_create (int __size) noexcept (true);



extern int epoll_create1 (int __flags) noexcept (true);
# 124 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 3 4
extern int epoll_ctl (int __epfd, int __op, int __fd,
        struct epoll_event *__event) noexcept (true);
# 138 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 3 4
extern int epoll_wait (int __epfd, struct epoll_event *__events,
         int __maxevents, int __timeout)
 __attribute__ ((__access__ (__write_only__, 2, 3))) __attribute__ ((__nonnull__ (2)));







extern int epoll_pwait (int __epfd, struct epoll_event *__events,
   int __maxevents, int __timeout,
   const __sigset_t *__ss)
 __attribute__ ((__access__ (__write_only__, 2, 3))) __attribute__ ((__nonnull__ (2)));






extern int epoll_pwait2 (int __epfd, struct epoll_event *__events,
    int __maxevents, const struct timespec *__timeout,
    const __sigset_t *__ss)
 __attribute__ ((__access__ (__write_only__, 2, 3))) __attribute__ ((__nonnull__ (2)));
# 175 "/usr/include/x86_64-linux-gnu/sys/epoll.h" 3 4
}
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 2




# 1 "/usr/include/x86_64-linux-gnu/sys/timerfd.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/timerfd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timerfd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/timerfd.h" 3 4
enum
  {
    TFD_CLOEXEC = 02000000,

    TFD_NONBLOCK = 00004000

  };
# 26 "/usr/include/x86_64-linux-gnu/sys/timerfd.h" 2 3 4



enum
  {
    TFD_TIMER_ABSTIME = 1 << 0,

    TFD_TIMER_CANCEL_ON_SET = 1 << 1

  };


extern "C" {


extern int timerfd_create (__clockid_t __clock_id, int __flags) noexcept (true);




extern int timerfd_settime (int __ufd, int __flags,
       const struct itimerspec *__utmr,
       struct itimerspec *__otmr) noexcept (true);
# 63 "/usr/include/x86_64-linux-gnu/sys/timerfd.h" 3 4
extern int timerfd_gettime (int __ufd, struct itimerspec *__otmr) noexcept (true);
# 75 "/usr/include/x86_64-linux-gnu/sys/timerfd.h" 3 4
}
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 2


# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
namespace asio {
namespace detail {

epoll_reactor::epoll_reactor(asio::io_service& io_service)
  : asio::detail::service_base<epoll_reactor>(io_service),
    io_service_(use_service<io_service_impl>(io_service)),
    mutex_(),
    interrupter_(),
    epoll_fd_(do_epoll_create()),
    timer_fd_(do_timerfd_create()),
    shutdown_(false)
{

  epoll_event ev = { 0, { 0 } };
  ev.events = 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
             EPOLLIN 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                     | 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                       EPOLLERR 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                | 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                  EPOLLET
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                         ;
  ev.data.ptr = &interrupter_;
  epoll_ctl(epoll_fd_, 
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                      1
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                   , interrupter_.read_descriptor(), &ev);
  interrupter_.interrupt();


  if (timer_fd_ != -1)
  {
    ev.events = 
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
               EPOLLIN 
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                       | 
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                         EPOLLERR
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                 ;
    ev.data.ptr = &timer_fd_;
    epoll_ctl(epoll_fd_, 
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                        1
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                     , timer_fd_, &ev);
  }
}

epoll_reactor::~epoll_reactor()
{
  if (epoll_fd_ != -1)
    close(epoll_fd_);
  if (timer_fd_ != -1)
    close(timer_fd_);
}

void epoll_reactor::shutdown_service()
{
  mutex::scoped_lock lock(mutex_);
  shutdown_ = true;
  lock.unlock();

  op_queue<operation> ops;

  while (descriptor_state* state = registered_descriptors_.first())
  {
    for (int i = 0; i < max_ops; ++i)
      ops.push(state->op_queue_[i]);
    state->shutdown_ = true;
    registered_descriptors_.free(state);
  }

  timer_queues_.get_all_timers(ops);

  io_service_.abandon_operations(ops);
}

void epoll_reactor::fork_service(asio::io_service::fork_event fork_ev)
{
  if (fork_ev == asio::io_service::fork_child)
  {
    if (epoll_fd_ != -1)
      ::close(epoll_fd_);
    epoll_fd_ = -1;
    epoll_fd_ = do_epoll_create();

    if (timer_fd_ != -1)
      ::close(timer_fd_);
    timer_fd_ = -1;
    timer_fd_ = do_timerfd_create();

    interrupter_.recreate();


    epoll_event ev = { 0, { 0 } };
    ev.events = 
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
               EPOLLIN 
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                       | 
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                         EPOLLERR 
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                  | 
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                    EPOLLET
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                           ;
    ev.data.ptr = &interrupter_;
    epoll_ctl(epoll_fd_, 
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                        1
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                     , interrupter_.read_descriptor(), &ev);
    interrupter_.interrupt();


    if (timer_fd_ != -1)
    {
      ev.events = 
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                 EPOLLIN 
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                         | 
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                           EPOLLERR
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                   ;
      ev.data.ptr = &timer_fd_;
      epoll_ctl(epoll_fd_, 
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                          1
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                       , timer_fd_, &ev);
    }

    update_timeout();


    mutex::scoped_lock descriptors_lock(registered_descriptors_mutex_);
    for (descriptor_state* state = registered_descriptors_.first();
        state != 0; state = state->next_)
    {
      ev.events = state->registered_events_;
      ev.data.ptr = state;
      int result = epoll_ctl(epoll_fd_, 
# 131 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                       1
# 131 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                    , state->descriptor_, &ev);
      if (result != 0)
      {
        asio::error_code ec(
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                           (*__errno_location ())
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                ,
            asio::error::get_system_category());
        asio::detail::throw_error(ec, "epoll re-registration");
      }
    }
  }
}

void epoll_reactor::init_task()
{
  io_service_.init_task();
}

int epoll_reactor::register_descriptor(socket_type descriptor,
    epoll_reactor::per_descriptor_data& descriptor_data)
{
  descriptor_data = allocate_descriptor_state();

  {
    mutex::scoped_lock descriptor_lock(descriptor_data->mutex_);

    descriptor_data->reactor_ = this;
    descriptor_data->descriptor_ = descriptor;
    descriptor_data->shutdown_ = false;
  }

  epoll_event ev = { 0, { 0 } };
  ev.events = 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
             EPOLLIN 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                     | 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                       EPOLLERR 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                | 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                  EPOLLHUP 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                           | 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                             EPOLLPRI 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                      | 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                                        EPOLLET
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                               ;
  descriptor_data->registered_events_ = ev.events;
  ev.data.ptr = descriptor_data;
  int result = epoll_ctl(epoll_fd_, 
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                   1
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                , descriptor, &ev);
  if (result != 0)
    return 
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
          (*__errno_location ())
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
               ;

  return 0;
}

int epoll_reactor::register_internal_descriptor(
    int op_type, socket_type descriptor,
    epoll_reactor::per_descriptor_data& descriptor_data, reactor_op* op)
{
  descriptor_data = allocate_descriptor_state();

  {
    mutex::scoped_lock descriptor_lock(descriptor_data->mutex_);

    descriptor_data->reactor_ = this;
    descriptor_data->descriptor_ = descriptor;
    descriptor_data->shutdown_ = false;
    descriptor_data->op_queue_[op_type].push(op);
  }

  epoll_event ev = { 0, { 0 } };
  ev.events = 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
             EPOLLIN 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                     | 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                       EPOLLERR 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                | 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                  EPOLLHUP 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                           | 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                             EPOLLPRI 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                      | 
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                                        EPOLLET
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                               ;
  descriptor_data->registered_events_ = ev.events;
  ev.data.ptr = descriptor_data;
  int result = epoll_ctl(epoll_fd_, 
# 190 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                   1
# 190 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                , descriptor, &ev);
  if (result != 0)
    return 
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
          (*__errno_location ())
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
               ;

  return 0;
}

void epoll_reactor::move_descriptor(socket_type,
    epoll_reactor::per_descriptor_data& target_descriptor_data,
    epoll_reactor::per_descriptor_data& source_descriptor_data)
{
  target_descriptor_data = source_descriptor_data;
  source_descriptor_data = 0;
}

void epoll_reactor::start_op(int op_type, socket_type descriptor,
    epoll_reactor::per_descriptor_data& descriptor_data, reactor_op* op,
    bool is_continuation, bool allow_speculative)
{
  if (!descriptor_data)
  {
    op->ec_ = asio::error::bad_descriptor;
    post_immediate_completion(op, is_continuation);
    return;
  }

  mutex::scoped_lock descriptor_lock(descriptor_data->mutex_);

  if (descriptor_data->shutdown_)
  {
    post_immediate_completion(op, is_continuation);
    return;
  }

  if (descriptor_data->op_queue_[op_type].empty())
  {
    if (allow_speculative
        && (op_type != read_op
          || descriptor_data->op_queue_[except_op].empty()))
    {
      if (op->perform())
      {
        descriptor_lock.unlock();
        io_service_.post_immediate_completion(op, is_continuation);
        return;
      }

      if (op_type == write_op)
      {
        if ((descriptor_data->registered_events_ & 
# 239 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                                  EPOLLOUT
# 239 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                          ) == 0)
        {
          epoll_event ev = { 0, { 0 } };
          ev.events = descriptor_data->registered_events_ | 
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                                           EPOLLOUT
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                                   ;
          ev.data.ptr = descriptor_data;
          if (epoll_ctl(epoll_fd_, 
# 244 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                  3
# 244 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                               , descriptor, &ev) == 0)
          {
            descriptor_data->registered_events_ |= ev.events;
          }
          else
          {
            op->ec_ = asio::error_code(
# 250 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                      (*__errno_location ())
# 250 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                           ,
                asio::error::get_system_category());
            io_service_.post_immediate_completion(op, is_continuation);
            return;
          }
        }
      }
    }
    else
    {
      if (op_type == write_op)
      {
        descriptor_data->registered_events_ |= 
# 262 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                              EPOLLOUT
# 262 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                      ;
      }

      epoll_event ev = { 0, { 0 } };
      ev.events = descriptor_data->registered_events_;
      ev.data.ptr = descriptor_data;
      epoll_ctl(epoll_fd_, 
# 268 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                          3
# 268 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                       , descriptor, &ev);
    }
  }

  descriptor_data->op_queue_[op_type].push(op);
  io_service_.work_started();
}

void epoll_reactor::cancel_ops(socket_type,
    epoll_reactor::per_descriptor_data& descriptor_data)
{
  if (!descriptor_data)
    return;

  mutex::scoped_lock descriptor_lock(descriptor_data->mutex_);

  op_queue<operation> ops;
  for (int i = 0; i < max_ops; ++i)
  {
    while (reactor_op* op = descriptor_data->op_queue_[i].front())
    {
      op->ec_ = asio::error::operation_aborted;
      descriptor_data->op_queue_[i].pop();
      ops.push(op);
    }
  }

  descriptor_lock.unlock();

  io_service_.post_deferred_completions(ops);
}

void epoll_reactor::deregister_descriptor(socket_type descriptor,
    epoll_reactor::per_descriptor_data& descriptor_data, bool closing)
{
  if (!descriptor_data)
    return;

  mutex::scoped_lock descriptor_lock(descriptor_data->mutex_);

  if (!descriptor_data->shutdown_)
  {
    if (closing)
    {


    }
    else
    {
      epoll_event ev = { 0, { 0 } };
      epoll_ctl(epoll_fd_, 
# 318 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                          2
# 318 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                       , descriptor, &ev);
    }

    op_queue<operation> ops;
    for (int i = 0; i < max_ops; ++i)
    {
      while (reactor_op* op = descriptor_data->op_queue_[i].front())
      {
        op->ec_ = asio::error::operation_aborted;
        descriptor_data->op_queue_[i].pop();
        ops.push(op);
      }
    }

    descriptor_data->descriptor_ = -1;
    descriptor_data->shutdown_ = true;

    descriptor_lock.unlock();

    free_descriptor_state(descriptor_data);
    descriptor_data = 0;

    io_service_.post_deferred_completions(ops);
  }
}

void epoll_reactor::deregister_internal_descriptor(socket_type descriptor,
    epoll_reactor::per_descriptor_data& descriptor_data)
{
  if (!descriptor_data)
    return;

  mutex::scoped_lock descriptor_lock(descriptor_data->mutex_);

  if (!descriptor_data->shutdown_)
  {
    epoll_event ev = { 0, { 0 } };
    epoll_ctl(epoll_fd_, 
# 355 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                        2
# 355 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                     , descriptor, &ev);

    op_queue<operation> ops;
    for (int i = 0; i < max_ops; ++i)
      ops.push(descriptor_data->op_queue_[i]);

    descriptor_data->descriptor_ = -1;
    descriptor_data->shutdown_ = true;

    descriptor_lock.unlock();

    free_descriptor_state(descriptor_data);
    descriptor_data = 0;
  }
}

void epoll_reactor::run(bool block, op_queue<operation>& ops)
{







  int timeout;
  if (timer_fd_ != -1)
    timeout = block ? -1 : 0;
  else
  {
    mutex::scoped_lock lock(mutex_);
    timeout = block ? get_timeout() : 0;
  }


  epoll_event events[128];
  int num_events = epoll_wait(epoll_fd_, events, 128, timeout);


  bool check_timers = (timer_fd_ == -1);





  for (int i = 0; i < num_events; ++i)
  {
    void* ptr = events[i].data.ptr;
    if (ptr == &interrupter_)
    {






      if (timer_fd_ == -1)
        check_timers = true;



    }

    else if (ptr == &timer_fd_)
    {
      check_timers = true;
    }

    else
    {



      descriptor_state* descriptor_data = static_cast<descriptor_state*>(ptr);
      descriptor_data->set_ready_events(events[i].events);
      ops.push(descriptor_data);
    }
  }

  if (check_timers)
  {
    mutex::scoped_lock common_lock(mutex_);
    timer_queues_.get_ready_timers(ops);


    if (timer_fd_ != -1)
    {
      itimerspec new_timeout;
      itimerspec old_timeout;
      int flags = get_timeout(new_timeout);
      timerfd_settime(timer_fd_, flags, &new_timeout, &old_timeout);
    }

  }
}

void epoll_reactor::interrupt()
{
  epoll_event ev = { 0, { 0 } };
  ev.events = 
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
             EPOLLIN 
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                     | 
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                       EPOLLERR 
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                | 
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                  EPOLLET
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                         ;
  ev.data.ptr = &interrupter_;
  epoll_ctl(epoll_fd_, 
# 456 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                      3
# 456 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                   , interrupter_.read_descriptor(), &ev);
}

int epoll_reactor::do_epoll_create()
{

  int fd = epoll_create1(
# 462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                        EPOLL_CLOEXEC
# 462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                     );





  if (fd == -1 && (
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                  (*__errno_location ()) 
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                        == 
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                           22 
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                  || 
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                     (*__errno_location ()) 
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                           == 
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                              38
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                    ))
  {
    fd = epoll_create(epoll_size);
    if (fd != -1)
      ::fcntl(fd, 
# 472 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                 2
# 472 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                        , 
# 472 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                          1
# 472 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                    );
  }

  if (fd == -1)
  {
    asio::error_code ec(
# 477 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                       (*__errno_location ())
# 477 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                            ,
        asio::error::get_system_category());
    asio::detail::throw_error(ec, "epoll");
  }

  return fd;
}

int epoll_reactor::do_timerfd_create()
{


  int fd = timerfd_create(
# 489 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                         1
# 489 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                        , 
# 489 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                          TFD_CLOEXEC
# 489 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                     );





  if (fd == -1 && 
# 495 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                 (*__errno_location ()) 
# 495 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                       == 
# 495 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                          22
# 495 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                )
  {
    fd = timerfd_create(
# 497 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                       1
# 497 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                      , 0);
    if (fd != -1)
      ::fcntl(fd, 
# 499 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                 2
# 499 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                        , 
# 499 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                          1
# 499 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                    );
  }

  return fd;



}

epoll_reactor::descriptor_state* epoll_reactor::allocate_descriptor_state()
{
  mutex::scoped_lock descriptors_lock(registered_descriptors_mutex_);
  return registered_descriptors_.alloc();
}

void epoll_reactor::free_descriptor_state(epoll_reactor::descriptor_state* s)
{
  mutex::scoped_lock descriptors_lock(registered_descriptors_mutex_);
  registered_descriptors_.free(s);
}

void epoll_reactor::do_add_timer_queue(timer_queue_base& queue)
{
  mutex::scoped_lock lock(mutex_);
  timer_queues_.insert(&queue);
}

void epoll_reactor::do_remove_timer_queue(timer_queue_base& queue)
{
  mutex::scoped_lock lock(mutex_);
  timer_queues_.erase(&queue);
}

void epoll_reactor::update_timeout()
{

  if (timer_fd_ != -1)
  {
    itimerspec new_timeout;
    itimerspec old_timeout;
    int flags = get_timeout(new_timeout);
    timerfd_settime(timer_fd_, flags, &new_timeout, &old_timeout);
    return;
  }

  interrupt();
}

int epoll_reactor::get_timeout()
{


  return timer_queues_.wait_duration_msec(5 * 60 * 1000);
}


int epoll_reactor::get_timeout(itimerspec& ts)
{
  ts.it_interval.tv_sec = 0;
  ts.it_interval.tv_nsec = 0;

  long usec = timer_queues_.wait_duration_usec(5 * 60 * 1000 * 1000);
  ts.it_value.tv_sec = usec / 1000000;
  ts.it_value.tv_nsec = usec ? (usec % 1000000) * 1000 : 1;

  return usec ? 0 : 
# 564 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                   TFD_TIMER_ABSTIME
# 564 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                    ;
}


struct epoll_reactor::perform_io_cleanup_on_block_exit
{
  explicit perform_io_cleanup_on_block_exit(epoll_reactor* r)
    : reactor_(r), first_op_(0)
  {
  }

  ~perform_io_cleanup_on_block_exit()
  {
    if (first_op_)
    {

      if (!ops_.empty())
        reactor_->io_service_.post_deferred_completions(ops_);





    }
    else
    {



      reactor_->io_service_.work_started();
    }
  }

  epoll_reactor* reactor_;
  op_queue<operation> ops_;
  operation* first_op_;
};

epoll_reactor::descriptor_state::descriptor_state()
  : operation(&epoll_reactor::descriptor_state::do_complete)
{
}

operation* epoll_reactor::descriptor_state::perform_io(uint32_t events)
{
  mutex_.lock();
  perform_io_cleanup_on_block_exit io_cleanup(reactor_);
  mutex::scoped_lock descriptor_lock(mutex_, mutex::scoped_lock::adopt_lock);



  static const int flag[max_ops] = { 
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                    EPOLLIN
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                           , 
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                             EPOLLOUT
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                     , 
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                                       EPOLLPRI 
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                                                };
  for (int j = max_ops - 1; j >= 0; --j)
  {
    if (events & (flag[j] | 
# 618 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                           EPOLLERR 
# 618 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                    | 
# 618 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 3 4
                                      EPOLLHUP
# 618 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp"
                                              ))
    {
      while (reactor_op* op = op_queue_[j].front())
      {
        if (op->perform())
        {
          op_queue_[j].pop();
          io_cleanup.ops_.push(op);
        }
        else
          break;
      }
    }
  }



  io_cleanup.first_op_ = io_cleanup.ops_.front();
  io_cleanup.ops_.pop();
  return io_cleanup.first_op_;
}

void epoll_reactor::descriptor_state::do_complete(
    io_service_impl* owner, operation* base,
    const asio::error_code& ec, std::size_t bytes_transferred)
{
  if (owner)
  {
    descriptor_state* descriptor_data = static_cast<descriptor_state*>(base);
    uint32_t events = static_cast<uint32_t>(bytes_transferred);
    if (operation* op = descriptor_data->perform_io(events))
    {
      op->complete(*owner, ec, 0);
    }
  }
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 659 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/epoll_reactor.ipp" 2
# 238 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/epoll_reactor.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactor.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp" 2

namespace asio {
namespace detail {

struct task_io_service::task_cleanup
{
  ~task_cleanup()
  {
    if (this_thread_->private_outstanding_work > 0)
    {
      asio::detail::increment(
          task_io_service_->outstanding_work_,
          this_thread_->private_outstanding_work);
    }
    this_thread_->private_outstanding_work = 0;



    lock_->lock();
    task_io_service_->task_interrupted_ = true;
    task_io_service_->op_queue_.push(this_thread_->private_op_queue);
    task_io_service_->op_queue_.push(&task_io_service_->task_operation_);
  }

  task_io_service* task_io_service_;
  mutex::scoped_lock* lock_;
  thread_info* this_thread_;
};

struct task_io_service::work_cleanup
{
  ~work_cleanup()
  {
    if (this_thread_->private_outstanding_work > 1)
    {
      asio::detail::increment(
          task_io_service_->outstanding_work_,
          this_thread_->private_outstanding_work - 1);
    }
    else if (this_thread_->private_outstanding_work < 1)
    {
      task_io_service_->work_finished();
    }
    this_thread_->private_outstanding_work = 0;


    if (!this_thread_->private_op_queue.empty())
    {
      lock_->lock();
      task_io_service_->op_queue_.push(this_thread_->private_op_queue);
    }

  }

  task_io_service* task_io_service_;
  mutex::scoped_lock* lock_;
  thread_info* this_thread_;
};

task_io_service::task_io_service(
    asio::io_service& io_service, std::size_t concurrency_hint)
  : asio::detail::service_base<task_io_service>(io_service),
    one_thread_(concurrency_hint == 1),
    mutex_(),
    task_(0),
    task_interrupted_(true),
    outstanding_work_(0),
    stopped_(false),
    shutdown_(false)
{
  (void)0;
}

void task_io_service::shutdown_service()
{
  mutex::scoped_lock lock(mutex_);
  shutdown_ = true;
  lock.unlock();


  while (!op_queue_.empty())
  {
    operation* o = op_queue_.front();
    op_queue_.pop();
    if (o != &task_operation_)
      o->destroy();
  }


  task_ = 0;
}

void task_io_service::init_task()
{
  mutex::scoped_lock lock(mutex_);
  if (!shutdown_ && !task_)
  {
    task_ = &use_service<reactor>(this->get_io_service());
    op_queue_.push(&task_operation_);
    wake_one_thread_and_unlock(lock);
  }
}

std::size_t task_io_service::run(asio::error_code& ec)
{
  ec = asio::error_code();
  if (outstanding_work_ == 0)
  {
    stop();
    return 0;
  }

  thread_info this_thread;
  this_thread.private_outstanding_work = 0;
  thread_call_stack::context ctx(this, this_thread);

  mutex::scoped_lock lock(mutex_);

  std::size_t n = 0;
  for (; do_run_one(lock, this_thread, ec); lock.lock())
    if (n != (std::numeric_limits<std::size_t>::max)())
      ++n;
  return n;
}

std::size_t task_io_service::run_one(asio::error_code& ec)
{
  ec = asio::error_code();
  if (outstanding_work_ == 0)
  {
    stop();
    return 0;
  }

  thread_info this_thread;
  this_thread.private_outstanding_work = 0;
  thread_call_stack::context ctx(this, this_thread);

  mutex::scoped_lock lock(mutex_);

  return do_run_one(lock, this_thread, ec);
}

std::size_t task_io_service::poll(asio::error_code& ec)
{
  ec = asio::error_code();
  if (outstanding_work_ == 0)
  {
    stop();
    return 0;
  }

  thread_info this_thread;
  this_thread.private_outstanding_work = 0;
  thread_call_stack::context ctx(this, this_thread);

  mutex::scoped_lock lock(mutex_);





  if (one_thread_)
    if (thread_info* outer_thread_info = ctx.next_by_key())
      op_queue_.push(outer_thread_info->private_op_queue);


  std::size_t n = 0;
  for (; do_poll_one(lock, this_thread, ec); lock.lock())
    if (n != (std::numeric_limits<std::size_t>::max)())
      ++n;
  return n;
}

std::size_t task_io_service::poll_one(asio::error_code& ec)
{
  ec = asio::error_code();
  if (outstanding_work_ == 0)
  {
    stop();
    return 0;
  }

  thread_info this_thread;
  this_thread.private_outstanding_work = 0;
  thread_call_stack::context ctx(this, this_thread);

  mutex::scoped_lock lock(mutex_);





  if (one_thread_)
    if (thread_info* outer_thread_info = ctx.next_by_key())
      op_queue_.push(outer_thread_info->private_op_queue);


  return do_poll_one(lock, this_thread, ec);
}

void task_io_service::stop()
{
  mutex::scoped_lock lock(mutex_);
  stop_all_threads(lock);
}

bool task_io_service::stopped() const
{
  mutex::scoped_lock lock(mutex_);
  return stopped_;
}

void task_io_service::reset()
{
  mutex::scoped_lock lock(mutex_);
  stopped_ = false;
}

void task_io_service::post_immediate_completion(
    task_io_service::operation* op, bool is_continuation)
{

  if (one_thread_ || is_continuation)
  {
    if (thread_info* this_thread = thread_call_stack::contains(this))
    {
      ++this_thread->private_outstanding_work;
      this_thread->private_op_queue.push(op);
      return;
    }
  }




  work_started();
  mutex::scoped_lock lock(mutex_);
  op_queue_.push(op);
  wake_one_thread_and_unlock(lock);
}

void task_io_service::post_deferred_completion(task_io_service::operation* op)
{

  if (one_thread_)
  {
    if (thread_info* this_thread = thread_call_stack::contains(this))
    {
      this_thread->private_op_queue.push(op);
      return;
    }
  }


  mutex::scoped_lock lock(mutex_);
  op_queue_.push(op);
  wake_one_thread_and_unlock(lock);
}

void task_io_service::post_deferred_completions(
    op_queue<task_io_service::operation>& ops)
{
  if (!ops.empty())
  {

    if (one_thread_)
    {
      if (thread_info* this_thread = thread_call_stack::contains(this))
      {
        this_thread->private_op_queue.push(ops);
        return;
      }
    }


    mutex::scoped_lock lock(mutex_);
    op_queue_.push(ops);
    wake_one_thread_and_unlock(lock);
  }
}

void task_io_service::do_dispatch(
    task_io_service::operation* op)
{
  work_started();
  mutex::scoped_lock lock(mutex_);
  op_queue_.push(op);
  wake_one_thread_and_unlock(lock);
}

void task_io_service::abandon_operations(
    op_queue<task_io_service::operation>& ops)
{
  op_queue<task_io_service::operation> ops2;
  ops2.push(ops);
}

std::size_t task_io_service::do_run_one(mutex::scoped_lock& lock,
    task_io_service::thread_info& this_thread,
    const asio::error_code& ec)
{
  while (!stopped_)
  {
    if (!op_queue_.empty())
    {

      operation* o = op_queue_.front();
      op_queue_.pop();
      bool more_handlers = (!op_queue_.empty());

      if (o == &task_operation_)
      {
        task_interrupted_ = more_handlers;

        if (more_handlers && !one_thread_)
          wakeup_event_.unlock_and_signal_one(lock);
        else
          lock.unlock();

        task_cleanup on_exit = { this, &lock, &this_thread };
        (void)on_exit;




        task_->run(!more_handlers, this_thread.private_op_queue);
      }
      else
      {
        std::size_t task_result = o->task_result_;

        if (more_handlers && !one_thread_)
          wake_one_thread_and_unlock(lock);
        else
          lock.unlock();


        work_cleanup on_exit = { this, &lock, &this_thread };
        (void)on_exit;


        o->complete(*this, ec, task_result);

        return 1;
      }
    }
    else
    {
      wakeup_event_.clear(lock);
      wakeup_event_.wait(lock);
    }
  }

  return 0;
}

std::size_t task_io_service::do_poll_one(mutex::scoped_lock& lock,
    task_io_service::thread_info& this_thread,
    const asio::error_code& ec)
{
  if (stopped_)
    return 0;

  operation* o = op_queue_.front();
  if (o == &task_operation_)
  {
    op_queue_.pop();
    lock.unlock();

    {
      task_cleanup c = { this, &lock, &this_thread };
      (void)c;




      task_->run(false, this_thread.private_op_queue);
    }

    o = op_queue_.front();
    if (o == &task_operation_)
    {
      wakeup_event_.maybe_unlock_and_signal_one(lock);
      return 0;
    }
  }

  if (o == 0)
    return 0;

  op_queue_.pop();
  bool more_handlers = (!op_queue_.empty());

  std::size_t task_result = o->task_result_;

  if (more_handlers && !one_thread_)
    wake_one_thread_and_unlock(lock);
  else
    lock.unlock();


  work_cleanup on_exit = { this, &lock, &this_thread };
  (void)on_exit;


  o->complete(*this, ec, task_result);

  return 1;
}

void task_io_service::stop_all_threads(
    mutex::scoped_lock& lock)
{
  stopped_ = true;
  wakeup_event_.signal_all(lock);

  if (!task_interrupted_ && task_)
  {
    task_interrupted_ = true;
    task_->interrupt();
  }
}

void task_io_service::wake_one_thread_and_unlock(
    mutex::scoped_lock& lock)
{
  if (!wakeup_event_.maybe_unlock_and_signal_one(lock))
  {
    if (!task_interrupted_ && task_)
    {
      task_interrupted_ = true;
      task_->interrupt();
    }
    lock.unlock();
  }
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 471 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/task_io_service.ipp" 2
# 197 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/task_io_service.hpp" 2
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2

namespace asio {

template <typename CompletionHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<CompletionHandler, void ()>::type>::type
io_service::dispatch(CompletionHandler&& handler)
{


  typedef typename handler_type<CompletionHandler, void()>::type asio_true_handler_type; static_assert(sizeof(asio::detail::zero_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), 0)) == 1, "CompletionHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()(), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    CompletionHandler, void ()> init(
      static_cast<CompletionHandler&&>(handler));

  impl_.dispatch(init.handler);

  return init.result.get();
}

template <typename CompletionHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<CompletionHandler, void ()>::type>::type
io_service::post(CompletionHandler&& handler)
{


  typedef typename handler_type<CompletionHandler, void()>::type asio_true_handler_type; static_assert(sizeof(asio::detail::zero_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), 0)) == 1, "CompletionHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()(), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    CompletionHandler, void ()> init(
      static_cast<CompletionHandler&&>(handler));

  impl_.post(init.handler);

  return init.result.get();
}

template <typename Handler>



inline detail::wrapped_handler<io_service&, Handler>

io_service::wrap(Handler handler)
{
  return detail::wrapped_handler<io_service&, Handler>(*this, handler);
}

inline io_service::work::work(asio::io_service& io_service)
  : io_service_impl_(io_service.impl_)
{
  io_service_impl_.work_started();
}

inline io_service::work::work(const work& other)
  : io_service_impl_(other.io_service_impl_)
{
  io_service_impl_.work_started();
}

inline io_service::work::~work()
{
  io_service_impl_.work_finished();
}

inline asio::io_service& io_service::work::get_io_service()
{
  return io_service_impl_.get_io_service();
}

inline asio::io_service& io_service::service::get_io_service()
{
  return owner_;
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 151 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.hpp" 2
# 766 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.ipp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_ptr.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_ptr.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_ptr.hpp" 2

namespace asio {
namespace detail {

template <typename T>
class scoped_ptr
{
public:

  explicit scoped_ptr(T* p = 0)
    : p_(p)
  {
  }


  ~scoped_ptr()
  {
    delete p_;
  }


  T* get()
  {
    return p_;
  }


  T* operator->()
  {
    return p_;
  }


  T& operator*()
  {
    return *p_;
  }


  void reset(T* p = 0)
  {
    delete p_;
    p_ = p;
  }

private:

  scoped_ptr(const scoped_ptr&);
  scoped_ptr& operator=(const scoped_ptr&);

  T* p_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/scoped_ptr.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.ipp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.ipp" 2

namespace asio {

io_service::io_service()
  : service_registry_(new asio::detail::service_registry(
        *this, static_cast<impl_type*>(0),
        (std::numeric_limits<std::size_t>::max)())),
    impl_(service_registry_->first_service<impl_type>())
{
}

io_service::io_service(std::size_t concurrency_hint)
  : service_registry_(new asio::detail::service_registry(
        *this, static_cast<impl_type*>(0), concurrency_hint)),
    impl_(service_registry_->first_service<impl_type>())
{
}

io_service::~io_service()
{
  delete service_registry_;
}

std::size_t io_service::run()
{
  asio::error_code ec;
  std::size_t s = impl_.run(ec);
  asio::detail::throw_error(ec);
  return s;
}

std::size_t io_service::run(asio::error_code& ec)
{
  return impl_.run(ec);
}

std::size_t io_service::run_one()
{
  asio::error_code ec;
  std::size_t s = impl_.run_one(ec);
  asio::detail::throw_error(ec);
  return s;
}

std::size_t io_service::run_one(asio::error_code& ec)
{
  return impl_.run_one(ec);
}

std::size_t io_service::poll()
{
  asio::error_code ec;
  std::size_t s = impl_.poll(ec);
  asio::detail::throw_error(ec);
  return s;
}

std::size_t io_service::poll(asio::error_code& ec)
{
  return impl_.poll(ec);
}

std::size_t io_service::poll_one()
{
  asio::error_code ec;
  std::size_t s = impl_.poll_one(ec);
  asio::detail::throw_error(ec);
  return s;
}

std::size_t io_service::poll_one(asio::error_code& ec)
{
  return impl_.poll_one(ec);
}

void io_service::stop()
{
  impl_.stop();
}

bool io_service::stopped() const
{
  return impl_.stopped();
}

void io_service::reset()
{
  impl_.reset();
}

void io_service::notify_fork(asio::io_service::fork_event event)
{
  service_registry_->notify_fork(event);
}

io_service::service::service(asio::io_service& owner)
  : owner_(owner),
    next_(0)
{
}

io_service::service::~service()
{
}

void io_service::service::fork_service(asio::io_service::fork_event)
{
}

service_already_exists::service_already_exists()
  : std::logic_error("Service already exists.")
{
}

invalid_service_owner::invalid_service_owner()
  : std::logic_error("Invalid service owner.")
{
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 154 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/io_service.ipp" 2
# 768 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp" 2

namespace asio {


namespace detail
{

  template <typename IoObjectService>
  class service_has_move
  {
  private:
    typedef IoObjectService service_type;
    typedef typename service_type::implementation_type implementation_type;

    template <typename T, typename U>
    static auto asio_service_has_move_eval(T* t, U* u)
      -> decltype(t->move_construct(*u, *u), char());
    static char (&asio_service_has_move_eval(...))[2];

  public:
    static const bool value =
      sizeof(asio_service_has_move_eval(
        static_cast<service_type*>(0),
        static_cast<implementation_type*>(0))) == 1;
  };
}
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp"
template <typename IoObjectService,
    bool Movable = detail::service_has_move<IoObjectService>::value>

class basic_io_object
{
public:

  typedef IoObjectService service_type;


  typedef typename service_type::implementation_type implementation_type;
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp"
  asio::io_service& get_io_service()
  {
    return service.get_io_service();
  }

protected:





  explicit basic_io_object(asio::io_service& io_service)
    : service(asio::use_service<IoObjectService>(io_service))
  {
    service.construct(implementation);
  }
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp"
  ~basic_io_object()
  {
    service.destroy(implementation);
  }


  service_type& get_service()
  {
    return service;
  }


  const service_type& get_service() const
  {
    return service;
  }






  service_type& service;


  implementation_type& get_implementation()
  {
    return implementation;
  }


  const implementation_type& get_implementation() const
  {
    return implementation;
  }



  implementation_type implementation;

private:
  basic_io_object(const basic_io_object&);
  basic_io_object& operator=(const basic_io_object&);
};



template <typename IoObjectService>
class basic_io_object<IoObjectService, true>
{
public:
  typedef IoObjectService service_type;
  typedef typename service_type::implementation_type implementation_type;

  asio::io_service& get_io_service()
  {
    return service_->get_io_service();
  }

protected:
  explicit basic_io_object(asio::io_service& io_service)
    : service_(&asio::use_service<IoObjectService>(io_service))
  {
    service_->construct(implementation);
  }

  basic_io_object(basic_io_object&& other)
    : service_(&other.get_service())
  {
    service_->move_construct(implementation, other.implementation);
  }

  ~basic_io_object()
  {
    service_->destroy(implementation);
  }

  basic_io_object& operator=(basic_io_object&& other)
  {
    service_->move_assign(implementation,
        *other.service_, other.implementation);
    service_ = other.service_;
    return *this;
  }

  service_type& get_service()
  {
    return *service_;
  }

  const service_type& get_service() const
  {
    return *service_;
  }

  implementation_type& get_implementation()
  {
    return implementation;
  }

  const implementation_type& get_implementation() const
  {
    return implementation;
  }

  implementation_type implementation;

private:
  basic_io_object(const basic_io_object&);
  void operator=(const basic_io_object&);

  IoObjectService* service_;
};


}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 240 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/type_traits.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/type_traits.hpp"
namespace asio {


using std::add_const;
using std::enable_if;
using std::is_const;
using std::is_convertible;
using std::is_function;
using std::is_same;
using std::remove_pointer;
using std::remove_reference;
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/type_traits.hpp"
}
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp" 2

namespace asio {
namespace detail {
namespace io_control {


class non_blocking_io
{
public:

  non_blocking_io()
    : value_(0)
  {
  }


  non_blocking_io(bool value)
    : value_(value ? 1 : 0)
  {
  }


  int name() const
  {
    return static_cast<int>(
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp" 3 4
                           0x5421
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp"
                                               );
  }


  void set(bool value)
  {
    value_ = value ? 1 : 0;
  }


  bool get() const
  {
    return value_ != 0;
  }


  detail::ioctl_arg_type* data()
  {
    return &value_;
  }


  const detail::ioctl_arg_type* data() const
  {
    return &value_;
  }

private:
  detail::ioctl_arg_type value_;
};


class bytes_readable
{
public:

  bytes_readable()
    : value_(0)
  {
  }


  bytes_readable(std::size_t value)
    : value_(static_cast<detail::ioctl_arg_type>(value))
  {
  }


  int name() const
  {
    return static_cast<int>(
# 97 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp" 3 4
                           0x541B
# 97 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp"
                                                );
  }


  void set(std::size_t value)
  {
    value_ = static_cast<detail::ioctl_arg_type>(value);
  }


  std::size_t get() const
  {
    return static_cast<std::size_t>(value_);
  }


  detail::ioctl_arg_type* data()
  {
    return &value_;
  }


  const detail::ioctl_arg_type* data() const
  {
    return &value_;
  }

private:
  detail::ioctl_arg_type value_;
};

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/io_control.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_option.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_option.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_option.hpp" 2

namespace asio {
namespace detail {
namespace socket_option {


template <int Level, int Name>
class boolean
{
public:

  boolean()
    : value_(0)
  {
  }


  explicit boolean(bool v)
    : value_(v ? 1 : 0)
  {
  }


  boolean& operator=(bool v)
  {
    value_ = v ? 1 : 0;
    return *this;
  }


  bool value() const
  {
    return !!value_;
  }


  operator bool() const
  {
    return !!value_;
  }


  bool operator!() const
  {
    return !value_;
  }


  template <typename Protocol>
  int level(const Protocol&) const
  {
    return Level;
  }


  template <typename Protocol>
  int name(const Protocol&) const
  {
    return Name;
  }


  template <typename Protocol>
  int* data(const Protocol&)
  {
    return &value_;
  }


  template <typename Protocol>
  const int* data(const Protocol&) const
  {
    return &value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol&) const
  {
    return sizeof(value_);
  }


  template <typename Protocol>
  void resize(const Protocol&, std::size_t s)
  {



    switch (s)
    {
    case sizeof(char):
      value_ = *reinterpret_cast<char*>(&value_) ? 1 : 0;
      break;
    case sizeof(value_):
      break;
    default:
      {
        std::length_error ex("boolean socket option resize");
        asio::detail::throw_exception(ex);
      }
    }
  }

private:
  int value_;
};


template <int Level, int Name>
class integer
{
public:

  integer()
    : value_(0)
  {
  }


  explicit integer(int v)
    : value_(v)
  {
  }


  integer& operator=(int v)
  {
    value_ = v;
    return *this;
  }


  int value() const
  {
    return value_;
  }


  template <typename Protocol>
  int level(const Protocol&) const
  {
    return Level;
  }


  template <typename Protocol>
  int name(const Protocol&) const
  {
    return Name;
  }


  template <typename Protocol>
  int* data(const Protocol&)
  {
    return &value_;
  }


  template <typename Protocol>
  const int* data(const Protocol&) const
  {
    return &value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol&) const
  {
    return sizeof(value_);
  }


  template <typename Protocol>
  void resize(const Protocol&, std::size_t s)
  {
    if (s != sizeof(value_))
    {
      std::length_error ex("integer socket option resize");
      asio::detail::throw_exception(ex);
    }
  }

private:
  int value_;
};


template <int Level, int Name>
class linger
{
public:

  linger()
  {
    value_.l_onoff = 0;
    value_.l_linger = 0;
  }


  linger(bool e, int t)
  {
    enabled(e);
    timeout (t);
  }


  void enabled(bool value)
  {
    value_.l_onoff = value ? 1 : 0;
  }


  bool enabled() const
  {
    return value_.l_onoff != 0;
  }


  void timeout (int value)
  {



    value_.l_linger = value;

  }


  int timeout () const
  {
    return static_cast<int>(value_.l_linger);
  }


  template <typename Protocol>
  int level(const Protocol&) const
  {
    return Level;
  }


  template <typename Protocol>
  int name(const Protocol&) const
  {
    return Name;
  }


  template <typename Protocol>
  detail::linger_type* data(const Protocol&)
  {
    return &value_;
  }


  template <typename Protocol>
  const detail::linger_type* data(const Protocol&) const
  {
    return &value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol&) const
  {
    return sizeof(value_);
  }


  template <typename Protocol>
  void resize(const Protocol&, std::size_t s)
  {
    if (s != sizeof(value_))
    {
      std::length_error ex("linger socket option resize");
      asio::detail::throw_exception(ex);
    }
  }

private:
  detail::linger_type value_;
};

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 315 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_option.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 2

namespace asio {




class socket_base
{
public:

  enum shutdown_type
  {
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
    shutdown_receive = 
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                      SHUT_RD
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                          ,
    shutdown_send = 
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                   SHUT_WR
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                       ,
    shutdown_both = 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                   SHUT_RDWR

  
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
 };


  typedef int message_flags;
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  static const int message_peek = 
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
 MSG_PEEK
                                           
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                          ;
  static const int message_out_of_band = 
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
 MSG_OOB
                                                 
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                ;
  static const int message_do_not_route = 
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
 MSG_DONTROUTE
                                                        
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                       ;
  static const int message_end_of_record = 
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
 MSG_EOR
                                                   
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                  ;
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::boolean<
    
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            6
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                     >
      broadcast;
# 141 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::boolean<
    
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            1
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                 > debug;
# 174 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::boolean<
    
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            5
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                     >
      do_not_route;
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::boolean<
    
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            9
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                     > keep_alive;
# 241 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::integer<
    
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            7
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                  >
      send_buffer_size;
# 275 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::integer<
    
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            19
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                    >
      send_low_watermark;
# 309 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::integer<
    
# 310 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 310 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 310 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            8
# 310 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                  >
      receive_buffer_size;
# 343 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::integer<
    
# 344 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 344 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 344 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            18
# 344 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                    >
      receive_low_watermark;
# 378 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::boolean<
    
# 379 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 379 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 379 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            2
# 379 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                     >
      reuse_address;
# 414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::linger<
    
# 415 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
   1
# 415 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                          , 
# 415 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
                            13
# 415 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                                                  >
      linger;
# 450 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::socket_option::boolean<
    asio::detail::custom_socket_option_level,
    asio::detail::enable_connection_aborted_option>
    enable_connection_aborted;
# 475 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::io_control::non_blocking_io non_blocking_io;
# 498 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
  typedef asio::detail::io_control::bytes_readable bytes_readable;






  static const int max_connections = 
# 505 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 3 4
 4096
                               
# 506 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp"
                              ;


protected:

  ~socket_base()
  {
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 519 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 2

namespace asio {
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
template <typename Protocol, typename SocketService>
class basic_socket
  : public basic_io_object<SocketService>,
    public socket_base
{
public:


  typedef typename SocketService::native_handle_type native_type;


  typedef typename SocketService::native_handle_type native_handle_type;


  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;


  typedef basic_socket<Protocol, SocketService> lowest_layer_type;
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  explicit basic_socket(asio::io_service& io_service)
    : basic_io_object<SocketService>(io_service)
  {
  }
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  basic_socket(asio::io_service& io_service,
      const protocol_type& protocol)
    : basic_io_object<SocketService>(io_service)
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), protocol, ec);
    asio::detail::throw_error(ec, "open");
  }
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  basic_socket(asio::io_service& io_service,
      const endpoint_type& endpoint)
    : basic_io_object<SocketService>(io_service)
  {
    asio::error_code ec;
    const protocol_type protocol = endpoint.protocol();
    this->get_service().open(this->get_implementation(), protocol, ec);
    asio::detail::throw_error(ec, "open");
    this->get_service().bind(this->get_implementation(), endpoint, ec);
    asio::detail::throw_error(ec, "bind");
  }
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  basic_socket(asio::io_service& io_service,
      const protocol_type& protocol, const native_handle_type& native_socket)
    : basic_io_object<SocketService>(io_service)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        protocol, native_socket, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  basic_socket(basic_socket&& other)
    : basic_io_object<SocketService>(
        static_cast<basic_socket&&>(other))
  {
  }
# 171 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  basic_socket& operator=(basic_socket&& other)
  {
    basic_io_object<SocketService>::operator=(
        static_cast<basic_socket&&>(other));
    return *this;
  }


  template <typename Protocol1, typename SocketService1>
  friend class basic_socket;
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename Protocol1, typename SocketService1>
  basic_socket(basic_socket<Protocol1, SocketService1>&& other,
      typename enable_if<is_convertible<Protocol1, Protocol>::value>::type* = 0)
    : basic_io_object<SocketService>(other.get_io_service())
  {
    this->get_service().template converting_move_construct<Protocol1>(
        this->get_implementation(), other.get_implementation());
  }
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename Protocol1, typename SocketService1>
  typename enable_if<is_convertible<Protocol1, Protocol>::value,
      basic_socket>::type& operator=(
        basic_socket<Protocol1, SocketService1>&& other)
  {
    basic_socket tmp(static_cast<basic_socket< Protocol1, SocketService1>&&>
                                       (other));
    basic_io_object<SocketService>::operator=(
        static_cast<basic_socket&&>(tmp));
    return *this;
  }
# 233 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  lowest_layer_type& lowest_layer()
  {
    return *this;
  }
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  const lowest_layer_type& lowest_layer() const
  {
    return *this;
  }
# 266 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void open(const protocol_type& protocol = protocol_type())
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), protocol, ec);
    asio::detail::throw_error(ec, "open");
  }
# 292 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code open(const protocol_type& protocol,
      asio::error_code& ec)
  {
    return this->get_service().open(this->get_implementation(), protocol, ec);
  }
# 308 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void assign(const protocol_type& protocol,
      const native_handle_type& native_socket)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        protocol, native_socket, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 327 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code assign(const protocol_type& protocol,
      const native_handle_type& native_socket, asio::error_code& ec)
  {
    return this->get_service().assign(this->get_implementation(),
        protocol, native_socket, ec);
  }


  bool is_open() const
  {
    return this->get_service().is_open(this->get_implementation());
  }
# 352 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void close()
  {
    asio::error_code ec;
    this->get_service().close(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "close");
  }
# 383 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code close(asio::error_code& ec)
  {
    return this->get_service().close(this->get_implementation(), ec);
  }







  native_type native()
  {
    return this->get_service().native_handle(this->get_implementation());
  }







  native_handle_type native_handle()
  {
    return this->get_service().native_handle(this->get_implementation());
  }
# 451 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void cancel()
  {
    asio::error_code ec;
    this->get_service().cancel(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "cancel");
  }
# 499 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code cancel(asio::error_code& ec)
  {
    return this->get_service().cancel(this->get_implementation(), ec);
  }
# 514 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  bool at_mark() const
  {
    asio::error_code ec;
    bool b = this->get_service().at_mark(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "at_mark");
    return b;
  }
# 532 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  bool at_mark(asio::error_code& ec) const
  {
    return this->get_service().at_mark(this->get_implementation(), ec);
  }
# 547 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  std::size_t available() const
  {
    asio::error_code ec;
    std::size_t s = this->get_service().available(
        this->get_implementation(), ec);
    asio::detail::throw_error(ec, "available");
    return s;
  }
# 566 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  std::size_t available(asio::error_code& ec) const
  {
    return this->get_service().available(this->get_implementation(), ec);
  }
# 589 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void bind(const endpoint_type& endpoint)
  {
    asio::error_code ec;
    this->get_service().bind(this->get_implementation(), endpoint, ec);
    asio::detail::throw_error(ec, "bind");
  }
# 619 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code bind(const endpoint_type& endpoint,
      asio::error_code& ec)
  {
    return this->get_service().bind(this->get_implementation(), endpoint, ec);
  }
# 648 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void connect(const endpoint_type& peer_endpoint)
  {
    asio::error_code ec;
    if (!is_open())
    {
      this->get_service().open(this->get_implementation(),
          peer_endpoint.protocol(), ec);
      asio::detail::throw_error(ec, "connect");
    }
    this->get_service().connect(this->get_implementation(), peer_endpoint, ec);
    asio::detail::throw_error(ec, "connect");
  }
# 689 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code connect(const endpoint_type& peer_endpoint,
      asio::error_code& ec)
  {
    if (!is_open())
    {
      if (this->get_service().open(this->get_implementation(),
            peer_endpoint.protocol(), ec))
      {
        return ec;
      }
    }

    return this->get_service().connect(
        this->get_implementation(), peer_endpoint, ec);
  }
# 746 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename ConnectHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ConnectHandler, void (asio::error_code)>::type>::type

  async_connect(const endpoint_type& peer_endpoint,
      ConnectHandler&& handler)
  {


    typedef typename handler_type<ConnectHandler, void(asio::error_code)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::one_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0))) == 1, "ConnectHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>()), char(0))> __attribute__((__unused__)) type_check;

    if (!is_open())
    {
      asio::error_code ec;
      const protocol_type protocol = peer_endpoint.protocol();
      if (this->get_service().open(this->get_implementation(), protocol, ec))
      {
        detail::async_result_init<
          ConnectHandler, void (asio::error_code)> init(
            static_cast<ConnectHandler&&>(handler));

        this->get_io_service().post(
            asio::detail::bind_handler(
              static_cast<typename handler_type<ConnectHandler, void (asio::error_code)>::type&&>
                                                         (
                  init.handler), ec));

        return init.result.get();
      }
    }

    return this->get_service().async_connect(this->get_implementation(),
        peer_endpoint, static_cast<ConnectHandler&&>(handler));
  }
# 814 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename SettableSocketOption>
  void set_option(const SettableSocketOption& option)
  {
    asio::error_code ec;
    this->get_service().set_option(this->get_implementation(), option, ec);
    asio::detail::throw_error(ec, "set_option");
  }
# 861 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename SettableSocketOption>
  asio::error_code set_option(const SettableSocketOption& option,
      asio::error_code& ec)
  {
    return this->get_service().set_option(
        this->get_implementation(), option, ec);
  }
# 904 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename GettableSocketOption>
  void get_option(GettableSocketOption& option) const
  {
    asio::error_code ec;
    this->get_service().get_option(this->get_implementation(), option, ec);
    asio::detail::throw_error(ec, "get_option");
  }
# 952 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename GettableSocketOption>
  asio::error_code get_option(GettableSocketOption& option,
      asio::error_code& ec) const
  {
    return this->get_service().get_option(
        this->get_implementation(), option, ec);
  }
# 982 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename IoControlCommand>
  void io_control(IoControlCommand& command)
  {
    asio::error_code ec;
    this->get_service().io_control(this->get_implementation(), command, ec);
    asio::detail::throw_error(ec, "io_control");
  }
# 1017 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  template <typename IoControlCommand>
  asio::error_code io_control(IoControlCommand& command,
      asio::error_code& ec)
  {
    return this->get_service().io_control(
        this->get_implementation(), command, ec);
  }
# 1036 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  bool non_blocking() const
  {
    return this->get_service().non_blocking(this->get_implementation());
  }
# 1054 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void non_blocking(bool mode)
  {
    asio::error_code ec;
    this->get_service().non_blocking(this->get_implementation(), mode, ec);
    asio::detail::throw_error(ec, "non_blocking");
  }
# 1074 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code non_blocking(
      bool mode, asio::error_code& ec)
  {
    return this->get_service().non_blocking(
        this->get_implementation(), mode, ec);
  }
# 1165 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  bool native_non_blocking() const
  {
    return this->get_service().native_non_blocking(this->get_implementation());
  }
# 1255 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void native_non_blocking(bool mode)
  {
    asio::error_code ec;
    this->get_service().native_non_blocking(
        this->get_implementation(), mode, ec);
    asio::detail::throw_error(ec, "native_non_blocking");
  }
# 1348 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code native_non_blocking(
      bool mode, asio::error_code& ec)
  {
    return this->get_service().native_non_blocking(
        this->get_implementation(), mode, ec);
  }
# 1370 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  endpoint_type local_endpoint() const
  {
    asio::error_code ec;
    endpoint_type ep = this->get_service().local_endpoint(
        this->get_implementation(), ec);
    asio::detail::throw_error(ec, "local_endpoint");
    return ep;
  }
# 1400 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  endpoint_type local_endpoint(asio::error_code& ec) const
  {
    return this->get_service().local_endpoint(this->get_implementation(), ec);
  }
# 1420 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  endpoint_type remote_endpoint() const
  {
    asio::error_code ec;
    endpoint_type ep = this->get_service().remote_endpoint(
        this->get_implementation(), ec);
    asio::detail::throw_error(ec, "remote_endpoint");
    return ep;
  }
# 1450 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  endpoint_type remote_endpoint(asio::error_code& ec) const
  {
    return this->get_service().remote_endpoint(this->get_implementation(), ec);
  }
# 1472 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  void shutdown(shutdown_type what)
  {
    asio::error_code ec;
    this->get_service().shutdown(this->get_implementation(), what, ec);
    asio::detail::throw_error(ec, "shutdown");
  }
# 1501 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp"
  asio::error_code shutdown(shutdown_type what,
      asio::error_code& ec)
  {
    return this->get_service().shutdown(this->get_implementation(), what, ec);
  }

protected:

  ~basic_socket()
  {
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 1517 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/array_fwd.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/array_fwd.hpp"
namespace boost {

template<class T, std::size_t N>
class array;

}





# 1 "/usr/include/c++/15/array" 1 3
# 40 "/usr/include/c++/15/array" 3
# 1 "/usr/include/c++/15/compare" 1 3
# 38 "/usr/include/c++/15/compare" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 39 "/usr/include/c++/15/compare" 2 3
# 41 "/usr/include/c++/15/array" 2 3
# 54 "/usr/include/c++/15/array" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 55 "/usr/include/c++/15/array" 2 3


# 56 "/usr/include/c++/15/array" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, size_t _Nm>
    struct __array_traits
    {
      using _Type = _Tp[_Nm];
      using _Is_swappable = __is_swappable<_Tp>;
      using _Is_nothrow_swappable = __is_nothrow_swappable<_Tp>;
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {

     struct _Type
     {

       __attribute__((__always_inline__,__noreturn__))
       _Tp& operator[](size_t) const noexcept { __builtin_trap(); }


       __attribute__((__always_inline__))
       constexpr explicit operator _Tp*() const noexcept { return nullptr; }
     };

     using _Is_swappable = true_type;
     using _Is_nothrow_swappable = true_type;
   };
# 101 "/usr/include/c++/15/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typename __array_traits<_Tp, _Nm>::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(__array_traits<_Tp, _Nm>::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


      [[__gnu__::__const__, __nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(data()); }

      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      [[__gnu__::__const__, __nodiscard__]]
      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      [[__gnu__::__const__, __nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__gnu__::__const__, __nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr size_type
      size() const noexcept { return _Nm; }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr size_type
      max_size() const noexcept { return _Nm; }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr bool
      empty() const noexcept { return size() == 0; }


      [[__nodiscard__]]
      reference
      operator[](size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return _M_elems[__n];
      }

      [[__nodiscard__]]
      constexpr const_reference
      operator[](size_type __n) const noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);

 return _M_elems[__n];
      }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                 ,
     __n, _Nm);
 return _M_elems[__n];
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _M_elems[__n]
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                    ,
        __n, _Nm),
      _M_elems[__n]);
      }

      [[__nodiscard__]]
      reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return _M_elems[(size_type)0];
      }

      [[__nodiscard__]]
      constexpr const_reference
      front() const noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);

 return _M_elems[(size_type)0];
      }

      [[__nodiscard__]]
      reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return _M_elems[_Nm - 1];
      }

      [[__nodiscard__]]
      constexpr const_reference
      back() const noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);

 return _M_elems[_Nm - 1];
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }

      [[__nodiscard__]]
      const_pointer
      data() const noexcept
      { return static_cast<const_pointer>(_M_elems); }
    };
# 301 "/usr/include/c++/15/array" 3
  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::__equal_aux1(__one.begin(), __one.end(), __two.begin()); }
# 330 "/usr/include/c++/15/array" 3
  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }



  template<typename _Tp, std::size_t _Nm>
   
    inline




    void

    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }







  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return __arr._M_elems[_Int];
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return __arr._M_elems[_Int];
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }
# 492 "/usr/include/c++/15/array" 3
  template<typename _Tp, size_t _Nm>
    struct tuple_size<array<_Tp, _Nm>>
    : public integral_constant<size_t, _Nm> { };


  template<size_t _Ind, typename _Tp, size_t _Nm>
    struct tuple_element<_Ind, array<_Tp, _Nm>>
    {
      static_assert(_Ind < _Nm, "array index is in range");
      using type = _Tp;
    };
# 512 "/usr/include/c++/15/array" 3
  template<typename _Tp, size_t _Nm>
    struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type
    { };


}
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/array_fwd.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp" 2
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp" 2


# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
namespace asio {

class mutable_buffer;
class const_buffer;

namespace detail {
void* buffer_cast_helper(const mutable_buffer&);
const void* buffer_cast_helper(const const_buffer&);
std::size_t buffer_size_helper(const mutable_buffer&);
std::size_t buffer_size_helper(const const_buffer&);
}
# 91 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
class mutable_buffer
{
public:

  mutable_buffer()
    : data_(0),
      size_(0)
  {
  }


  mutable_buffer(void* data, std::size_t size)
    : data_(data),
      size_(size)
  {
  }
# 123 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
private:
  friend void* asio::detail::buffer_cast_helper(
      const mutable_buffer& b);
  friend std::size_t asio::detail::buffer_size_helper(
      const mutable_buffer& b);

  void* data_;
  std::size_t size_;




};

namespace detail {

inline void* buffer_cast_helper(const mutable_buffer& b)
{




  return b.data_;
}

inline std::size_t buffer_size_helper(const mutable_buffer& b)
{
  return b.size_;
}

}



class mutable_buffers_1
  : public mutable_buffer
{
public:

  typedef mutable_buffer value_type;


  typedef const mutable_buffer* const_iterator;


  mutable_buffers_1(void* data, std::size_t size)
    : mutable_buffer(data, size)
  {
  }


  explicit mutable_buffers_1(const mutable_buffer& b)
    : mutable_buffer(b)
  {
  }


  const_iterator begin() const
  {
    return this;
  }


  const_iterator end() const
  {
    return begin() + 1;
  }
};
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
class const_buffer
{
public:

  const_buffer()
    : data_(0),
      size_(0)
  {
  }


  const_buffer(const void* data, std::size_t size)
    : data_(data),
      size_(size)
  {
  }


  const_buffer(const mutable_buffer& b)
    : data_(asio::detail::buffer_cast_helper(b)),
      size_(asio::detail::buffer_size_helper(b))



  {
  }
# 253 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
private:
  friend const void* asio::detail::buffer_cast_helper(
      const const_buffer& b);
  friend std::size_t asio::detail::buffer_size_helper(
      const const_buffer& b);

  const void* data_;
  std::size_t size_;




};

namespace detail {

inline const void* buffer_cast_helper(const const_buffer& b)
{




  return b.data_;
}

inline std::size_t buffer_size_helper(const const_buffer& b)
{
  return b.size_;
}

}



class const_buffers_1
  : public const_buffer
{
public:

  typedef const_buffer value_type;


  typedef const const_buffer* const_iterator;


  const_buffers_1(const void* data, std::size_t size)
    : const_buffer(data, size)
  {
  }


  explicit const_buffers_1(const const_buffer& b)
    : const_buffer(b)
  {
  }


  const_iterator begin() const
  {
    return this;
  }


  const_iterator end() const
  {
    return begin() + 1;
  }
};



class null_buffers
{
public:

  typedef mutable_buffer value_type;


  typedef const mutable_buffer* const_iterator;


  const_iterator begin() const
  {
    return &buf_;
  }


  const_iterator end() const
  {
    return &buf_;
  }

private:
  mutable_buffer buf_;
};
# 357 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_size(const mutable_buffer& b)
{
  return detail::buffer_size_helper(b);
}


inline std::size_t buffer_size(const mutable_buffers_1& b)
{
  return detail::buffer_size_helper(b);
}


inline std::size_t buffer_size(const const_buffer& b)
{
  return detail::buffer_size_helper(b);
}


inline std::size_t buffer_size(const const_buffers_1& b)
{
  return detail::buffer_size_helper(b);
}






template <typename BufferSequence>
inline std::size_t buffer_size(const BufferSequence& b)
{
  std::size_t total_buffer_size = 0;

  typename BufferSequence::const_iterator iter = b.begin();
  typename BufferSequence::const_iterator end = b.end();
  for (; iter != end; ++iter)
    total_buffer_size += detail::buffer_size_helper(*iter);

  return total_buffer_size;
}
# 423 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PointerToPodType>
inline PointerToPodType buffer_cast(const mutable_buffer& b)
{
  return static_cast<PointerToPodType>(detail::buffer_cast_helper(b));
}


template <typename PointerToPodType>
inline PointerToPodType buffer_cast(const const_buffer& b)
{
  return static_cast<PointerToPodType>(detail::buffer_cast_helper(b));
}







inline mutable_buffer operator+(const mutable_buffer& b, std::size_t start)
{
  if (start > buffer_size(b))
    return mutable_buffer();
  char* new_data = buffer_cast<char*>(b) + start;
  std::size_t new_size = buffer_size(b) - start;
  return mutable_buffer(new_data, new_size



      );
}





inline mutable_buffer operator+(std::size_t start, const mutable_buffer& b)
{
  if (start > buffer_size(b))
    return mutable_buffer();
  char* new_data = buffer_cast<char*>(b) + start;
  std::size_t new_size = buffer_size(b) - start;
  return mutable_buffer(new_data, new_size



      );
}





inline const_buffer operator+(const const_buffer& b, std::size_t start)
{
  if (start > buffer_size(b))
    return const_buffer();
  const char* new_data = buffer_cast<const char*>(b) + start;
  std::size_t new_size = buffer_size(b) - start;
  return const_buffer(new_data, new_size



      );
}





inline const_buffer operator+(std::size_t start, const const_buffer& b)
{
  if (start > buffer_size(b))
    return const_buffer();
  const char* new_data = buffer_cast<const char*>(b) + start;
  std::size_t new_size = buffer_size(b) - start;
  return const_buffer(new_data, new_size



      );
}
# 706 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline mutable_buffers_1 buffer(const mutable_buffer& b)
{
  return mutable_buffers_1(b);
}
# 718 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline mutable_buffers_1 buffer(const mutable_buffer& b,
    std::size_t max_size_in_bytes)
{
  return mutable_buffers_1(
      mutable_buffer(buffer_cast<void*>(b),
        buffer_size(b) < max_size_in_bytes
        ? buffer_size(b) : max_size_in_bytes



        ));
}





inline const_buffers_1 buffer(const const_buffer& b)
{
  return const_buffers_1(b);
}
# 747 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline const_buffers_1 buffer(const const_buffer& b,
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(buffer_cast<const void*>(b),
        buffer_size(b) < max_size_in_bytes
        ? buffer_size(b) : max_size_in_bytes



        ));
}





inline mutable_buffers_1 buffer(void* data, std::size_t size_in_bytes)
{
  return mutable_buffers_1(mutable_buffer(data, size_in_bytes));
}





inline const_buffers_1 buffer(const void* data,
    std::size_t size_in_bytes)
{
  return const_buffers_1(const_buffer(data, size_in_bytes));
}
# 786 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline mutable_buffers_1 buffer(PodType (&data)[N])
{
  return mutable_buffers_1(mutable_buffer(data, N * sizeof(PodType)));
}
# 799 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline mutable_buffers_1 buffer(PodType (&data)[N],
    std::size_t max_size_in_bytes)
{
  return mutable_buffers_1(
      mutable_buffer(data,
        N * sizeof(PodType) < max_size_in_bytes
        ? N * sizeof(PodType) : max_size_in_bytes));
}
# 816 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(const PodType (&data)[N])
{
  return const_buffers_1(const_buffer(data, N * sizeof(PodType)));
}
# 829 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(const PodType (&data)[N],
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data,
        N * sizeof(PodType) < max_size_in_bytes
        ? N * sizeof(PodType) : max_size_in_bytes));
}
# 915 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline mutable_buffers_1 buffer(boost::array<PodType, N>& data)
{
  return mutable_buffers_1(
      mutable_buffer(data.c_array(), data.size() * sizeof(PodType)));
}
# 929 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline mutable_buffers_1 buffer(boost::array<PodType, N>& data,
    std::size_t max_size_in_bytes)
{
  return mutable_buffers_1(
      mutable_buffer(data.c_array(),
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes));
}
# 946 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(boost::array<const PodType, N>& data)
{
  return const_buffers_1(
      const_buffer(data.data(), data.size() * sizeof(PodType)));
}
# 960 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(boost::array<const PodType, N>& data,
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data.data(),
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes));
}
# 979 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(const boost::array<PodType, N>& data)
{
  return const_buffers_1(
      const_buffer(data.data(), data.size() * sizeof(PodType)));
}
# 993 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(const boost::array<PodType, N>& data,
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data.data(),
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes));
}
# 1012 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline mutable_buffers_1 buffer(std::array<PodType, N>& data)
{
  return mutable_buffers_1(
      mutable_buffer(data.data(), data.size() * sizeof(PodType)));
}
# 1026 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline mutable_buffers_1 buffer(std::array<PodType, N>& data,
    std::size_t max_size_in_bytes)
{
  return mutable_buffers_1(
      mutable_buffer(data.data(),
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes));
}
# 1043 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(std::array<const PodType, N>& data)
{
  return const_buffers_1(
      const_buffer(data.data(), data.size() * sizeof(PodType)));
}
# 1057 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(std::array<const PodType, N>& data,
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data.data(),
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes));
}
# 1074 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(const std::array<PodType, N>& data)
{
  return const_buffers_1(
      const_buffer(data.data(), data.size() * sizeof(PodType)));
}
# 1088 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, std::size_t N>
inline const_buffers_1 buffer(const std::array<PodType, N>& data,
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data.data(),
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes));
}
# 1110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, typename Allocator>
inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data)
{
  return mutable_buffers_1(
      mutable_buffer(data.size() ? &data[0] : 0, data.size() * sizeof(PodType)





        ));
}
# 1133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, typename Allocator>
inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data,
    std::size_t max_size_in_bytes)
{
  return mutable_buffers_1(
      mutable_buffer(data.size() ? &data[0] : 0,
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes





        ));
}
# 1159 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, typename Allocator>
inline const_buffers_1 buffer(
    const std::vector<PodType, Allocator>& data)
{
  return const_buffers_1(
      const_buffer(data.size() ? &data[0] : 0, data.size() * sizeof(PodType)





        ));
}
# 1183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename PodType, typename Allocator>
inline const_buffers_1 buffer(
    const std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data.size() ? &data[0] : 0,
        data.size() * sizeof(PodType) < max_size_in_bytes
        ? data.size() * sizeof(PodType) : max_size_in_bytes





        ));
}
# 1206 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename Elem, typename Traits, typename Allocator>
inline const_buffers_1 buffer(
    const std::basic_string<Elem, Traits, Allocator>& data)
{
  return const_buffers_1(const_buffer(data.data(), data.size() * sizeof(Elem)





        ));
}
# 1229 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename Elem, typename Traits, typename Allocator>
inline const_buffers_1 buffer(
    const std::basic_string<Elem, Traits, Allocator>& data,
    std::size_t max_size_in_bytes)
{
  return const_buffers_1(
      const_buffer(data.data(),
        data.size() * sizeof(Elem) < max_size_in_bytes
        ? data.size() * sizeof(Elem) : max_size_in_bytes





        ));
}
# 1295 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const const_buffer& source)
{
  using namespace std;
  std::size_t target_size = buffer_size(target);
  std::size_t source_size = buffer_size(source);
  std::size_t n = target_size < source_size ? target_size : source_size;
  memcpy(buffer_cast<void*>(target), buffer_cast<const void*>(source), n);
  return n;
}
# 1325 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const const_buffers_1& source)
{
  return buffer_copy(target, static_cast<const const_buffer&>(source));
}
# 1351 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const mutable_buffer& source)
{
  return buffer_copy(target, const_buffer(source));
}
# 1377 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const mutable_buffers_1& source)
{
  return buffer_copy(target, const_buffer(source));
}
# 1402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename ConstBufferSequence>
std::size_t buffer_copy(const mutable_buffer& target,
    const ConstBufferSequence& source)
{
  std::size_t total_bytes_copied = 0;

  typename ConstBufferSequence::const_iterator source_iter = source.begin();
  typename ConstBufferSequence::const_iterator source_end = source.end();

  for (mutable_buffer target_buffer(target);
      buffer_size(target_buffer) && source_iter != source_end; ++source_iter)
  {
    const_buffer source_buffer(*source_iter);
    std::size_t bytes_copied = buffer_copy(target_buffer, source_buffer);
    total_bytes_copied += bytes_copied;
    target_buffer = target_buffer + bytes_copied;
  }

  return total_bytes_copied;
}
# 1442 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const const_buffer& source)
{
  return buffer_copy(static_cast<const mutable_buffer&>(target), source);
}
# 1467 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const const_buffers_1& source)
{
  return buffer_copy(static_cast<const mutable_buffer&>(target),
      static_cast<const const_buffer&>(source));
}
# 1494 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const mutable_buffer& source)
{
  return buffer_copy(static_cast<const mutable_buffer&>(target),
      const_buffer(source));
}
# 1521 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const mutable_buffers_1& source)
{
  return buffer_copy(static_cast<const mutable_buffer&>(target),
      const_buffer(source));
}
# 1547 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename ConstBufferSequence>
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const ConstBufferSequence& source)
{
  return buffer_copy(static_cast<const mutable_buffer&>(target), source);
}
# 1573 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
std::size_t buffer_copy(const MutableBufferSequence& target,
    const const_buffer& source)
{
  std::size_t total_bytes_copied = 0;

  typename MutableBufferSequence::const_iterator target_iter = target.begin();
  typename MutableBufferSequence::const_iterator target_end = target.end();

  for (const_buffer source_buffer(source);
      buffer_size(source_buffer) && target_iter != target_end; ++target_iter)
  {
    mutable_buffer target_buffer(*target_iter);
    std::size_t bytes_copied = buffer_copy(target_buffer, source_buffer);
    total_bytes_copied += bytes_copied;
    source_buffer = source_buffer + bytes_copied;
  }

  return total_bytes_copied;
}
# 1613 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const const_buffers_1& source)
{
  return buffer_copy(target, static_cast<const const_buffer&>(source));
}
# 1640 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const mutable_buffer& source)
{
  return buffer_copy(target, const_buffer(source));
}
# 1667 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const mutable_buffers_1& source)
{
  return buffer_copy(target, const_buffer(source));
}
# 1693 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence, typename ConstBufferSequence>
std::size_t buffer_copy(const MutableBufferSequence& target,
    const ConstBufferSequence& source)
{
  std::size_t total_bytes_copied = 0;

  typename MutableBufferSequence::const_iterator target_iter = target.begin();
  typename MutableBufferSequence::const_iterator target_end = target.end();
  std::size_t target_buffer_offset = 0;

  typename ConstBufferSequence::const_iterator source_iter = source.begin();
  typename ConstBufferSequence::const_iterator source_end = source.end();
  std::size_t source_buffer_offset = 0;

  while (target_iter != target_end && source_iter != source_end)
  {
    mutable_buffer target_buffer =
      mutable_buffer(*target_iter) + target_buffer_offset;

    const_buffer source_buffer =
      const_buffer(*source_iter) + source_buffer_offset;

    std::size_t bytes_copied = buffer_copy(target_buffer, source_buffer);
    total_bytes_copied += bytes_copied;

    if (bytes_copied == buffer_size(target_buffer))
    {
      ++target_iter;
      target_buffer_offset = 0;
    }
    else
      target_buffer_offset += bytes_copied;

    if (bytes_copied == buffer_size(source_buffer))
    {
      ++source_iter;
      source_buffer_offset = 0;
    }
    else
      source_buffer_offset += bytes_copied;
  }

  return total_bytes_copied;
}
# 1761 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const const_buffer& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1790 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const const_buffers_1& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1820 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const mutable_buffer& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1850 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffer& target,
    const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1880 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename ConstBufferSequence>
inline std::size_t buffer_copy(const mutable_buffer& target,
    const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1910 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const const_buffer& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1939 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const const_buffers_1& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1969 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const mutable_buffer& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 1999 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 2029 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename ConstBufferSequence>
inline std::size_t buffer_copy(const mutable_buffers_1& target,
    const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(buffer(target, max_bytes_to_copy), source);
}
# 2060 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const const_buffer& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(target, buffer(source, max_bytes_to_copy));
}
# 2091 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const const_buffers_1& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(target, buffer(source, max_bytes_to_copy));
}
# 2123 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const mutable_buffer& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(target, buffer(source, max_bytes_to_copy));
}
# 2155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence>
inline std::size_t buffer_copy(const MutableBufferSequence& target,
    const mutable_buffers_1& source, std::size_t max_bytes_to_copy)
{
  return buffer_copy(target, buffer(source, max_bytes_to_copy));
}
# 2186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp"
template <typename MutableBufferSequence, typename ConstBufferSequence>
std::size_t buffer_copy(const MutableBufferSequence& target,
    const ConstBufferSequence& source, std::size_t max_bytes_to_copy)
{
  std::size_t total_bytes_copied = 0;

  typename MutableBufferSequence::const_iterator target_iter = target.begin();
  typename MutableBufferSequence::const_iterator target_end = target.end();
  std::size_t target_buffer_offset = 0;

  typename ConstBufferSequence::const_iterator source_iter = source.begin();
  typename ConstBufferSequence::const_iterator source_end = source.end();
  std::size_t source_buffer_offset = 0;

  while (total_bytes_copied != max_bytes_to_copy
      && target_iter != target_end && source_iter != source_end)
  {
    mutable_buffer target_buffer =
      mutable_buffer(*target_iter) + target_buffer_offset;

    const_buffer source_buffer =
      const_buffer(*source_iter) + source_buffer_offset;

    std::size_t bytes_copied = buffer_copy(target_buffer,
        source_buffer, max_bytes_to_copy - total_bytes_copied);
    total_bytes_copied += bytes_copied;

    if (bytes_copied == buffer_size(target_buffer))
    {
      ++target_iter;
      target_buffer_offset = 0;
    }
    else
      target_buffer_offset += bytes_copied;

    if (bytes_copied == buffer_size(source_buffer))
    {
      ++source_iter;
      source_buffer_offset = 0;
    }
    else
      source_buffer_offset += bytes_copied;
  }

  return total_bytes_copied;
}



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 2238 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp" 2
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_sequence_adapter.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_sequence_adapter.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_sequence_adapter.hpp" 2

namespace asio {
namespace detail {

class buffer_sequence_adapter_base
{
protected:
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_sequence_adapter.hpp"
  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };

  typedef iovec native_buffer_type;

  static void init_iov_base(void*& base, void* addr)
  {
    base = addr;
  }

  template <typename T>
  static void init_iov_base(T& base, void* addr)
  {
    base = static_cast<T>(addr);
  }

  static void init_native_buffer(iovec& iov,
      const asio::mutable_buffer& buffer)
  {
    init_iov_base(iov.iov_base, asio::buffer_cast<void*>(buffer));
    iov.iov_len = asio::buffer_size(buffer);
  }

  static void init_native_buffer(iovec& iov,
      const asio::const_buffer& buffer)
  {
    init_iov_base(iov.iov_base, const_cast<void*>(
          asio::buffer_cast<const void*>(buffer)));
    iov.iov_len = asio::buffer_size(buffer);
  }

};


template <typename Buffer, typename Buffers>
class buffer_sequence_adapter
  : buffer_sequence_adapter_base
{
public:
  explicit buffer_sequence_adapter(const Buffers& buffer_sequence)
    : count_(0), total_buffer_size_(0)
  {
    typename Buffers::const_iterator iter = buffer_sequence.begin();
    typename Buffers::const_iterator end = buffer_sequence.end();
    for (; iter != end && count_ < max_buffers; ++iter, ++count_)
    {
      Buffer buffer(*iter);
      init_native_buffer(buffers_[count_], buffer);
      total_buffer_size_ += asio::buffer_size(buffer);
    }
  }

  native_buffer_type* buffers()
  {
    return buffers_;
  }

  std::size_t count() const
  {
    return count_;
  }

  bool all_empty() const
  {
    return total_buffer_size_ == 0;
  }

  static bool all_empty(const Buffers& buffer_sequence)
  {
    typename Buffers::const_iterator iter = buffer_sequence.begin();
    typename Buffers::const_iterator end = buffer_sequence.end();
    std::size_t i = 0;
    for (; iter != end && i < max_buffers; ++iter, ++i)
      if (asio::buffer_size(Buffer(*iter)) > 0)
        return false;
    return true;
  }

  static void validate(const Buffers& buffer_sequence)
  {
    typename Buffers::const_iterator iter = buffer_sequence.begin();
    typename Buffers::const_iterator end = buffer_sequence.end();
    for (; iter != end; ++iter)
    {
      Buffer buffer(*iter);
      asio::buffer_cast<const void*>(buffer);
    }
  }

  static Buffer first(const Buffers& buffer_sequence)
  {
    typename Buffers::const_iterator iter = buffer_sequence.begin();
    typename Buffers::const_iterator end = buffer_sequence.end();
    for (; iter != end; ++iter)
    {
      Buffer buffer(*iter);
      if (asio::buffer_size(buffer) != 0)
        return buffer;
    }
    return Buffer();
  }

private:
  native_buffer_type buffers_[max_buffers];
  std::size_t count_;
  std::size_t total_buffer_size_;
};

template <typename Buffer>
class buffer_sequence_adapter<Buffer, asio::mutable_buffers_1>
  : buffer_sequence_adapter_base
{
public:
  explicit buffer_sequence_adapter(
      const asio::mutable_buffers_1& buffer_sequence)
  {
    init_native_buffer(buffer_, Buffer(buffer_sequence));
    total_buffer_size_ = asio::buffer_size(buffer_sequence);
  }

  native_buffer_type* buffers()
  {
    return &buffer_;
  }

  std::size_t count() const
  {
    return 1;
  }

  bool all_empty() const
  {
    return total_buffer_size_ == 0;
  }

  static bool all_empty(const asio::mutable_buffers_1& buffer_sequence)
  {
    return asio::buffer_size(buffer_sequence) == 0;
  }

  static void validate(const asio::mutable_buffers_1& buffer_sequence)
  {
    asio::buffer_cast<const void*>(buffer_sequence);
  }

  static Buffer first(const asio::mutable_buffers_1& buffer_sequence)
  {
    return Buffer(buffer_sequence);
  }

private:
  native_buffer_type buffer_;
  std::size_t total_buffer_size_;
};

template <typename Buffer>
class buffer_sequence_adapter<Buffer, asio::const_buffers_1>
  : buffer_sequence_adapter_base
{
public:
  explicit buffer_sequence_adapter(
      const asio::const_buffers_1& buffer_sequence)
  {
    init_native_buffer(buffer_, Buffer(buffer_sequence));
    total_buffer_size_ = asio::buffer_size(buffer_sequence);
  }

  native_buffer_type* buffers()
  {
    return &buffer_;
  }

  std::size_t count() const
  {
    return 1;
  }

  bool all_empty() const
  {
    return total_buffer_size_ == 0;
  }

  static bool all_empty(const asio::const_buffers_1& buffer_sequence)
  {
    return asio::buffer_size(buffer_sequence) == 0;
  }

  static void validate(const asio::const_buffers_1& buffer_sequence)
  {
    asio::buffer_cast<const void*>(buffer_sequence);
  }

  static Buffer first(const asio::const_buffers_1& buffer_sequence)
  {
    return Buffer(buffer_sequence);
  }

private:
  native_buffer_type buffer_;
  std::size_t total_buffer_size_;
};

template <typename Buffer, typename Elem>
class buffer_sequence_adapter<Buffer, boost::array<Elem, 2> >
  : buffer_sequence_adapter_base
{
public:
  explicit buffer_sequence_adapter(
      const boost::array<Elem, 2>& buffer_sequence)
  {
    init_native_buffer(buffers_[0], Buffer(buffer_sequence[0]));
    init_native_buffer(buffers_[1], Buffer(buffer_sequence[1]));
    total_buffer_size_ = asio::buffer_size(buffer_sequence[0])
      + asio::buffer_size(buffer_sequence[1]);
  }

  native_buffer_type* buffers()
  {
    return buffers_;
  }

  std::size_t count() const
  {
    return 2;
  }

  bool all_empty() const
  {
    return total_buffer_size_ == 0;
  }

  static bool all_empty(const boost::array<Elem, 2>& buffer_sequence)
  {
    return asio::buffer_size(buffer_sequence[0]) == 0
      && asio::buffer_size(buffer_sequence[1]) == 0;
  }

  static void validate(const boost::array<Elem, 2>& buffer_sequence)
  {
    asio::buffer_cast<const void*>(buffer_sequence[0]);
    asio::buffer_cast<const void*>(buffer_sequence[1]);
  }

  static Buffer first(const boost::array<Elem, 2>& buffer_sequence)
  {
    return Buffer(asio::buffer_size(buffer_sequence[0]) != 0
        ? buffer_sequence[0] : buffer_sequence[1]);
  }

private:
  native_buffer_type buffers_[2];
  std::size_t total_buffer_size_;
};



template <typename Buffer, typename Elem>
class buffer_sequence_adapter<Buffer, std::array<Elem, 2> >
  : buffer_sequence_adapter_base
{
public:
  explicit buffer_sequence_adapter(
      const std::array<Elem, 2>& buffer_sequence)
  {
    init_native_buffer(buffers_[0], Buffer(buffer_sequence[0]));
    init_native_buffer(buffers_[1], Buffer(buffer_sequence[1]));
    total_buffer_size_ = asio::buffer_size(buffer_sequence[0])
      + asio::buffer_size(buffer_sequence[1]);
  }

  native_buffer_type* buffers()
  {
    return buffers_;
  }

  std::size_t count() const
  {
    return 2;
  }

  bool all_empty() const
  {
    return total_buffer_size_ == 0;
  }

  static bool all_empty(const std::array<Elem, 2>& buffer_sequence)
  {
    return asio::buffer_size(buffer_sequence[0]) == 0
      && asio::buffer_size(buffer_sequence[1]) == 0;
  }

  static void validate(const std::array<Elem, 2>& buffer_sequence)
  {
    asio::buffer_cast<const void*>(buffer_sequence[0]);
    asio::buffer_cast<const void*>(buffer_sequence[1]);
  }

  static Buffer first(const std::array<Elem, 2>& buffer_sequence)
  {
    return Buffer(asio::buffer_size(buffer_sequence[0]) != 0
        ? buffer_sequence[0] : buffer_sequence[1]);
  }

private:
  native_buffer_type buffers_[2];
  std::size_t total_buffer_size_;
};



}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 378 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_sequence_adapter.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/buffer_sequence_adapter.ipp" 1
# 381 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_sequence_adapter.hpp" 2
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_null_buffers_op.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_null_buffers_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_null_buffers_op.hpp" 2

namespace asio {
namespace detail {

template <typename Handler>
class reactive_null_buffers_op : public reactor_op
{
public:
  struct ptr { Handler* h; void* v; reactive_null_buffers_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_null_buffers_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_null_buffers_op), *h); v = 0; } } };

  reactive_null_buffers_op(Handler& handler)
    : reactor_op(&reactive_null_buffers_op::do_perform,
        &reactive_null_buffers_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static bool do_perform(reactor_op*)
  {
    return true;
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_null_buffers_op* o(static_cast<reactive_null_buffers_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 87 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_null_buffers_op.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_accept_op.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_accept_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_holder.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_holder.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/shared_ptr.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/shared_ptr.hpp"
namespace asio {
namespace detail {


using std::shared_ptr;




}
}
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/weak_ptr.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/weak_ptr.hpp"
namespace asio {
namespace detail {


using std::weak_ptr;




}
}
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 2

namespace asio {
namespace detail {
namespace socket_ops {


enum
{

  user_set_non_blocking = 1,


  internal_non_blocking = 2,


  non_blocking = user_set_non_blocking | internal_non_blocking,


  enable_connection_aborted = 4,


  user_set_linger = 8,


  stream_oriented = 16,


  datagram_oriented = 32,


  possible_dup = 64
};

typedef unsigned char state_type;

struct noop_deleter { void operator()(void*) {} };
typedef shared_ptr<void> shared_cancel_token_type;
typedef weak_ptr<void> weak_cancel_token_type;



inline socket_type accept(socket_type s, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec);

inline socket_type sync_accept(socket_type s,
    state_type state, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec);
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
inline bool non_blocking_accept(socket_type s,
    state_type state, socket_addr_type* addr, std::size_t* addrlen,
    asio::error_code& ec, socket_type& new_socket);



inline int bind(socket_type s, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec);

inline int close(socket_type s, state_type& state,
    bool destruction, asio::error_code& ec);

inline bool set_user_non_blocking(socket_type s,
    state_type& state, bool value, asio::error_code& ec);

inline bool set_internal_non_blocking(socket_type s,
    state_type& state, bool value, asio::error_code& ec);

inline int shutdown(socket_type s,
    int what, asio::error_code& ec);

inline int connect(socket_type s, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec);

inline void sync_connect(socket_type s, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec);
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
inline bool non_blocking_connect(socket_type s,
    asio::error_code& ec);

inline int socketpair(int af, int type, int protocol,
    socket_type sv[2], asio::error_code& ec);

inline bool sockatmark(socket_type s, asio::error_code& ec);

inline size_t available(socket_type s, asio::error_code& ec);

inline int listen(socket_type s,
    int backlog, asio::error_code& ec);




typedef iovec buf;


inline void init_buf(buf& b, void* data, size_t size);

inline void init_buf(buf& b, const void* data, size_t size);

inline signed_size_type recv(socket_type s, buf* bufs,
    size_t count, int flags, asio::error_code& ec);

inline size_t sync_recv(socket_type s, state_type state, buf* bufs,
    size_t count, int flags, bool all_empty, asio::error_code& ec);
# 154 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
inline bool non_blocking_recv(socket_type s,
    buf* bufs, size_t count, int flags, bool is_stream,
    asio::error_code& ec, size_t& bytes_transferred);



inline signed_size_type recvfrom(socket_type s, buf* bufs,
    size_t count, int flags, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec);

inline size_t sync_recvfrom(socket_type s, state_type state,
    buf* bufs, size_t count, int flags, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec);
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
inline bool non_blocking_recvfrom(socket_type s,
    buf* bufs, size_t count, int flags,
    socket_addr_type* addr, std::size_t* addrlen,
    asio::error_code& ec, size_t& bytes_transferred);



inline signed_size_type recvmsg(socket_type s, buf* bufs,
    size_t count, int in_flags, int& out_flags,
    asio::error_code& ec);

inline size_t sync_recvmsg(socket_type s, state_type state,
    buf* bufs, size_t count, int in_flags, int& out_flags,
    asio::error_code& ec);
# 199 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
inline bool non_blocking_recvmsg(socket_type s,
    buf* bufs, size_t count, int in_flags, int& out_flags,
    asio::error_code& ec, size_t& bytes_transferred);



inline signed_size_type send(socket_type s, const buf* bufs,
    size_t count, int flags, asio::error_code& ec);

inline size_t sync_send(socket_type s, state_type state,
    const buf* bufs, size_t count, int flags,
    bool all_empty, asio::error_code& ec);
# 220 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp"
inline bool non_blocking_send(socket_type s,
    const buf* bufs, size_t count, int flags,
    asio::error_code& ec, size_t& bytes_transferred);



inline signed_size_type sendto(socket_type s, const buf* bufs,
    size_t count, int flags, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec);

inline size_t sync_sendto(socket_type s, state_type state,
    const buf* bufs, size_t count, int flags, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec);



inline bool non_blocking_sendto(socket_type s,
    const buf* bufs, size_t count, int flags,
    const socket_addr_type* addr, std::size_t addrlen,
    asio::error_code& ec, size_t& bytes_transferred);



inline socket_type socket(int af, int type, int protocol,
    asio::error_code& ec);

inline int setsockopt(socket_type s, state_type& state,
    int level, int optname, const void* optval,
    std::size_t optlen, asio::error_code& ec);

inline int getsockopt(socket_type s, state_type state,
    int level, int optname, void* optval,
    size_t* optlen, asio::error_code& ec);

inline int getpeername(socket_type s, socket_addr_type* addr,
    std::size_t* addrlen, bool cached, asio::error_code& ec);

inline int getsockname(socket_type s, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec);

inline int ioctl(socket_type s, state_type& state,
    int cmd, ioctl_arg_type* arg, asio::error_code& ec);

inline int select(int nfds, fd_set* readfds, fd_set* writefds,
    fd_set* exceptfds, timeval* timeout, asio::error_code& ec);

inline int poll_read(socket_type s,
    state_type state, asio::error_code& ec);

inline int poll_write(socket_type s,
    state_type state, asio::error_code& ec);

inline int poll_connect(socket_type s, asio::error_code& ec);



inline const char* inet_ntop(int af, const void* src, char* dest,
    size_t length, unsigned long scope_id, asio::error_code& ec);

inline int inet_pton(int af, const char* src, void* dest,
    unsigned long* scope_id, asio::error_code& ec);

inline int gethostname(char* name,
    int namelen, asio::error_code& ec);



inline asio::error_code getaddrinfo(const char* host,
    const char* service, const addrinfo_type& hints,
    addrinfo_type** result, asio::error_code& ec);

inline asio::error_code background_getaddrinfo(
    const weak_cancel_token_type& cancel_token, const char* host,
    const char* service, const addrinfo_type& hints,
    addrinfo_type** result, asio::error_code& ec);

inline void freeaddrinfo(addrinfo_type* ai);

inline asio::error_code getnameinfo(
    const socket_addr_type* addr, std::size_t addrlen,
    char* host, std::size_t hostlen, char* serv,
    std::size_t servlen, int flags, asio::error_code& ec);

inline asio::error_code sync_getnameinfo(
    const socket_addr_type* addr, std::size_t addrlen,
    char* host, std::size_t hostlen, char* serv,
    std::size_t servlen, int sock_type, asio::error_code& ec);

inline asio::error_code background_getnameinfo(
    const weak_cancel_token_type& cancel_token,
    const socket_addr_type* addr, std::size_t addrlen,
    char* host, std::size_t hostlen, char* serv,
    std::size_t servlen, int sock_type, asio::error_code& ec);



inline u_long_type network_to_host_long(u_long_type value);

inline u_long_type host_to_network_long(u_long_type value);

inline u_short_type network_to_host_short(u_short_type value);

inline u_short_type host_to_network_short(u_short_type value);

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 329 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 2
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 45 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 2

namespace asio {
namespace detail {
namespace socket_ops {
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
inline void clear_last_error()
{



  
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
 (*__errno_location ()) 
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
       = 0;

}



template <typename ReturnType>
inline ReturnType error_wrapper(ReturnType return_value,
    asio::error_code& ec)
{




  ec = asio::error_code(
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                       (*__errno_location ())
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                            ,
      asio::error::get_system_category());

  return return_value;
}

template <typename SockLenType>
inline socket_type call_accept(SockLenType msghdr::*,
    socket_type s, socket_addr_type* addr, std::size_t* addrlen)
{
  SockLenType tmp_addrlen = addrlen ? (SockLenType)*addrlen : 0;
  socket_type result = ::accept(s, addr, addrlen ? &tmp_addrlen : 0);
  if (addrlen)
    *addrlen = (std::size_t)tmp_addrlen;
  return result;
}

socket_type accept(socket_type s, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return invalid_socket;
  }

  clear_last_error();

  socket_type new_s = error_wrapper(call_accept(
        &msghdr::msg_namelen, s, addr, addrlen), ec);
  if (new_s == invalid_socket)
    return new_s;
# 128 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  ec = asio::error_code();
  return new_s;
}

socket_type sync_accept(socket_type s, state_type state,
    socket_addr_type* addr, std::size_t* addrlen, asio::error_code& ec)
{

  for (;;)
  {

    socket_type new_socket = socket_ops::accept(s, addr, addrlen, ec);


    if (new_socket != invalid_socket)
      return new_socket;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
    {
      if (state & user_set_non_blocking)
        return invalid_socket;

    }
    else if (ec == asio::error::connection_aborted)
    {
      if (state & enable_connection_aborted)
        return invalid_socket;

    }

    else if (ec.value() == 
# 160 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                          71
# 160 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                )
    {
      if (state & enable_connection_aborted)
        return invalid_socket;

    }

    else
      return invalid_socket;


    if (socket_ops::poll_read(s, 0, ec) < 0)
      return invalid_socket;
  }
}
# 223 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
bool non_blocking_accept(socket_type s,
    state_type state, socket_addr_type* addr, std::size_t* addrlen,
    asio::error_code& ec, socket_type& new_socket)
{
  for (;;)
  {

    new_socket = socket_ops::accept(s, addr, addrlen, ec);


    if (new_socket != invalid_socket)
      return true;


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
    {
      if (state & user_set_non_blocking)
        return true;

    }
    else if (ec == asio::error::connection_aborted)
    {
      if (state & enable_connection_aborted)
        return true;

    }

    else if (ec.value() == 
# 255 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                          71
# 255 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                )
    {
      if (state & enable_connection_aborted)
        return true;

    }

    else
      return true;

    return false;
  }
}



template <typename SockLenType>
inline int call_bind(SockLenType msghdr::*,
    socket_type s, const socket_addr_type* addr, std::size_t addrlen)
{
  return ::bind(s, addr, (SockLenType)addrlen);
}

int bind(socket_type s, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  clear_last_error();
  int result = error_wrapper(call_bind(
        &msghdr::msg_namelen, s, addr, addrlen), ec);
  if (result == 0)
    ec = asio::error_code();
  return result;
}

int close(socket_type s, state_type& state,
    bool destruction, asio::error_code& ec)
{
  int result = 0;
  if (s != invalid_socket)
  {



    if (destruction && (state & user_set_linger))
    {
      ::linger opt;
      opt.l_onoff = 0;
      opt.l_linger = 0;
      asio::error_code ignored_ec;
      socket_ops::setsockopt(s, state, 
# 310 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                      1
# 310 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                ,
          
# 311 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
         13
# 311 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                  , &opt, sizeof(opt), ignored_ec);
    }

    clear_last_error();



    result = error_wrapper(::close(s), ec);


    if (result != 0
        && (ec == asio::error::would_block
          || ec == asio::error::try_again))
    {
# 340 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
      ioctl_arg_type arg = 0;
      ::ioctl(s, 
# 341 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                0x5421
# 341 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                       , &arg);


      state &= ~non_blocking;

      clear_last_error();



      result = error_wrapper(::close(s), ec);

    }
  }

  if (result == 0)
    ec = asio::error_code();
  return result;
}

bool set_user_non_blocking(socket_type s,
    state_type& state, bool value, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return false;
  }

  clear_last_error();
# 382 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  ioctl_arg_type arg = (value ? 1 : 0);
  int result = error_wrapper(::ioctl(s, 
# 383 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                       0x5421
# 383 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                              , &arg), ec);


  if (result >= 0)
  {
    ec = asio::error_code();
    if (value)
      state |= user_set_non_blocking;
    else
    {



      state &= ~(user_set_non_blocking | internal_non_blocking);
    }
    return true;
  }

  return false;
}

bool set_internal_non_blocking(socket_type s,
    state_type& state, bool value, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return false;
  }

  if (!value && (state & user_set_non_blocking))
  {



    ec = asio::error::invalid_argument;
    return false;
  }

  clear_last_error();
# 435 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  ioctl_arg_type arg = (value ? 1 : 0);
  int result = error_wrapper(::ioctl(s, 
# 436 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                       0x5421
# 436 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                              , &arg), ec);


  if (result >= 0)
  {
    ec = asio::error_code();
    if (value)
      state |= internal_non_blocking;
    else
      state &= ~internal_non_blocking;
    return true;
  }

  return false;
}

int shutdown(socket_type s, int what, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  clear_last_error();
  int result = error_wrapper(::shutdown(s, what), ec);
  if (result == 0)
    ec = asio::error_code();
  return result;
}

template <typename SockLenType>
inline int call_connect(SockLenType msghdr::*,
    socket_type s, const socket_addr_type* addr, std::size_t addrlen)
{
  return ::connect(s, addr, (SockLenType)addrlen);
}

int connect(socket_type s, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  clear_last_error();
  int result = error_wrapper(call_connect(
        &msghdr::msg_namelen, s, addr, addrlen), ec);
  if (result == 0)
    ec = asio::error_code();

  else if (ec == asio::error::try_again)
    ec = asio::error::no_buffer_space;

  return result;
}

void sync_connect(socket_type s, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec)
{

  socket_ops::connect(s, addr, addrlen, ec);
  if (ec != asio::error::in_progress
      && ec != asio::error::would_block)
  {

    return;
  }


  if (socket_ops::poll_connect(s, ec) < 0)
    return;


  int connect_error = 0;
  size_t connect_error_len = sizeof(connect_error);
  if (socket_ops::getsockopt(s, 0, 
# 514 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                  1
# 514 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                            , 
# 514 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                              4
# 514 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                      ,
        &connect_error, &connect_error_len, ec) == socket_error_retval)
    return;


  ec = asio::error_code(connect_error,
      asio::error::get_system_category());
}
# 559 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
bool non_blocking_connect(socket_type s, asio::error_code& ec)
{
# 579 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  pollfd fds;
  fds.fd = s;
  fds.events = 
# 581 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
              0x004
# 581 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                     ;
  fds.revents = 0;
  int ready = ::poll(&fds, 1, 0);



  if (ready == 0)
  {

    return false;
  }


  int connect_error = 0;
  size_t connect_error_len = sizeof(connect_error);
  if (socket_ops::getsockopt(s, 0, 
# 596 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                  1
# 596 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                            , 
# 596 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                              4
# 596 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                      ,
        &connect_error, &connect_error_len, ec) == 0)
  {
    if (connect_error)
    {
      ec = asio::error_code(connect_error,
          asio::error::get_system_category());
    }
    else
      ec = asio::error_code();
  }

  return true;
}

int socketpair(int af, int type, int protocol,
    socket_type sv[2], asio::error_code& ec)
{
# 622 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  clear_last_error();
  int result = error_wrapper(::socketpair(af, type, protocol, sv), ec);
  if (result == 0)
    ec = asio::error_code();
  return result;

}

bool sockatmark(socket_type s, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return false;
  }


  ioctl_arg_type value = 0;



  int result = error_wrapper(::ioctl(s, 
# 643 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                       0x8905
# 643 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                 , &value), ec);

  if (result == 0)
    ec = asio::error_code();

  if (ec.value() == 
# 648 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                   25
# 648 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                         )
    ec = asio::error::not_socket;







  return ec ? false : value != 0;
}

size_t available(socket_type s, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }

  ioctl_arg_type value = 0;



  int result = error_wrapper(::ioctl(s, 
# 672 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                       0x541B
# 672 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                               , &value), ec);

  if (result == 0)
    ec = asio::error_code();

  if (ec.value() == 
# 677 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                   25
# 677 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                         )
    ec = asio::error::not_socket;


  return ec ? static_cast<size_t>(0) : static_cast<size_t>(value);
}

int listen(socket_type s, int backlog, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  clear_last_error();
  int result = error_wrapper(::listen(s, backlog), ec);
  if (result == 0)
    ec = asio::error_code();
  return result;
}

inline void init_buf_iov_base(void*& base, void* addr)
{
  base = addr;
}

template <typename T>
inline void init_buf_iov_base(T& base, void* addr)
{
  base = static_cast<T>(addr);
}




typedef iovec buf;


void init_buf(buf& b, void* data, size_t size)
{




  init_buf_iov_base(b.iov_base, data);
  b.iov_len = size;

}

void init_buf(buf& b, const void* data, size_t size)
{




  init_buf_iov_base(b.iov_base, const_cast<void*>(data));
  b.iov_len = size;

}

inline void init_msghdr_msg_name(void*& name, socket_addr_type* addr)
{
  name = addr;
}

inline void init_msghdr_msg_name(void*& name, const socket_addr_type* addr)
{
  name = const_cast<socket_addr_type*>(addr);
}

template <typename T>
inline void init_msghdr_msg_name(T& name, socket_addr_type* addr)
{
  name = reinterpret_cast<T>(addr);
}

template <typename T>
inline void init_msghdr_msg_name(T& name, const socket_addr_type* addr)
{
  name = reinterpret_cast<T>(const_cast<socket_addr_type*>(addr));
}

signed_size_type recv(socket_type s, buf* bufs, size_t count,
    int flags, asio::error_code& ec)
{
  clear_last_error();
# 780 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  msghdr msg = msghdr();
  msg.msg_iov = bufs;
  msg.msg_iovlen = static_cast<int>(count);
  signed_size_type result = error_wrapper(::recvmsg(s, &msg, flags), ec);
  if (result >= 0)
    ec = asio::error_code();
  return result;

}

size_t sync_recv(socket_type s, state_type state, buf* bufs,
    size_t count, int flags, bool all_empty, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  if (all_empty && (state & stream_oriented))
  {
    ec = asio::error_code();
    return 0;
  }


  for (;;)
  {

    signed_size_type bytes = socket_ops::recv(s, bufs, count, flags, ec);


    if (bytes > 0)
      return bytes;


    if ((state & stream_oriented) && bytes == 0)
    {
      ec = asio::error::eof;
      return 0;
    }


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (socket_ops::poll_read(s, 0, ec) < 0)
      return 0;
  }
}
# 865 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
bool non_blocking_recv(socket_type s,
    buf* bufs, size_t count, int flags, bool is_stream,
    asio::error_code& ec, size_t& bytes_transferred)
{
  for (;;)
  {

    signed_size_type bytes = socket_ops::recv(s, bufs, count, flags, ec);


    if (is_stream && bytes == 0)
    {
      ec = asio::error::eof;
      return true;
    }


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes >= 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}



signed_size_type recvfrom(socket_type s, buf* bufs, size_t count,
    int flags, socket_addr_type* addr, std::size_t* addrlen,
    asio::error_code& ec)
{
  clear_last_error();
# 928 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  msghdr msg = msghdr();
  init_msghdr_msg_name(msg.msg_name, addr);
  msg.msg_namelen = static_cast<int>(*addrlen);
  msg.msg_iov = bufs;
  msg.msg_iovlen = static_cast<int>(count);
  signed_size_type result = error_wrapper(::recvmsg(s, &msg, flags), ec);
  *addrlen = msg.msg_namelen;
  if (result >= 0)
    ec = asio::error_code();
  return result;

}

size_t sync_recvfrom(socket_type s, state_type state, buf* bufs,
    size_t count, int flags, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  for (;;)
  {

    signed_size_type bytes = socket_ops::recvfrom(
        s, bufs, count, flags, addr, addrlen, ec);


    if (bytes >= 0)
      return bytes;


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (socket_ops::poll_read(s, 0, ec) < 0)
      return 0;
  }
}
# 996 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
bool non_blocking_recvfrom(socket_type s,
    buf* bufs, size_t count, int flags,
    socket_addr_type* addr, std::size_t* addrlen,
    asio::error_code& ec, size_t& bytes_transferred)
{
  for (;;)
  {

    signed_size_type bytes = socket_ops::recvfrom(
        s, bufs, count, flags, addr, addrlen, ec);


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes >= 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}



signed_size_type recvmsg(socket_type s, buf* bufs, size_t count,
    int in_flags, int& out_flags, asio::error_code& ec)
{
  clear_last_error();




  msghdr msg = msghdr();
  msg.msg_iov = bufs;
  msg.msg_iovlen = static_cast<int>(count);
  signed_size_type result = error_wrapper(::recvmsg(s, &msg, in_flags), ec);
  if (result >= 0)
  {
    ec = asio::error_code();
    out_flags = msg.msg_flags;
  }
  else
    out_flags = 0;
  return result;

}

size_t sync_recvmsg(socket_type s, state_type state,
    buf* bufs, size_t count, int in_flags, int& out_flags,
    asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  for (;;)
  {

    signed_size_type bytes = socket_ops::recvmsg(
        s, bufs, count, in_flags, out_flags, ec);


    if (bytes >= 0)
      return bytes;


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (socket_ops::poll_read(s, 0, ec) < 0)
      return 0;
  }
}
# 1109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
bool non_blocking_recvmsg(socket_type s,
    buf* bufs, size_t count, int in_flags, int& out_flags,
    asio::error_code& ec, size_t& bytes_transferred)
{
  for (;;)
  {

    signed_size_type bytes = socket_ops::recvmsg(
        s, bufs, count, in_flags, out_flags, ec);


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes >= 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}



signed_size_type send(socket_type s, const buf* bufs, size_t count,
    int flags, asio::error_code& ec)
{
  clear_last_error();
# 1163 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  msghdr msg = msghdr();
  msg.msg_iov = const_cast<buf*>(bufs);
  msg.msg_iovlen = static_cast<int>(count);

  flags |= 
# 1167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
          MSG_NOSIGNAL
# 1167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                      ;

  signed_size_type result = error_wrapper(::sendmsg(s, &msg, flags), ec);
  if (result >= 0)
    ec = asio::error_code();
  return result;

}

size_t sync_send(socket_type s, state_type state, const buf* bufs,
    size_t count, int flags, bool all_empty, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  if (all_empty && (state & stream_oriented))
  {
    ec = asio::error_code();
    return 0;
  }


  for (;;)
  {

    signed_size_type bytes = socket_ops::send(s, bufs, count, flags, ec);


    if (bytes >= 0)
      return bytes;


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (socket_ops::poll_write(s, 0, ec) < 0)
      return 0;
  }
}
# 1236 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
bool non_blocking_send(socket_type s,
    const buf* bufs, size_t count, int flags,
    asio::error_code& ec, size_t& bytes_transferred)
{
  for (;;)
  {

    signed_size_type bytes = socket_ops::send(s, bufs, count, flags, ec);


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes >= 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}



signed_size_type sendto(socket_type s, const buf* bufs, size_t count,
    int flags, const socket_addr_type* addr, std::size_t addrlen,
    asio::error_code& ec)
{
  clear_last_error();
# 1290 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  msghdr msg = msghdr();
  init_msghdr_msg_name(msg.msg_name, addr);
  msg.msg_namelen = static_cast<int>(addrlen);
  msg.msg_iov = const_cast<buf*>(bufs);
  msg.msg_iovlen = static_cast<int>(count);

  flags |= 
# 1296 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
          MSG_NOSIGNAL
# 1296 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                      ;

  signed_size_type result = error_wrapper(::sendmsg(s, &msg, flags), ec);
  if (result >= 0)
    ec = asio::error_code();
  return result;

}

size_t sync_sendto(socket_type s, state_type state, const buf* bufs,
    size_t count, int flags, const socket_addr_type* addr,
    std::size_t addrlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  for (;;)
  {

    signed_size_type bytes = socket_ops::sendto(
        s, bufs, count, flags, addr, addrlen, ec);


    if (bytes >= 0)
      return bytes;


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (socket_ops::poll_write(s, 0, ec) < 0)
      return 0;
  }
}



bool non_blocking_sendto(socket_type s,
    const buf* bufs, size_t count, int flags,
    const socket_addr_type* addr, std::size_t addrlen,
    asio::error_code& ec, size_t& bytes_transferred)
{
  for (;;)
  {

    signed_size_type bytes = socket_ops::sendto(
        s, bufs, count, flags, addr, addrlen, ec);


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes >= 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}



socket_type socket(int af, int type, int protocol,
    asio::error_code& ec)
{
  clear_last_error();
# 1414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  int s = error_wrapper(::socket(af, type, protocol), ec);
  if (s >= 0)
    ec = asio::error_code();
  return s;

}

template <typename SockLenType>
inline int call_setsockopt(SockLenType msghdr::*,
    socket_type s, int level, int optname,
    const void* optval, std::size_t optlen)
{
  return ::setsockopt(s, level, optname,
      (const char*)optval, (SockLenType)optlen);
}

int setsockopt(socket_type s, state_type& state, int level, int optname,
    const void* optval, std::size_t optlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  if (level == custom_socket_option_level && optname == always_fail_option)
  {
    ec = asio::error::invalid_argument;
    return socket_error_retval;
  }

  if (level == custom_socket_option_level
      && optname == enable_connection_aborted_option)
  {
    if (optlen != sizeof(int))
    {
      ec = asio::error::invalid_argument;
      return socket_error_retval;
    }

    if (*static_cast<const int*>(optval))
      state |= enable_connection_aborted;
    else
      state &= ~enable_connection_aborted;
    ec = asio::error_code();
    return 0;
  }

  if (level == 
# 1462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
              1 
# 1462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                         && optname == 
# 1462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                       13
# 1462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                )
    state |= user_set_linger;
# 1483 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  clear_last_error();
  int result = error_wrapper(call_setsockopt(&msghdr::msg_namelen,
        s, level, optname, optval, optlen), ec);
  if (result == 0)
  {
    ec = asio::error_code();
# 1501 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  }

  return result;

}

template <typename SockLenType>
inline int call_getsockopt(SockLenType msghdr::*,
    socket_type s, int level, int optname,
    void* optval, std::size_t* optlen)
{
  SockLenType tmp_optlen = (SockLenType)*optlen;
  int result = ::getsockopt(s, level, optname, (char*)optval, &tmp_optlen);
  *optlen = (std::size_t)tmp_optlen;
  return result;
}

int getsockopt(socket_type s, state_type state, int level, int optname,
    void* optval, size_t* optlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  if (level == custom_socket_option_level && optname == always_fail_option)
  {
    ec = asio::error::invalid_argument;
    return socket_error_retval;
  }

  if (level == custom_socket_option_level
      && optname == enable_connection_aborted_option)
  {
    if (*optlen != sizeof(int))
    {
      ec = asio::error::invalid_argument;
      return socket_error_retval;
    }

    *static_cast<int*>(optval) = (state & enable_connection_aborted) ? 1 : 0;
    ec = asio::error_code();
    return 0;
  }
# 1596 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  clear_last_error();
  int result = error_wrapper(call_getsockopt(&msghdr::msg_namelen,
        s, level, optname, optval, optlen), ec);

  if (result == 0 && level == 
# 1600 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                             1 
# 1600 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                        && *optlen == sizeof(int)
      && (optname == 
# 1601 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                    7 
# 1601 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                              || optname == 
# 1601 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                            8
# 1601 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                     ))
  {





    *static_cast<int*>(optval) /= 2;
  }

  if (result == 0)
    ec = asio::error_code();
  return result;

}

template <typename SockLenType>
inline int call_getpeername(SockLenType msghdr::*,
    socket_type s, socket_addr_type* addr, std::size_t* addrlen)
{
  SockLenType tmp_addrlen = (SockLenType)*addrlen;
  int result = ::getpeername(s, addr, &tmp_addrlen);
  *addrlen = (std::size_t)tmp_addrlen;
  return result;
}

int getpeername(socket_type s, socket_addr_type* addr,
    std::size_t* addrlen, bool cached, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }
# 1660 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  (void)cached;



  clear_last_error();
  int result = error_wrapper(call_getpeername(
        &msghdr::msg_namelen, s, addr, addrlen), ec);
  if (result == 0)
    ec = asio::error_code();
  return result;
}

template <typename SockLenType>
inline int call_getsockname(SockLenType msghdr::*,
    socket_type s, socket_addr_type* addr, std::size_t* addrlen)
{
  SockLenType tmp_addrlen = (SockLenType)*addrlen;
  int result = ::getsockname(s, addr, &tmp_addrlen);
  *addrlen = (std::size_t)tmp_addrlen;
  return result;
}

int getsockname(socket_type s, socket_addr_type* addr,
    std::size_t* addrlen, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  clear_last_error();
  int result = error_wrapper(call_getsockname(
        &msghdr::msg_namelen, s, addr, addrlen), ec);
  if (result == 0)
    ec = asio::error_code();
  return result;
}

int ioctl(socket_type s, state_type& state, int cmd,
    ioctl_arg_type* arg, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }

  clear_last_error();







  int result = error_wrapper(::ioctl(s, cmd, arg), ec);

  if (result >= 0)
  {
    ec = asio::error_code();






    if (cmd == static_cast<int>(
# 1727 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                               0x5421
# 1727 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                      ))
    {
      if (*arg)
      {
        state |= user_set_non_blocking;
      }
      else
      {



        state &= ~(user_set_non_blocking | internal_non_blocking);
      }
    }
  }

  return result;
}

int select(int nfds, fd_set* readfds, fd_set* writefds,
    fd_set* exceptfds, timeval* timeout, asio::error_code& ec)
{
  clear_last_error();
# 1779 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  int result = error_wrapper(::select(nfds, readfds,
        writefds, exceptfds, timeout), ec);
  if (result >= 0)
    ec = asio::error_code();
  return result;

}

int poll_read(socket_type s, state_type state, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }
# 1810 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  pollfd fds;
  fds.fd = s;
  fds.events = 
# 1812 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
              0x001
# 1812 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                    ;
  fds.revents = 0;
  int timeout = (state & user_set_non_blocking) ? 0 : -1;
  clear_last_error();
  int result = error_wrapper(::poll(&fds, 1, timeout), ec);



  if (result == 0)
    ec = (state & user_set_non_blocking)
      ? asio::error::would_block : asio::error_code();
  else if (result > 0)
    ec = asio::error_code();
  return result;
}

int poll_write(socket_type s, state_type state, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }
# 1851 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  pollfd fds;
  fds.fd = s;
  fds.events = 
# 1853 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
              0x004
# 1853 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                     ;
  fds.revents = 0;
  int timeout = (state & user_set_non_blocking) ? 0 : -1;
  clear_last_error();
  int result = error_wrapper(::poll(&fds, 1, timeout), ec);



  if (result == 0)
    ec = (state & user_set_non_blocking)
      ? asio::error::would_block : asio::error_code();
  else if (result > 0)
    ec = asio::error_code();
  return result;
}

int poll_connect(socket_type s, asio::error_code& ec)
{
  if (s == invalid_socket)
  {
    ec = asio::error::bad_descriptor;
    return socket_error_retval;
  }
# 1895 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  pollfd fds;
  fds.fd = s;
  fds.events = 
# 1897 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
              0x004
# 1897 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                     ;
  fds.revents = 0;
  clear_last_error();
  int result = error_wrapper(::poll(&fds, 1, -1), ec);
  if (result >= 0)
    ec = asio::error_code();
  return result;



}



const char* inet_ntop(int af, const void* src, char* dest, size_t length,
    unsigned long scope_id, asio::error_code& ec)
{
  clear_last_error();
# 2006 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  const char* result = error_wrapper(::inet_ntop(
        af, src, dest, static_cast<int>(length)), ec);
  if (result == 0 && !ec)
    ec = asio::error::invalid_argument;
  if (result != 0 && af == 
# 2010 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                          10 
# 2010 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                && scope_id != 0)
  {
    using namespace std;
    char if_name[
# 2013 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                16 
# 2013 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                            + 1] = "%";
    const in6_addr_type* ipv6_address = static_cast<const in6_addr_type*>(src);
    bool is_link_local = ((ipv6_address->
# 2015 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                        __in6_u.__u6_addr8
# 2015 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                               [0] == 0xfe)
        && ((ipv6_address->
# 2016 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                          __in6_u.__u6_addr8
# 2016 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                 [1] & 0xc0) == 0x80));
    bool is_multicast_link_local = ((ipv6_address->
# 2017 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                                  __in6_u.__u6_addr8
# 2017 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                         [0] == 0xff)
        && ((ipv6_address->
# 2018 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                          __in6_u.__u6_addr8
# 2018 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                 [1] & 0x0f) == 0x02));
    if ((!is_link_local && !is_multicast_link_local)
        || if_indextoname(static_cast<unsigned>(scope_id), if_name + 1) == 0)
      sprintf(if_name + 1, "%lu", scope_id);
    strcat(dest, if_name);
  }
  return result;

}

int inet_pton(int af, const char* src, void* dest,
    unsigned long* scope_id, asio::error_code& ec)
{
  clear_last_error();
# 2237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  using namespace std;



  const bool is_v6 = (af == 
# 2241 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                           10
# 2241 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                );
  const char* if_name = is_v6 ? strchr(src, '%') : 0;
  char src_buf[max_addr_v6_str_len + 1];
  const char* src_ptr = src;
  if (if_name != 0)
  {
    if (if_name - src > max_addr_v6_str_len)
    {
      ec = asio::error::invalid_argument;
      return 0;
    }
    memcpy(src_buf, src, if_name - src);
    src_buf[if_name - src] = 0;
    src_ptr = src_buf;
  }

  int result = error_wrapper(::inet_pton(af, src_ptr, dest), ec);
  if (result <= 0 && !ec)
    ec = asio::error::invalid_argument;
  if (result > 0 && is_v6 && scope_id)
  {
    using namespace std;
    *scope_id = 0;
    if (if_name != 0)
    {
      in6_addr_type* ipv6_address = static_cast<in6_addr_type*>(dest);
      bool is_link_local = ((ipv6_address->
# 2267 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                          __in6_u.__u6_addr8
# 2267 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                 [0] == 0xfe)
          && ((ipv6_address->
# 2268 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                            __in6_u.__u6_addr8
# 2268 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                   [1] & 0xc0) == 0x80));
      bool is_multicast_link_local = ((ipv6_address->
# 2269 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                                    __in6_u.__u6_addr8
# 2269 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                           [0] == 0xff)
          && ((ipv6_address->
# 2270 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                            __in6_u.__u6_addr8
# 2270 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                   [1] & 0x0f) == 0x02));
      if (is_link_local || is_multicast_link_local)
        *scope_id = if_nametoindex(if_name + 1);
      if (*scope_id == 0)
        *scope_id = atoi(if_name + 1);
    }
  }
  return result;

}

int gethostname(char* name, int namelen, asio::error_code& ec)
{
  clear_last_error();
# 2314 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  int result = error_wrapper(::gethostname(name, namelen), ec);




  return result;

}
# 3169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
inline asio::error_code translate_addrinfo_error(int error)
{
  switch (error)
  {
  case 0:
    return asio::error_code();
  case 
# 3175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -3
# 3175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
               :
    return asio::error::host_not_found_try_again;
  case 
# 3177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -1
# 3177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                  :
    return asio::error::invalid_argument;
  case 
# 3179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -4
# 3179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
              :
    return asio::error::no_recovery;
  case 
# 3181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -6
# 3181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                :
    return asio::error::address_family_not_supported;
  case 
# 3183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -10
# 3183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                :
    return asio::error::no_memory;
  case 
# 3185 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -2
# 3185 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                :

  case 
# 3187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -9
# 3187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                    :


  case 
# 3190 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -5
# 3190 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                :

    return asio::error::host_not_found;
  case 
# 3193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -8
# 3193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                 :
    return asio::error::service_not_found;
  case 
# 3195 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
      -7
# 3195 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                  :
    return asio::error::socket_type_not_supported;
  default:




    return asio::error_code(
        
# 3203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
       (*__errno_location ())
# 3203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
            , asio::error::get_system_category());

  }
}

asio::error_code getaddrinfo(const char* host,
    const char* service, const addrinfo_type& hints,
    addrinfo_type** result, asio::error_code& ec)
{
  host = (host && *host) ? host : 0;
  service = (service && *service) ? service : 0;
  clear_last_error();
# 3239 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  int error = ::getaddrinfo(host, service, &hints, result);
  return ec = translate_addrinfo_error(error);

}

asio::error_code background_getaddrinfo(
    const weak_cancel_token_type& cancel_token, const char* host,
    const char* service, const addrinfo_type& hints,
    addrinfo_type** result, asio::error_code& ec)
{
  if (cancel_token.expired())
    ec = asio::error::operation_aborted;
  else
    socket_ops::getaddrinfo(host, service, hints, result, ec);
  return ec;
}

void freeaddrinfo(addrinfo_type* ai)
{
# 3278 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  ::freeaddrinfo(ai);

}

asio::error_code getnameinfo(const socket_addr_type* addr,
    std::size_t addrlen, char* host, std::size_t hostlen,
    char* serv, std::size_t servlen, int flags, asio::error_code& ec)
{
# 3323 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  clear_last_error();
  int error = ::getnameinfo(addr, addrlen, host, hostlen, serv, servlen, flags);
  return ec = translate_addrinfo_error(error);

}

asio::error_code sync_getnameinfo(
    const socket_addr_type* addr, std::size_t addrlen,
    char* host, std::size_t hostlen, char* serv,
    std::size_t servlen, int sock_type, asio::error_code& ec)
{


  int flags = (sock_type == 
# 3336 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                           SOCK_DGRAM
# 3336 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                     ) ? 
# 3336 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                         16 
# 3336 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                  : 0;
  socket_ops::getnameinfo(addr, addrlen, host,
      hostlen, serv, servlen, flags, ec);
  if (ec)
  {
    socket_ops::getnameinfo(addr, addrlen, host, hostlen,
        serv, servlen, flags | 
# 3342 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                              2
# 3342 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                            , ec);
  }

  return ec;
}

asio::error_code background_getnameinfo(
    const weak_cancel_token_type& cancel_token,
    const socket_addr_type* addr, std::size_t addrlen,
    char* host, std::size_t hostlen, char* serv,
    std::size_t servlen, int sock_type, asio::error_code& ec)
{
  if (cancel_token.expired())
  {
    ec = asio::error::operation_aborted;
  }
  else
  {


    int flags = (sock_type == 
# 3362 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                             SOCK_DGRAM
# 3362 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                       ) ? 
# 3362 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                           16 
# 3362 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                                    : 0;
    socket_ops::getnameinfo(addr, addrlen, host,
        hostlen, serv, servlen, flags, ec);
    if (ec)
    {
      socket_ops::getnameinfo(addr, addrlen, host, hostlen,
          serv, servlen, flags | 
# 3368 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
                                2
# 3368 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                                              , ec);
    }
  }

  return ec;
}



u_long_type network_to_host_long(u_long_type value)
{
# 3387 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  return 
# 3387 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        __bswap_32 (
# 3387 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
        value
# 3387 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        )
# 3387 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                    ;

}

u_long_type host_to_network_long(u_long_type value)
{
# 3402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
  return 
# 3402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        __bswap_32 (
# 3402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
        value
# 3402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        )
# 3402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                    ;

}

u_short_type network_to_host_short(u_short_type value)
{






  return 
# 3414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        __bswap_16 (
# 3414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
        value
# 3414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        )
# 3414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                    ;

}

u_short_type host_to_network_short(u_short_type value)
{







  return 
# 3427 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        __bswap_16 (
# 3427 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
        value
# 3427 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 3 4
        )
# 3427 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp"
                    ;

}

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 3436 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/socket_ops.ipp" 2
# 332 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_ops.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_holder.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_holder.hpp" 2

namespace asio {
namespace detail {


class socket_holder
  : private noncopyable
{
public:

  socket_holder()
    : socket_(invalid_socket)
  {
  }


  explicit socket_holder(socket_type s)
    : socket_(s)
  {
  }


  ~socket_holder()
  {
    if (socket_ != invalid_socket)
    {
      asio::error_code ec;
      socket_ops::state_type state = 0;
      socket_ops::close(socket_, state, true, ec);
    }
  }


  socket_type get() const
  {
    return socket_;
  }


  void reset()
  {
    if (socket_ != invalid_socket)
    {
      asio::error_code ec;
      socket_ops::state_type state = 0;
      socket_ops::close(socket_, state, true, ec);
      socket_ = invalid_socket;
    }
  }


  void reset(socket_type s)
  {
    reset();
    socket_ = s;
  }


  socket_type release()
  {
    socket_type tmp = socket_;
    socket_ = invalid_socket;
    return tmp;
  }

private:

  socket_type socket_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 97 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/socket_holder.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_accept_op.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_accept_op.hpp" 2

namespace asio {
namespace detail {

template <typename Socket, typename Protocol>
class reactive_socket_accept_op_base : public reactor_op
{
public:
  reactive_socket_accept_op_base(socket_type socket,
      socket_ops::state_type state, Socket& peer, const Protocol& protocol,
      typename Protocol::endpoint* peer_endpoint, func_type complete_func)
    : reactor_op(&reactive_socket_accept_op_base::do_perform, complete_func),
      socket_(socket),
      state_(state),
      peer_(peer),
      protocol_(protocol),
      peer_endpoint_(peer_endpoint)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_accept_op_base* o(
        static_cast<reactive_socket_accept_op_base*>(base));

    std::size_t addrlen = o->peer_endpoint_ ? o->peer_endpoint_->capacity() : 0;
    socket_type new_socket = invalid_socket;
    bool result = socket_ops::non_blocking_accept(o->socket_,
          o->state_, o->peer_endpoint_ ? o->peer_endpoint_->data() : 0,
          o->peer_endpoint_ ? &addrlen : 0, o->ec_, new_socket);


    if (new_socket != invalid_socket)
    {
      socket_holder new_socket_holder(new_socket);
      if (o->peer_endpoint_)
        o->peer_endpoint_->resize(addrlen);
      if (!o->peer_.assign(o->protocol_, new_socket, o->ec_))
        new_socket_holder.release();
    }

    return result;
  }

private:
  socket_type socket_;
  socket_ops::state_type state_;
  Socket& peer_;
  Protocol protocol_;
  typename Protocol::endpoint* peer_endpoint_;
};

template <typename Socket, typename Protocol, typename Handler>
class reactive_socket_accept_op :
  public reactive_socket_accept_op_base<Socket, Protocol>
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_accept_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_accept_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_accept_op), *h); v = 0; } } };

  reactive_socket_accept_op(socket_type socket,
      socket_ops::state_type state, Socket& peer, const Protocol& protocol,
      typename Protocol::endpoint* peer_endpoint, Handler& handler)
    : reactive_socket_accept_op_base<Socket, Protocol>(socket, state, peer,
        protocol, peer_endpoint, &reactive_socket_accept_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_accept_op* o(static_cast<reactive_socket_accept_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder1<Handler, asio::error_code>
      handler(o->handler_, o->ec_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_accept_op.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_connect_op.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_connect_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_connect_op.hpp" 2

namespace asio {
namespace detail {

class reactive_socket_connect_op_base : public reactor_op
{
public:
  reactive_socket_connect_op_base(socket_type socket, func_type complete_func)
    : reactor_op(&reactive_socket_connect_op_base::do_perform, complete_func),
      socket_(socket)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_connect_op_base* o(
        static_cast<reactive_socket_connect_op_base*>(base));

    return socket_ops::non_blocking_connect(o->socket_, o->ec_);
  }

private:
  socket_type socket_;
};

template <typename Handler>
class reactive_socket_connect_op : public reactive_socket_connect_op_base
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_connect_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_connect_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_connect_op), *h); v = 0; } } };

  reactive_socket_connect_op(socket_type socket, Handler& handler)
    : reactive_socket_connect_op_base(socket,
        &reactive_socket_connect_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_connect_op* o
      (static_cast<reactive_socket_connect_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder1<Handler, asio::error_code>
      handler(o->handler_, o->ec_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 105 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_connect_op.hpp" 2
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvfrom_op.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvfrom_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvfrom_op.hpp" 2

namespace asio {
namespace detail {

template <typename MutableBufferSequence, typename Endpoint>
class reactive_socket_recvfrom_op_base : public reactor_op
{
public:
  reactive_socket_recvfrom_op_base(socket_type socket, int protocol_type,
      const MutableBufferSequence& buffers, Endpoint& endpoint,
      socket_base::message_flags flags, func_type complete_func)
    : reactor_op(&reactive_socket_recvfrom_op_base::do_perform, complete_func),
      socket_(socket),
      protocol_type_(protocol_type),
      buffers_(buffers),
      sender_endpoint_(endpoint),
      flags_(flags)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_recvfrom_op_base* o(
        static_cast<reactive_socket_recvfrom_op_base*>(base));

    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(o->buffers_);

    std::size_t addr_len = o->sender_endpoint_.capacity();
    bool result = socket_ops::non_blocking_recvfrom(o->socket_,
        bufs.buffers(), bufs.count(), o->flags_,
        o->sender_endpoint_.data(), &addr_len,
        o->ec_, o->bytes_transferred_);

    if (result && !o->ec_)
      o->sender_endpoint_.resize(addr_len);

    return result;
  }

private:
  socket_type socket_;
  int protocol_type_;
  MutableBufferSequence buffers_;
  Endpoint& sender_endpoint_;
  socket_base::message_flags flags_;
};

template <typename MutableBufferSequence, typename Endpoint, typename Handler>
class reactive_socket_recvfrom_op :
  public reactive_socket_recvfrom_op_base<MutableBufferSequence, Endpoint>
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_recvfrom_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_recvfrom_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_recvfrom_op), *h); v = 0; } } };

  reactive_socket_recvfrom_op(socket_type socket, int protocol_type,
      const MutableBufferSequence& buffers, Endpoint& endpoint,
      socket_base::message_flags flags, Handler& handler)
    : reactive_socket_recvfrom_op_base<MutableBufferSequence, Endpoint>(
        socket, protocol_type, buffers, endpoint, flags,
        &reactive_socket_recvfrom_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_recvfrom_op* o(
        static_cast<reactive_socket_recvfrom_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 132 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvfrom_op.hpp" 2
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_sendto_op.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_sendto_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_sendto_op.hpp" 2

namespace asio {
namespace detail {

template <typename ConstBufferSequence, typename Endpoint>
class reactive_socket_sendto_op_base : public reactor_op
{
public:
  reactive_socket_sendto_op_base(socket_type socket,
      const ConstBufferSequence& buffers, const Endpoint& endpoint,
      socket_base::message_flags flags, func_type complete_func)
    : reactor_op(&reactive_socket_sendto_op_base::do_perform, complete_func),
      socket_(socket),
      buffers_(buffers),
      destination_(endpoint),
      flags_(flags)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_sendto_op_base* o(
        static_cast<reactive_socket_sendto_op_base*>(base));

    buffer_sequence_adapter<asio::const_buffer,
        ConstBufferSequence> bufs(o->buffers_);

    return socket_ops::non_blocking_sendto(o->socket_,
          bufs.buffers(), bufs.count(), o->flags_,
          o->destination_.data(), o->destination_.size(),
          o->ec_, o->bytes_transferred_);
  }

private:
  socket_type socket_;
  ConstBufferSequence buffers_;
  Endpoint destination_;
  socket_base::message_flags flags_;
};

template <typename ConstBufferSequence, typename Endpoint, typename Handler>
class reactive_socket_sendto_op :
  public reactive_socket_sendto_op_base<ConstBufferSequence, Endpoint>
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_sendto_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_sendto_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_sendto_op), *h); v = 0; } } };

  reactive_socket_sendto_op(socket_type socket,
      const ConstBufferSequence& buffers, const Endpoint& endpoint,
      socket_base::message_flags flags, Handler& handler)
    : reactive_socket_sendto_op_base<ConstBufferSequence, Endpoint>(socket,
        buffers, endpoint, flags, &reactive_socket_sendto_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_sendto_op* o(static_cast<reactive_socket_sendto_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_sendto_op.hpp" 2
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recv_op.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recv_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recv_op.hpp" 2

namespace asio {
namespace detail {

template <typename MutableBufferSequence>
class reactive_socket_recv_op_base : public reactor_op
{
public:
  reactive_socket_recv_op_base(socket_type socket,
      socket_ops::state_type state, const MutableBufferSequence& buffers,
      socket_base::message_flags flags, func_type complete_func)
    : reactor_op(&reactive_socket_recv_op_base::do_perform, complete_func),
      socket_(socket),
      state_(state),
      buffers_(buffers),
      flags_(flags)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_recv_op_base* o(
        static_cast<reactive_socket_recv_op_base*>(base));

    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(o->buffers_);

    return socket_ops::non_blocking_recv(o->socket_,
        bufs.buffers(), bufs.count(), o->flags_,
        (o->state_ & socket_ops::stream_oriented) != 0,
        o->ec_, o->bytes_transferred_);
  }

private:
  socket_type socket_;
  socket_ops::state_type state_;
  MutableBufferSequence buffers_;
  socket_base::message_flags flags_;
};

template <typename MutableBufferSequence, typename Handler>
class reactive_socket_recv_op :
  public reactive_socket_recv_op_base<MutableBufferSequence>
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_recv_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_recv_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_recv_op), *h); v = 0; } } };

  reactive_socket_recv_op(socket_type socket,
      socket_ops::state_type state, const MutableBufferSequence& buffers,
      socket_base::message_flags flags, Handler& handler)
    : reactive_socket_recv_op_base<MutableBufferSequence>(socket, state,
        buffers, flags, &reactive_socket_recv_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_recv_op* o(static_cast<reactive_socket_recv_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recv_op.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvmsg_op.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvmsg_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvmsg_op.hpp" 2

namespace asio {
namespace detail {

template <typename MutableBufferSequence>
class reactive_socket_recvmsg_op_base : public reactor_op
{
public:
  reactive_socket_recvmsg_op_base(socket_type socket,
      const MutableBufferSequence& buffers, socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, func_type complete_func)
    : reactor_op(&reactive_socket_recvmsg_op_base::do_perform, complete_func),
      socket_(socket),
      buffers_(buffers),
      in_flags_(in_flags),
      out_flags_(out_flags)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_recvmsg_op_base* o(
        static_cast<reactive_socket_recvmsg_op_base*>(base));

    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(o->buffers_);

    return socket_ops::non_blocking_recvmsg(o->socket_,
        bufs.buffers(), bufs.count(),
        o->in_flags_, o->out_flags_,
        o->ec_, o->bytes_transferred_);
  }

private:
  socket_type socket_;
  MutableBufferSequence buffers_;
  socket_base::message_flags in_flags_;
  socket_base::message_flags& out_flags_;
};

template <typename MutableBufferSequence, typename Handler>
class reactive_socket_recvmsg_op :
  public reactive_socket_recvmsg_op_base<MutableBufferSequence>
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_recvmsg_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_recvmsg_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_recvmsg_op), *h); v = 0; } } };

  reactive_socket_recvmsg_op(socket_type socket,
      const MutableBufferSequence& buffers, socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, Handler& handler)
    : reactive_socket_recvmsg_op_base<MutableBufferSequence>(socket, buffers,
        in_flags, out_flags, &reactive_socket_recvmsg_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_recvmsg_op* o(
        static_cast<reactive_socket_recvmsg_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 124 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_recvmsg_op.hpp" 2
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_send_op.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_send_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_send_op.hpp" 2

namespace asio {
namespace detail {

template <typename ConstBufferSequence>
class reactive_socket_send_op_base : public reactor_op
{
public:
  reactive_socket_send_op_base(socket_type socket,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, func_type complete_func)
    : reactor_op(&reactive_socket_send_op_base::do_perform, complete_func),
      socket_(socket),
      buffers_(buffers),
      flags_(flags)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    reactive_socket_send_op_base* o(
        static_cast<reactive_socket_send_op_base*>(base));

    buffer_sequence_adapter<asio::const_buffer,
        ConstBufferSequence> bufs(o->buffers_);

    return socket_ops::non_blocking_send(o->socket_,
          bufs.buffers(), bufs.count(), o->flags_,
          o->ec_, o->bytes_transferred_);
  }

private:
  socket_type socket_;
  ConstBufferSequence buffers_;
  socket_base::message_flags flags_;
};

template <typename ConstBufferSequence, typename Handler>
class reactive_socket_send_op :
  public reactive_socket_send_op_base<ConstBufferSequence>
{
public:
  struct ptr { Handler* h; void* v; reactive_socket_send_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~reactive_socket_send_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(reactive_socket_send_op), *h); v = 0; } } };

  reactive_socket_send_op(socket_type socket,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, Handler& handler)
    : reactive_socket_send_op_base<ConstBufferSequence>(socket,
        buffers, flags, &reactive_socket_send_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    reactive_socket_send_op* o(static_cast<reactive_socket_send_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_send_op.hpp" 2
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 2

namespace asio {
namespace detail {

class reactive_socket_service_base
{
public:

  typedef socket_type native_handle_type;


  struct base_implementation_type
  {

    socket_type socket_;


    socket_ops::state_type state_;


    reactor::per_descriptor_data reactor_data_;
  };


  inline reactive_socket_service_base(
      asio::io_service& io_service);


  inline void shutdown_service();


  inline void construct(base_implementation_type& impl);


  inline void base_move_construct(base_implementation_type& impl,
      base_implementation_type& other_impl);


  inline void base_move_assign(base_implementation_type& impl,
      reactive_socket_service_base& other_service,
      base_implementation_type& other_impl);


  inline void destroy(base_implementation_type& impl);


  bool is_open(const base_implementation_type& impl) const
  {
    return impl.socket_ != invalid_socket;
  }


  inline asio::error_code close(
      base_implementation_type& impl, asio::error_code& ec);


  native_handle_type native_handle(base_implementation_type& impl)
  {
    return impl.socket_;
  }


  inline asio::error_code cancel(
      base_implementation_type& impl, asio::error_code& ec);


  bool at_mark(const base_implementation_type& impl,
      asio::error_code& ec) const
  {
    return socket_ops::sockatmark(impl.socket_, ec);
  }


  std::size_t available(const base_implementation_type& impl,
      asio::error_code& ec) const
  {
    return socket_ops::available(impl.socket_, ec);
  }


  asio::error_code listen(base_implementation_type& impl,
      int backlog, asio::error_code& ec)
  {
    socket_ops::listen(impl.socket_, backlog, ec);
    return ec;
  }


  template <typename IO_Control_Command>
  asio::error_code io_control(base_implementation_type& impl,
      IO_Control_Command& command, asio::error_code& ec)
  {
    socket_ops::ioctl(impl.socket_, impl.state_, command.name(),
        static_cast<ioctl_arg_type*>(command.data()), ec);
    return ec;
  }


  bool non_blocking(const base_implementation_type& impl) const
  {
    return (impl.state_ & socket_ops::user_set_non_blocking) != 0;
  }


  asio::error_code non_blocking(base_implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    socket_ops::set_user_non_blocking(impl.socket_, impl.state_, mode, ec);
    return ec;
  }


  bool native_non_blocking(const base_implementation_type& impl) const
  {
    return (impl.state_ & socket_ops::internal_non_blocking) != 0;
  }


  asio::error_code native_non_blocking(base_implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    socket_ops::set_internal_non_blocking(impl.socket_, impl.state_, mode, ec);
    return ec;
  }


  asio::error_code shutdown(base_implementation_type& impl,
      socket_base::shutdown_type what, asio::error_code& ec)
  {
    socket_ops::shutdown(impl.socket_, what, ec);
    return ec;
  }


  template <typename ConstBufferSequence>
  size_t send(base_implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::const_buffer,
        ConstBufferSequence> bufs(buffers);

    return socket_ops::sync_send(impl.socket_, impl.state_,
        bufs.buffers(), bufs.count(), flags, bufs.all_empty(), ec);
  }


  size_t send(base_implementation_type& impl, const null_buffers&,
      socket_base::message_flags, asio::error_code& ec)
  {

    socket_ops::poll_write(impl.socket_, impl.state_, ec);

    return 0;
  }



  template <typename ConstBufferSequence, typename Handler>
  void async_send(base_implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_send_op<ConstBufferSequence, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.socket_, buffers, flags, handler);

    (void)0;

    start_op(impl, reactor::write_op, p.p, is_continuation, true,
        ((impl.state_ & socket_ops::stream_oriented)
          && buffer_sequence_adapter<asio::const_buffer,
            ConstBufferSequence>::all_empty(buffers)));
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_send(base_implementation_type& impl, const null_buffers&,
      socket_base::message_flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                             ;

    start_op(impl, reactor::write_op, p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }


  template <typename MutableBufferSequence>
  size_t receive(base_implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(buffers);

    return socket_ops::sync_recv(impl.socket_, impl.state_,
        bufs.buffers(), bufs.count(), flags, bufs.all_empty(), ec);
  }


  size_t receive(base_implementation_type& impl, const null_buffers&,
      socket_base::message_flags, asio::error_code& ec)
  {

    socket_ops::poll_read(impl.socket_, impl.state_, ec);

    return 0;
  }



  template <typename MutableBufferSequence, typename Handler>
  void async_receive(base_implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_recv_op<MutableBufferSequence, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.socket_, impl.state_, buffers, flags, handler);

    (void)0;

    start_op(impl,
        (flags & socket_base::message_out_of_band)
          ? reactor::except_op : reactor::read_op,
        p.p, is_continuation,
        (flags & socket_base::message_out_of_band) == 0,
        ((impl.state_ & socket_ops::stream_oriented)
          && buffer_sequence_adapter<asio::mutable_buffer,
            MutableBufferSequence>::all_empty(buffers)));
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_receive(base_implementation_type& impl, const null_buffers&,
      socket_base::message_flags flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                                ;

    start_op(impl,
        (flags & socket_base::message_out_of_band)
          ? reactor::except_op : reactor::read_op,
        p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }



  template <typename MutableBufferSequence>
  size_t receive_with_flags(base_implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(buffers);

    return socket_ops::sync_recvmsg(impl.socket_, impl.state_,
        bufs.buffers(), bufs.count(), in_flags, out_flags, ec);
  }


  size_t receive_with_flags(base_implementation_type& impl,
      const null_buffers&, socket_base::message_flags,
      socket_base::message_flags& out_flags, asio::error_code& ec)
  {

    socket_ops::poll_read(impl.socket_, impl.state_, ec);



    out_flags = 0;

    return 0;
  }



  template <typename MutableBufferSequence, typename Handler>
  void async_receive_with_flags(base_implementation_type& impl,
      const MutableBufferSequence& buffers, socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_recvmsg_op<MutableBufferSequence, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.socket_, buffers, in_flags, out_flags, handler);

    (void)0
                                             ;

    start_op(impl,
        (in_flags & socket_base::message_out_of_band)
          ? reactor::except_op : reactor::read_op,
        p.p, is_continuation,
        (in_flags & socket_base::message_out_of_band) == 0, false);
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_receive_with_flags(base_implementation_type& impl,
      const null_buffers&, socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                                    ;



    out_flags = 0;

    start_op(impl,
        (in_flags & socket_base::message_out_of_band)
          ? reactor::except_op : reactor::read_op,
        p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }

protected:

  inline asio::error_code do_open(
      base_implementation_type& impl, int af,
      int type, int protocol, asio::error_code& ec);


  inline asio::error_code do_assign(
      base_implementation_type& impl, int type,
      const native_handle_type& native_socket, asio::error_code& ec);


  inline void start_op(base_implementation_type& impl, int op_type,
      reactor_op* op, bool is_continuation, bool is_non_blocking, bool noop);


  inline void start_accept_op(base_implementation_type& impl,
      reactor_op* op, bool is_continuation, bool peer_is_open);


  inline void start_connect_op(base_implementation_type& impl,
      reactor_op* op, bool is_continuation,
      const socket_addr_type* addr, size_t addrlen);


  reactor& reactor_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 442 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 2

namespace asio {
namespace detail {

reactive_socket_service_base::reactive_socket_service_base(
    asio::io_service& io_service)
  : reactor_(use_service<reactor>(io_service))
{
  reactor_.init_task();
}

void reactive_socket_service_base::shutdown_service()
{
}

void reactive_socket_service_base::construct(
    reactive_socket_service_base::base_implementation_type& impl)
{
  impl.socket_ = invalid_socket;
  impl.state_ = 0;
}

void reactive_socket_service_base::base_move_construct(
    reactive_socket_service_base::base_implementation_type& impl,
    reactive_socket_service_base::base_implementation_type& other_impl)
{
  impl.socket_ = other_impl.socket_;
  other_impl.socket_ = invalid_socket;

  impl.state_ = other_impl.state_;
  other_impl.state_ = 0;

  reactor_.move_descriptor(impl.socket_,
      impl.reactor_data_, other_impl.reactor_data_);
}

void reactive_socket_service_base::base_move_assign(
    reactive_socket_service_base::base_implementation_type& impl,
    reactive_socket_service_base& other_service,
    reactive_socket_service_base::base_implementation_type& other_impl)
{
  destroy(impl);

  impl.socket_ = other_impl.socket_;
  other_impl.socket_ = invalid_socket;

  impl.state_ = other_impl.state_;
  other_impl.state_ = 0;

  other_service.reactor_.move_descriptor(impl.socket_,
      impl.reactor_data_, other_impl.reactor_data_);
}

void reactive_socket_service_base::destroy(
    reactive_socket_service_base::base_implementation_type& impl)
{
  if (impl.socket_ != invalid_socket)
  {
    (void)0;

    reactor_.deregister_descriptor(impl.socket_, impl.reactor_data_,
        (impl.state_ & socket_ops::possible_dup) == 0);

    asio::error_code ignored_ec;
    socket_ops::close(impl.socket_, impl.state_, true, ignored_ec);
  }
}

asio::error_code reactive_socket_service_base::close(
    reactive_socket_service_base::base_implementation_type& impl,
    asio::error_code& ec)
{
  if (is_open(impl))
  {
    (void)0;

    reactor_.deregister_descriptor(impl.socket_, impl.reactor_data_,
        (impl.state_ & socket_ops::possible_dup) == 0);
  }

  socket_ops::close(impl.socket_, impl.state_, false, ec);
# 116 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp"
  construct(impl);

  return ec;
}

asio::error_code reactive_socket_service_base::cancel(
    reactive_socket_service_base::base_implementation_type& impl,
    asio::error_code& ec)
{
  if (!is_open(impl))
  {
    ec = asio::error::bad_descriptor;
    return ec;
  }

  (void)0;

  reactor_.cancel_ops(impl.socket_, impl.reactor_data_);
  ec = asio::error_code();
  return ec;
}

asio::error_code reactive_socket_service_base::do_open(
    reactive_socket_service_base::base_implementation_type& impl,
    int af, int type, int protocol, asio::error_code& ec)
{
  if (is_open(impl))
  {
    ec = asio::error::already_open;
    return ec;
  }

  socket_holder sock(socket_ops::socket(af, type, protocol, ec));
  if (sock.get() == invalid_socket)
    return ec;

  if (int err = reactor_.register_descriptor(sock.get(), impl.reactor_data_))
  {
    ec = asio::error_code(err,
        asio::error::get_system_category());
    return ec;
  }

  impl.socket_ = sock.release();
  switch (type)
  {
  case 
# 162 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 3 4
      SOCK_STREAM
# 162 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp"
                 : impl.state_ = socket_ops::stream_oriented; break;
  case 
# 163 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 3 4
      SOCK_DGRAM
# 163 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp"
                : impl.state_ = socket_ops::datagram_oriented; break;
  default: impl.state_ = 0; break;
  }
  ec = asio::error_code();
  return ec;
}

asio::error_code reactive_socket_service_base::do_assign(
    reactive_socket_service_base::base_implementation_type& impl, int type,
    const reactive_socket_service_base::native_handle_type& native_socket,
    asio::error_code& ec)
{
  if (is_open(impl))
  {
    ec = asio::error::already_open;
    return ec;
  }

  if (int err = reactor_.register_descriptor(
        native_socket, impl.reactor_data_))
  {
    ec = asio::error_code(err,
        asio::error::get_system_category());
    return ec;
  }

  impl.socket_ = native_socket;
  switch (type)
  {
  case 
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 3 4
      SOCK_STREAM
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp"
                 : impl.state_ = socket_ops::stream_oriented; break;
  case 
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 3 4
      SOCK_DGRAM
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp"
                : impl.state_ = socket_ops::datagram_oriented; break;
  default: impl.state_ = 0; break;
  }
  impl.state_ |= socket_ops::possible_dup;
  ec = asio::error_code();
  return ec;
}

void reactive_socket_service_base::start_op(
    reactive_socket_service_base::base_implementation_type& impl,
    int op_type, reactor_op* op, bool is_continuation,
    bool is_non_blocking, bool noop)
{
  if (!noop)
  {
    if ((impl.state_ & socket_ops::non_blocking)
        || socket_ops::set_internal_non_blocking(
          impl.socket_, impl.state_, true, op->ec_))
    {
      reactor_.start_op(op_type, impl.socket_,
          impl.reactor_data_, op, is_continuation, is_non_blocking);
      return;
    }
  }

  reactor_.post_immediate_completion(op, is_continuation);
}

void reactive_socket_service_base::start_accept_op(
    reactive_socket_service_base::base_implementation_type& impl,
    reactor_op* op, bool is_continuation, bool peer_is_open)
{
  if (!peer_is_open)
    start_op(impl, reactor::read_op, op, true, is_continuation, false);
  else
  {
    op->ec_ = asio::error::already_open;
    reactor_.post_immediate_completion(op, is_continuation);
  }
}

void reactive_socket_service_base::start_connect_op(
    reactive_socket_service_base::base_implementation_type& impl,
    reactor_op* op, bool is_continuation,
    const socket_addr_type* addr, size_t addrlen)
{
  if ((impl.state_ & socket_ops::non_blocking)
      || socket_ops::set_internal_non_blocking(
        impl.socket_, impl.state_, true, op->ec_))
  {
    if (socket_ops::connect(impl.socket_, addr, addrlen, op->ec_) != 0)
    {
      if (op->ec_ == asio::error::in_progress
          || op->ec_ == asio::error::would_block)
      {
        op->ec_ = asio::error_code();
        reactor_.start_op(reactor::connect_op, impl.socket_,
            impl.reactor_data_, op, is_continuation, false);
        return;
      }
    }
  }

  reactor_.post_immediate_completion(op, is_continuation);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 263 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_socket_service_base.ipp" 2
# 445 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service_base.hpp" 2
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2

namespace asio {
namespace detail {

template <typename Protocol>
class reactive_socket_service :
  public reactive_socket_service_base
{
public:

  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;


  typedef socket_type native_handle_type;


  struct implementation_type :
    reactive_socket_service_base::base_implementation_type
  {

    implementation_type()
      : protocol_(endpoint_type().protocol())
    {
    }


    protocol_type protocol_;
  };


  reactive_socket_service(asio::io_service& io_service)
    : reactive_socket_service_base(io_service)
  {
  }


  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    this->base_move_construct(impl, other_impl);

    impl.protocol_ = other_impl.protocol_;
    other_impl.protocol_ = endpoint_type().protocol();
  }


  void move_assign(implementation_type& impl,
      reactive_socket_service_base& other_service,
      implementation_type& other_impl)
  {
    this->base_move_assign(impl, other_service, other_impl);

    impl.protocol_ = other_impl.protocol_;
    other_impl.protocol_ = endpoint_type().protocol();
  }


  template <typename Protocol1>
  void converting_move_construct(implementation_type& impl,
      typename reactive_socket_service<
        Protocol1>::implementation_type& other_impl)
  {
    this->base_move_construct(impl, other_impl);

    impl.protocol_ = protocol_type(other_impl.protocol_);
    other_impl.protocol_ = typename Protocol1::endpoint().protocol();
  }


  asio::error_code open(implementation_type& impl,
      const protocol_type& protocol, asio::error_code& ec)
  {
    if (!do_open(impl, protocol.family(),
          protocol.type(), protocol.protocol(), ec))
      impl.protocol_ = protocol;
    return ec;
  }


  asio::error_code assign(implementation_type& impl,
      const protocol_type& protocol, const native_handle_type& native_socket,
      asio::error_code& ec)
  {
    if (!do_assign(impl, protocol.type(), native_socket, ec))
      impl.protocol_ = protocol;
    return ec;
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return impl.socket_;
  }


  asio::error_code bind(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    socket_ops::bind(impl.socket_, endpoint.data(), endpoint.size(), ec);
    return ec;
  }


  template <typename Option>
  asio::error_code set_option(implementation_type& impl,
      const Option& option, asio::error_code& ec)
  {
    socket_ops::setsockopt(impl.socket_, impl.state_,
        option.level(impl.protocol_), option.name(impl.protocol_),
        option.data(impl.protocol_), option.size(impl.protocol_), ec);
    return ec;
  }


  template <typename Option>
  asio::error_code get_option(const implementation_type& impl,
      Option& option, asio::error_code& ec) const
  {
    std::size_t size = option.size(impl.protocol_);
    socket_ops::getsockopt(impl.socket_, impl.state_,
        option.level(impl.protocol_), option.name(impl.protocol_),
        option.data(impl.protocol_), &size, ec);
    if (!ec)
      option.resize(impl.protocol_, size);
    return ec;
  }


  endpoint_type local_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    endpoint_type endpoint;
    std::size_t addr_len = endpoint.capacity();
    if (socket_ops::getsockname(impl.socket_, endpoint.data(), &addr_len, ec))
      return endpoint_type();
    endpoint.resize(addr_len);
    return endpoint;
  }


  endpoint_type remote_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    endpoint_type endpoint;
    std::size_t addr_len = endpoint.capacity();
    if (socket_ops::getpeername(impl.socket_,
          endpoint.data(), &addr_len, false, ec))
      return endpoint_type();
    endpoint.resize(addr_len);
    return endpoint;
  }



  template <typename ConstBufferSequence>
  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags,
      asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::const_buffer,
        ConstBufferSequence> bufs(buffers);

    return socket_ops::sync_sendto(impl.socket_, impl.state_,
        bufs.buffers(), bufs.count(), flags,
        destination.data(), destination.size(), ec);
  }


  size_t send_to(implementation_type& impl, const null_buffers&,
      const endpoint_type&, socket_base::message_flags,
      asio::error_code& ec)
  {

    socket_ops::poll_write(impl.socket_, impl.state_, ec);

    return 0;
  }



  template <typename ConstBufferSequence, typename Handler>
  void async_send_to(implementation_type& impl,
      const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags,
      Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_sendto_op<ConstBufferSequence,
        endpoint_type, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.socket_, buffers, destination, flags, handler);

    (void)0;

    start_op(impl, reactor::write_op, p.p, is_continuation, true, false);
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_send_to(implementation_type& impl, const null_buffers&,
      const endpoint_type&, socket_base::message_flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                                ;

    start_op(impl, reactor::write_op, p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }



  template <typename MutableBufferSequence>
  size_t receive_from(implementation_type& impl,
      const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags,
      asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(buffers);

    std::size_t addr_len = sender_endpoint.capacity();
    std::size_t bytes_recvd = socket_ops::sync_recvfrom(
        impl.socket_, impl.state_, bufs.buffers(), bufs.count(),
        flags, sender_endpoint.data(), &addr_len, ec);

    if (!ec)
      sender_endpoint.resize(addr_len);

    return bytes_recvd;
  }


  size_t receive_from(implementation_type& impl, const null_buffers&,
      endpoint_type& sender_endpoint, socket_base::message_flags,
      asio::error_code& ec)
  {

    socket_ops::poll_read(impl.socket_, impl.state_, ec);


    sender_endpoint = endpoint_type();

    return 0;
  }




  template <typename MutableBufferSequence, typename Handler>
  void async_receive_from(implementation_type& impl,
      const MutableBufferSequence& buffers, endpoint_type& sender_endpoint,
      socket_base::message_flags flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_recvfrom_op<MutableBufferSequence,
        endpoint_type, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    int protocol = impl.protocol_.type();
    p.p = new (p.v) op(impl.socket_, protocol,
        buffers, sender_endpoint, flags, handler);

    (void)0
                                       ;

    start_op(impl,
        (flags & socket_base::message_out_of_band)
          ? reactor::except_op : reactor::read_op,
        p.p, is_continuation, true, false);
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_receive_from(implementation_type& impl,
      const null_buffers&, endpoint_type& sender_endpoint,
      socket_base::message_flags flags, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                                     ;


    sender_endpoint = endpoint_type();

    start_op(impl,
        (flags & socket_base::message_out_of_band)
          ? reactor::except_op : reactor::read_op,
        p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }


  template <typename Socket>
  asio::error_code accept(implementation_type& impl,
      Socket& peer, endpoint_type* peer_endpoint, asio::error_code& ec)
  {

    if (peer.is_open())
    {
      ec = asio::error::already_open;
      return ec;
    }

    std::size_t addr_len = peer_endpoint ? peer_endpoint->capacity() : 0;
    socket_holder new_socket(socket_ops::sync_accept(impl.socket_,
          impl.state_, peer_endpoint ? peer_endpoint->data() : 0,
          peer_endpoint ? &addr_len : 0, ec));


    if (new_socket.get() != invalid_socket)
    {
      if (peer_endpoint)
        peer_endpoint->resize(addr_len);
      if (!peer.assign(impl.protocol_, new_socket.get(), ec))
        new_socket.release();
    }

    return ec;
  }



  template <typename Socket, typename Handler>
  void async_accept(implementation_type& impl, Socket& peer,
      endpoint_type* peer_endpoint, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_accept_op<Socket, Protocol, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.socket_, impl.state_, peer,
        impl.protocol_, peer_endpoint, handler);

    (void)0;

    start_accept_op(impl, p.p, is_continuation, peer.is_open());
    p.v = p.p = 0;
  }


  asio::error_code connect(implementation_type& impl,
      const endpoint_type& peer_endpoint, asio::error_code& ec)
  {
    socket_ops::sync_connect(impl.socket_,
        peer_endpoint.data(), peer_endpoint.size(), ec);
    return ec;
  }


  template <typename Handler>
  void async_connect(implementation_type& impl,
      const endpoint_type& peer_endpoint, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_socket_connect_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.socket_, handler);

    (void)0;

    start_connect_op(impl, p.p, is_continuation,
        peer_endpoint.data(), peer_endpoint.size());
    p.v = p.p = 0;
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 454 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_socket_service.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp" 2

namespace asio {


template <typename Protocol>
class datagram_socket_service



  : public asio::detail::service_base<datagram_socket_service<Protocol> >

{
public:






  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;

private:






  typedef detail::reactive_socket_service<Protocol> service_impl_type;


public:




  typedef typename service_impl_type::implementation_type implementation_type;






  typedef typename service_impl_type::native_handle_type native_type;






  typedef typename service_impl_type::native_handle_type native_handle_type;



  explicit datagram_socket_service(asio::io_service& io_service)
    : asio::detail::service_base<
        datagram_socket_service<Protocol> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      datagram_socket_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  template <typename Protocol1>
  void converting_move_construct(implementation_type& impl,
      typename datagram_socket_service<
        Protocol1>::implementation_type& other_impl,
      typename enable_if<is_convertible<
        Protocol1, Protocol>::value>::type* = 0)
  {
    service_impl_.template converting_move_construct<Protocol1>(
        impl, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code open(implementation_type& impl,
      const protocol_type& protocol, asio::error_code& ec)
  {
    if (protocol.type() == 
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp" 3 4
                          SOCK_DGRAM
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp"
                                                 )
      service_impl_.open(impl, protocol, ec);
    else
      ec = asio::error::invalid_argument;
    return ec;
  }


  asio::error_code assign(implementation_type& impl,
      const protocol_type& protocol, const native_handle_type& native_socket,
      asio::error_code& ec)
  {
    return service_impl_.assign(impl, protocol, native_socket, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }


  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  bool at_mark(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.at_mark(impl, ec);
  }


  std::size_t available(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.available(impl, ec);
  }


  asio::error_code bind(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    return service_impl_.bind(impl, endpoint, ec);
  }


  asio::error_code connect(implementation_type& impl,
      const endpoint_type& peer_endpoint, asio::error_code& ec)
  {
    return service_impl_.connect(impl, peer_endpoint, ec);
  }


  template <typename ConnectHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ConnectHandler, void (asio::error_code)>::type>::type

  async_connect(implementation_type& impl,
      const endpoint_type& peer_endpoint,
      ConnectHandler&& handler)
  {
    detail::async_result_init<
      ConnectHandler, void (asio::error_code)> init(
        static_cast<ConnectHandler&&>(handler));

    service_impl_.async_connect(impl, peer_endpoint, init.handler);

    return init.result.get();
  }


  template <typename SettableSocketOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSocketOption& option, asio::error_code& ec)
  {
    return service_impl_.set_option(impl, option, ec);
  }


  template <typename GettableSocketOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSocketOption& option, asio::error_code& ec) const
  {
    return service_impl_.get_option(impl, option, ec);
  }


  template <typename IoControlCommand>
  asio::error_code io_control(implementation_type& impl,
      IoControlCommand& command, asio::error_code& ec)
  {
    return service_impl_.io_control(impl, command, ec);
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return service_impl_.non_blocking(impl);
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.non_blocking(impl, mode, ec);
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return service_impl_.native_non_blocking(impl);
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.native_non_blocking(impl, mode, ec);
  }


  endpoint_type local_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.local_endpoint(impl, ec);
  }


  endpoint_type remote_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.remote_endpoint(impl, ec);
  }


  asio::error_code shutdown(implementation_type& impl,
      socket_base::shutdown_type what, asio::error_code& ec)
  {
    return service_impl_.shutdown(impl, what, ec);
  }


  template <typename ConstBufferSequence>
  std::size_t send(implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.send(impl, buffers, flags, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(implementation_type& impl, const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_send(impl, buffers, flags, init.handler);

    return init.result.get();
  }


  template <typename ConstBufferSequence>
  std::size_t send_to(implementation_type& impl,
      const ConstBufferSequence& buffers, const endpoint_type& destination,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.send_to(impl, buffers, destination, flags, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send_to(implementation_type& impl,
      const ConstBufferSequence& buffers, const endpoint_type& destination,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_send_to(impl, buffers,
        destination, flags, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t receive(implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.receive(impl, buffers, flags, ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_receive(impl, buffers, flags, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t receive_from(implementation_type& impl,
      const MutableBufferSequence& buffers, endpoint_type& sender_endpoint,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.receive_from(impl, buffers, sender_endpoint, flags,
        ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive_from(implementation_type& impl,
      const MutableBufferSequence& buffers, endpoint_type& sender_endpoint,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_receive_from(impl, buffers,
        sender_endpoint, flags, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 431 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 2

namespace asio {
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
template <typename Protocol,
    typename DatagramSocketService = datagram_socket_service<Protocol> >
class basic_datagram_socket
  : public basic_socket<Protocol, DatagramSocketService>
{
public:


  typedef typename DatagramSocketService::native_handle_type native_type;


  typedef typename DatagramSocketService::native_handle_type native_handle_type;


  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  explicit basic_datagram_socket(asio::io_service& io_service)
    : basic_socket<Protocol, DatagramSocketService>(io_service)
  {
  }
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  basic_datagram_socket(asio::io_service& io_service,
      const protocol_type& protocol)
    : basic_socket<Protocol, DatagramSocketService>(io_service, protocol)
  {
  }
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  basic_datagram_socket(asio::io_service& io_service,
      const endpoint_type& endpoint)
    : basic_socket<Protocol, DatagramSocketService>(io_service, endpoint)
  {
  }
# 128 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  basic_datagram_socket(asio::io_service& io_service,
      const protocol_type& protocol, const native_handle_type& native_socket)
    : basic_socket<Protocol, DatagramSocketService>(
        io_service, protocol, native_socket)
  {
  }
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  basic_datagram_socket(basic_datagram_socket&& other)
    : basic_socket<Protocol, DatagramSocketService>(
        static_cast<basic_datagram_socket&&>(other))
  {
  }
# 163 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  basic_datagram_socket& operator=(basic_datagram_socket&& other)
  {
    basic_socket<Protocol, DatagramSocketService>::operator=(
        static_cast<basic_datagram_socket&&>(other));
    return *this;
  }
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename Protocol1, typename DatagramSocketService1>
  basic_datagram_socket(
      basic_datagram_socket<Protocol1, DatagramSocketService1>&& other,
      typename enable_if<is_convertible<Protocol1, Protocol>::value>::type* = 0)
    : basic_socket<Protocol, DatagramSocketService>(
        static_cast<basic_datagram_socket< Protocol1, DatagramSocketService1>&&>
                                             (other))
  {
  }
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename Protocol1, typename DatagramSocketService1>
  typename enable_if<is_convertible<Protocol1, Protocol>::value,
      basic_datagram_socket>::type& operator=(
        basic_datagram_socket<Protocol1, DatagramSocketService1>&& other)
  {
    basic_socket<Protocol, DatagramSocketService>::operator=(
        static_cast<basic_datagram_socket< Protocol1, DatagramSocketService1>&&>
                                             (other));
    return *this;
  }
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 264 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 292 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
  }
# 335 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(this->get_implementation(),
        buffers, 0, static_cast<WriteHandler&&>(handler));
  }
# 377 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(this->get_implementation(),
        buffers, flags, static_cast<WriteHandler&&>(handler));
  }
# 417 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send_to(
        this->get_implementation(), buffers, destination, 0, ec);
    asio::detail::throw_error(ec, "send_to");
    return s;
  }
# 444 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send_to(
        this->get_implementation(), buffers, destination, flags, ec);
    asio::detail::throw_error(ec, "send_to");
    return s;
  }
# 471 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags,
      asio::error_code& ec)
  {
    return this->get_service().send_to(this->get_implementation(),
        buffers, destination, flags, ec);
  }
# 517 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send_to(
        this->get_implementation(), buffers, destination, 0,
        static_cast<WriteHandler&&>(handler));
  }
# 560 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send_to(
        this->get_implementation(), buffers, destination, flags,
        static_cast<WriteHandler&&>(handler));
  }
# 600 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 628 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 657 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().receive(
        this->get_implementation(), buffers, flags, ec);
  }
# 701 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, 0, static_cast<ReadHandler&&>(handler));
  }
# 743 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, flags, static_cast<ReadHandler&&>(handler));
  }
# 784 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive_from(
        this->get_implementation(), buffers, sender_endpoint, 0, ec);
    asio::detail::throw_error(ec, "receive_from");
    return s;
  }
# 811 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive_from(
        this->get_implementation(), buffers, sender_endpoint, flags, ec);
    asio::detail::throw_error(ec, "receive_from");
    return s;
  }
# 838 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags,
      asio::error_code& ec)
  {
    return this->get_service().receive_from(this->get_implementation(),
        buffers, sender_endpoint, flags, ec);
  }
# 883 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive_from(
        this->get_implementation(), buffers, sender_endpoint, 0,
        static_cast<ReadHandler&&>(handler));
  }
# 928 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive_from(
        this->get_implementation(), buffers, sender_endpoint, flags,
        static_cast<ReadHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 948 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_deadline_timer.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_io_object.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp" 2

namespace asio {


template <typename Protocol>
class raw_socket_service



  : public asio::detail::service_base<raw_socket_service<Protocol> >

{
public:






  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;

private:






  typedef detail::reactive_socket_service<Protocol> service_impl_type;


public:




  typedef typename service_impl_type::implementation_type implementation_type;






  typedef typename service_impl_type::native_handle_type native_type;






  typedef typename service_impl_type::native_handle_type native_handle_type;



  explicit raw_socket_service(asio::io_service& io_service)
    : asio::detail::service_base<
        raw_socket_service<Protocol> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      raw_socket_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  template <typename Protocol1>
  void converting_move_construct(implementation_type& impl,
      typename raw_socket_service<
        Protocol1>::implementation_type& other_impl,
      typename enable_if<is_convertible<
        Protocol1, Protocol>::value>::type* = 0)
  {
    service_impl_.template converting_move_construct<Protocol1>(
        impl, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code open(implementation_type& impl,
      const protocol_type& protocol, asio::error_code& ec)
  {
    if (protocol.type() == 
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp" 3 4
                          SOCK_RAW
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp"
                                               )
      service_impl_.open(impl, protocol, ec);
    else
      ec = asio::error::invalid_argument;
    return ec;
  }


  asio::error_code assign(implementation_type& impl,
      const protocol_type& protocol, const native_handle_type& native_socket,
      asio::error_code& ec)
  {
    return service_impl_.assign(impl, protocol, native_socket, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }


  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  bool at_mark(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.at_mark(impl, ec);
  }


  std::size_t available(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.available(impl, ec);
  }


  asio::error_code bind(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    return service_impl_.bind(impl, endpoint, ec);
  }


  asio::error_code connect(implementation_type& impl,
      const endpoint_type& peer_endpoint, asio::error_code& ec)
  {
    return service_impl_.connect(impl, peer_endpoint, ec);
  }


  template <typename ConnectHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ConnectHandler, void (asio::error_code)>::type>::type

  async_connect(implementation_type& impl,
      const endpoint_type& peer_endpoint,
      ConnectHandler&& handler)
  {
    detail::async_result_init<
      ConnectHandler, void (asio::error_code)> init(
        static_cast<ConnectHandler&&>(handler));

    service_impl_.async_connect(impl, peer_endpoint, init.handler);

    return init.result.get();
  }


  template <typename SettableSocketOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSocketOption& option, asio::error_code& ec)
  {
    return service_impl_.set_option(impl, option, ec);
  }


  template <typename GettableSocketOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSocketOption& option, asio::error_code& ec) const
  {
    return service_impl_.get_option(impl, option, ec);
  }


  template <typename IoControlCommand>
  asio::error_code io_control(implementation_type& impl,
      IoControlCommand& command, asio::error_code& ec)
  {
    return service_impl_.io_control(impl, command, ec);
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return service_impl_.non_blocking(impl);
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.non_blocking(impl, mode, ec);
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return service_impl_.native_non_blocking(impl);
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.native_non_blocking(impl, mode, ec);
  }


  endpoint_type local_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.local_endpoint(impl, ec);
  }


  endpoint_type remote_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.remote_endpoint(impl, ec);
  }


  asio::error_code shutdown(implementation_type& impl,
      socket_base::shutdown_type what, asio::error_code& ec)
  {
    return service_impl_.shutdown(impl, what, ec);
  }


  template <typename ConstBufferSequence>
  std::size_t send(implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.send(impl, buffers, flags, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(implementation_type& impl, const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_send(impl, buffers, flags, init.handler);

    return init.result.get();
  }


  template <typename ConstBufferSequence>
  std::size_t send_to(implementation_type& impl,
      const ConstBufferSequence& buffers, const endpoint_type& destination,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.send_to(impl, buffers, destination, flags, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send_to(implementation_type& impl,
      const ConstBufferSequence& buffers, const endpoint_type& destination,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_send_to(impl, buffers,
        destination, flags, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t receive(implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.receive(impl, buffers, flags, ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_receive(impl, buffers, flags, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t receive_from(implementation_type& impl,
      const MutableBufferSequence& buffers, endpoint_type& sender_endpoint,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.receive_from(impl, buffers, sender_endpoint, flags,
        ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive_from(implementation_type& impl,
      const MutableBufferSequence& buffers, endpoint_type& sender_endpoint,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_receive_from(impl, buffers,
        sender_endpoint, flags, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 431 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp" 2

namespace asio {
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
template <typename Protocol,
    typename RawSocketService = raw_socket_service<Protocol> >
class basic_raw_socket
  : public basic_socket<Protocol, RawSocketService>
{
public:


  typedef typename RawSocketService::native_handle_type native_type;


  typedef typename RawSocketService::native_handle_type native_handle_type;


  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  explicit basic_raw_socket(asio::io_service& io_service)
    : basic_socket<Protocol, RawSocketService>(io_service)
  {
  }
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  basic_raw_socket(asio::io_service& io_service,
      const protocol_type& protocol)
    : basic_socket<Protocol, RawSocketService>(io_service, protocol)
  {
  }
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  basic_raw_socket(asio::io_service& io_service,
      const endpoint_type& endpoint)
    : basic_socket<Protocol, RawSocketService>(io_service, endpoint)
  {
  }
# 128 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  basic_raw_socket(asio::io_service& io_service,
      const protocol_type& protocol, const native_handle_type& native_socket)
    : basic_socket<Protocol, RawSocketService>(
        io_service, protocol, native_socket)
  {
  }
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  basic_raw_socket(basic_raw_socket&& other)
    : basic_socket<Protocol, RawSocketService>(
        static_cast<basic_raw_socket&&>(other))
  {
  }
# 162 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  basic_raw_socket& operator=(basic_raw_socket&& other)
  {
    basic_socket<Protocol, RawSocketService>::operator=(
        static_cast<basic_raw_socket&&>(other));
    return *this;
  }
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename Protocol1, typename RawSocketService1>
  basic_raw_socket(basic_raw_socket<Protocol1, RawSocketService1>&& other,
      typename enable_if<is_convertible<Protocol1, Protocol>::value>::type* = 0)
    : basic_socket<Protocol, RawSocketService>(
        static_cast<basic_raw_socket< Protocol1, RawSocketService1>&&>
                                        (other))
  {
  }
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename Protocol1, typename RawSocketService1>
  typename enable_if<is_convertible<Protocol1, Protocol>::value,
      basic_raw_socket>::type& operator=(
        basic_raw_socket<Protocol1, RawSocketService1>&& other)
  {
    basic_socket<Protocol, RawSocketService>::operator=(
        static_cast<basic_raw_socket< Protocol1, RawSocketService1>&&>
                                        (other));
    return *this;
  }
# 231 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 257 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 284 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
  }
# 327 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(this->get_implementation(),
        buffers, 0, static_cast<WriteHandler&&>(handler));
  }
# 369 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(this->get_implementation(),
        buffers, flags, static_cast<WriteHandler&&>(handler));
  }
# 409 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send_to(
        this->get_implementation(), buffers, destination, 0, ec);
    asio::detail::throw_error(ec, "send_to");
    return s;
  }
# 436 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send_to(
        this->get_implementation(), buffers, destination, flags, ec);
    asio::detail::throw_error(ec, "send_to");
    return s;
  }
# 463 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags,
      asio::error_code& ec)
  {
    return this->get_service().send_to(this->get_implementation(),
        buffers, destination, flags, ec);
  }
# 509 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send_to(this->get_implementation(),
        buffers, destination, 0, static_cast<WriteHandler&&>(handler));
  }
# 551 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send_to(const ConstBufferSequence& buffers,
      const endpoint_type& destination, socket_base::message_flags flags,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send_to(
        this->get_implementation(), buffers, destination, flags,
        static_cast<WriteHandler&&>(handler));
  }
# 591 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 619 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 648 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().receive(
        this->get_implementation(), buffers, flags, ec);
  }
# 692 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, 0, static_cast<ReadHandler&&>(handler));
  }
# 734 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, flags, static_cast<ReadHandler&&>(handler));
  }
# 775 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive_from(
        this->get_implementation(), buffers, sender_endpoint, 0, ec);
    asio::detail::throw_error(ec, "receive_from");
    return s;
  }
# 802 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive_from(
        this->get_implementation(), buffers, sender_endpoint, flags, ec);
    asio::detail::throw_error(ec, "receive_from");
    return s;
  }
# 829 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags,
      asio::error_code& ec)
  {
    return this->get_service().receive_from(this->get_implementation(),
        buffers, sender_endpoint, flags, ec);
  }
# 874 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive_from(
        this->get_implementation(), buffers, sender_endpoint, 0,
        static_cast<ReadHandler&&>(handler));
  }
# 919 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive_from(const MutableBufferSequence& buffers,
      endpoint_type& sender_endpoint, socket_base::message_flags flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive_from(
        this->get_implementation(), buffers, sender_endpoint, flags,
        static_cast<ReadHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 939 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp" 2
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp" 2

namespace asio {


template <typename Protocol>
class seq_packet_socket_service



  : public asio::detail::service_base<
      seq_packet_socket_service<Protocol> >

{
public:






  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;

private:






  typedef detail::reactive_socket_service<Protocol> service_impl_type;


public:




  typedef typename service_impl_type::implementation_type implementation_type;






  typedef typename service_impl_type::native_handle_type native_type;






  typedef typename service_impl_type::native_handle_type native_handle_type;




  explicit seq_packet_socket_service(asio::io_service& io_service)
    : asio::detail::service_base<
        seq_packet_socket_service<Protocol> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      seq_packet_socket_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  template <typename Protocol1>
  void converting_move_construct(implementation_type& impl,
      typename seq_packet_socket_service<
        Protocol1>::implementation_type& other_impl,
      typename enable_if<is_convertible<
        Protocol1, Protocol>::value>::type* = 0)
  {
    service_impl_.template converting_move_construct<Protocol1>(
        impl, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code open(implementation_type& impl,
      const protocol_type& protocol, asio::error_code& ec)
  {
    if (protocol.type() == 
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp" 3 4
                          SOCK_SEQPACKET
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp"
                                                     )
      service_impl_.open(impl, protocol, ec);
    else
      ec = asio::error::invalid_argument;
    return ec;
  }


  asio::error_code assign(implementation_type& impl,
      const protocol_type& protocol, const native_handle_type& native_socket,
      asio::error_code& ec)
  {
    return service_impl_.assign(impl, protocol, native_socket, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }


  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  bool at_mark(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.at_mark(impl, ec);
  }


  std::size_t available(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.available(impl, ec);
  }


  asio::error_code bind(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    return service_impl_.bind(impl, endpoint, ec);
  }


  asio::error_code connect(implementation_type& impl,
      const endpoint_type& peer_endpoint, asio::error_code& ec)
  {
    return service_impl_.connect(impl, peer_endpoint, ec);
  }


  template <typename ConnectHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ConnectHandler, void (asio::error_code)>::type>::type

  async_connect(implementation_type& impl,
      const endpoint_type& peer_endpoint,
      ConnectHandler&& handler)
  {
    detail::async_result_init<
      ConnectHandler, void (asio::error_code)> init(
        static_cast<ConnectHandler&&>(handler));

    service_impl_.async_connect(impl, peer_endpoint, init.handler);

    return init.result.get();
  }


  template <typename SettableSocketOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSocketOption& option, asio::error_code& ec)
  {
    return service_impl_.set_option(impl, option, ec);
  }


  template <typename GettableSocketOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSocketOption& option, asio::error_code& ec) const
  {
    return service_impl_.get_option(impl, option, ec);
  }


  template <typename IoControlCommand>
  asio::error_code io_control(implementation_type& impl,
      IoControlCommand& command, asio::error_code& ec)
  {
    return service_impl_.io_control(impl, command, ec);
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return service_impl_.non_blocking(impl);
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.non_blocking(impl, mode, ec);
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return service_impl_.native_non_blocking(impl);
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.native_non_blocking(impl, mode, ec);
  }


  endpoint_type local_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.local_endpoint(impl, ec);
  }


  endpoint_type remote_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.remote_endpoint(impl, ec);
  }


  asio::error_code shutdown(implementation_type& impl,
      socket_base::shutdown_type what, asio::error_code& ec)
  {
    return service_impl_.shutdown(impl, what, ec);
  }


  template <typename ConstBufferSequence>
  std::size_t send(implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.send(impl, buffers, flags, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_send(impl, buffers, flags, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t receive(implementation_type& impl,
      const MutableBufferSequence& buffers, socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, asio::error_code& ec)
  {
    return service_impl_.receive_with_flags(impl,
        buffers, in_flags, out_flags, ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(implementation_type& impl,
      const MutableBufferSequence& buffers, socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_receive_with_flags(impl,
        buffers, in_flags, out_flags, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 379 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp" 2

namespace asio {
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
template <typename Protocol,
    typename SeqPacketSocketService = seq_packet_socket_service<Protocol> >
class basic_seq_packet_socket
  : public basic_socket<Protocol, SeqPacketSocketService>
{
public:


  typedef typename SeqPacketSocketService::native_handle_type native_type;


  typedef typename SeqPacketSocketService::native_handle_type
    native_handle_type;


  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  explicit basic_seq_packet_socket(asio::io_service& io_service)
    : basic_socket<Protocol, SeqPacketSocketService>(io_service)
  {
  }
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  basic_seq_packet_socket(asio::io_service& io_service,
      const protocol_type& protocol)
    : basic_socket<Protocol, SeqPacketSocketService>(io_service, protocol)
  {
  }
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  basic_seq_packet_socket(asio::io_service& io_service,
      const endpoint_type& endpoint)
    : basic_socket<Protocol, SeqPacketSocketService>(io_service, endpoint)
  {
  }
# 131 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  basic_seq_packet_socket(asio::io_service& io_service,
      const protocol_type& protocol, const native_handle_type& native_socket)
    : basic_socket<Protocol, SeqPacketSocketService>(
        io_service, protocol, native_socket)
  {
  }
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  basic_seq_packet_socket(basic_seq_packet_socket&& other)
    : basic_socket<Protocol, SeqPacketSocketService>(
        static_cast<basic_seq_packet_socket&&>(other))
  {
  }
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  basic_seq_packet_socket& operator=(basic_seq_packet_socket&& other)
  {
    basic_socket<Protocol, SeqPacketSocketService>::operator=(
        static_cast<basic_seq_packet_socket&&>(other));
    return *this;
  }
# 186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename Protocol1, typename SeqPacketSocketService1>
  basic_seq_packet_socket(
      basic_seq_packet_socket<Protocol1, SeqPacketSocketService1>&& other,
      typename enable_if<is_convertible<Protocol1, Protocol>::value>::type* = 0)
    : basic_socket<Protocol, SeqPacketSocketService>(
        static_cast<basic_seq_packet_socket< Protocol1, SeqPacketSocketService1>&&>
                                              (other))
  {
  }
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename Protocol1, typename SeqPacketSocketService1>
  typename enable_if<is_convertible<Protocol1, Protocol>::value,
      basic_seq_packet_socket>::type& operator=(
        basic_seq_packet_socket<Protocol1, SeqPacketSocketService1>&& other)
  {
    basic_socket<Protocol, SeqPacketSocketService>::operator=(
        static_cast<basic_seq_packet_socket< Protocol1, SeqPacketSocketService1>&&>
                                              (other));
    return *this;
  }
# 243 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 272 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
  }
# 313 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(this->get_implementation(),
        buffers, flags, static_cast<WriteHandler&&>(handler));
  }
# 357 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags& out_flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, 0, out_flags, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 403 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, in_flags, out_flags, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 438 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags, asio::error_code& ec)
  {
    return this->get_service().receive(this->get_implementation(),
        buffers, in_flags, out_flags, ec);
  }
# 485 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      socket_base::message_flags& out_flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(
        this->get_implementation(), buffers, 0, out_flags,
        static_cast<ReadHandler&&>(handler));
  }
# 543 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      socket_base::message_flags in_flags,
      socket_base::message_flags& out_flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(
        this->get_implementation(), buffers, in_flags, out_flags,
        static_cast<ReadHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 564 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp"
# 1 "/usr/include/termios.h" 1 3 4
# 35 "/usr/include/termios.h" 3 4

# 35 "/usr/include/termios.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/termios.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/termios.h" 3 4
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;

# 1 "/usr/include/x86_64-linux-gnu/bits/termios-struct.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/termios-struct.h" 3 4
struct termios
  {
    tcflag_t c_iflag;
    tcflag_t c_oflag;
    tcflag_t c_cflag;
    tcflag_t c_lflag;
    cc_t c_line;
    cc_t c_cc[32];
    speed_t c_ispeed;
    speed_t c_ospeed;


  };
# 28 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/termios-c_cc.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/termios-c_iflag.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/termios-c_oflag.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/termios.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/termios-baud.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/termios-c_cflag.h" 1 3 4
# 56 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/termios-c_lflag.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 74 "/usr/include/x86_64-linux-gnu/bits/termios.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/termios-tcflow.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/termios-misc.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/termios.h" 2 3 4
# 40 "/usr/include/termios.h" 2 3 4
# 48 "/usr/include/termios.h" 3 4
extern speed_t cfgetospeed (const struct termios *__termios_p) noexcept (true);


extern speed_t cfgetispeed (const struct termios *__termios_p) noexcept (true);


extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) noexcept (true);


extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) noexcept (true);



extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) noexcept (true);




extern int tcgetattr (int __fd, struct termios *__termios_p) noexcept (true);



extern int tcsetattr (int __fd, int __optional_actions,
        const struct termios *__termios_p) noexcept (true);




extern void cfmakeraw (struct termios *__termios_p) noexcept (true);



extern int tcsendbreak (int __fd, int __duration) noexcept (true);





extern int tcdrain (int __fd);



extern int tcflush (int __fd, int __queue_selector) noexcept (true);



extern int tcflow (int __fd, int __action) noexcept (true);




extern __pid_t tcgetsid (int __fd) noexcept (true);




# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 105 "/usr/include/termios.h" 2 3 4


}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 2
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 2


# 41 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp"
namespace asio {



class serial_port_base
{
public:




  class baud_rate
  {
  public:
    explicit baud_rate(unsigned int rate = 0);
    unsigned int value() const;
    inline asio::error_code store(
        termios& storage,
        asio::error_code& ec) const;
    inline asio::error_code load(
        const termios& storage,
        asio::error_code& ec);
  private:
    unsigned int value_;
  };





  class flow_control
  {
  public:
    enum type { none, software, hardware };
    inline explicit flow_control(type t = none);
    type value() const;
    inline asio::error_code store(
        termios& storage,
        asio::error_code& ec) const;
    inline asio::error_code load(
        const termios& storage,
        asio::error_code& ec);
  private:
    type value_;
  };





  class parity
  {
  public:
    enum type { none, odd, even };
    inline explicit parity(type t = none);
    type value() const;
    inline asio::error_code store(
        termios& storage,
        asio::error_code& ec) const;
    inline asio::error_code load(
        const termios& storage,
        asio::error_code& ec);
  private:
    type value_;
  };





  class stop_bits
  {
  public:
    enum type { one, onepointfive, two };
    inline explicit stop_bits(type t = one);
    type value() const;
    inline asio::error_code store(
        termios& storage,
        asio::error_code& ec) const;
    inline asio::error_code load(
        const termios& storage,
        asio::error_code& ec);
  private:
    type value_;
  };





  class character_size
  {
  public:
    inline explicit character_size(unsigned int t = 8);
    unsigned int value() const;
    inline asio::error_code store(
        termios& storage,
        asio::error_code& ec) const;
    inline asio::error_code load(
        const termios& storage,
        asio::error_code& ec);
  private:
    unsigned int value_;
  };

protected:

  ~serial_port_base()
  {
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 156 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.hpp" 2

namespace asio {

inline serial_port_base::baud_rate::baud_rate(unsigned int rate)
  : value_(rate)
{
}

inline unsigned int serial_port_base::baud_rate::value() const
{
  return value_;
}

inline serial_port_base::flow_control::type
serial_port_base::flow_control::value() const
{
  return value_;
}

inline serial_port_base::parity::type serial_port_base::parity::value() const
{
  return value_;
}

inline serial_port_base::stop_bits::type
serial_port_base::stop_bits::value() const
{
  return value_;
}

inline unsigned int serial_port_base::character_size::value() const
{
  return value_;
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.hpp" 2
# 160 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 2
# 36 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 2

namespace asio {

asio::error_code serial_port_base::baud_rate::store(
    termios& storage, asio::error_code& ec) const
{



  speed_t baud;
  switch (value_)
  {

  case 0: baud = 
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                0000000
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                  ; break;
  case 50: baud = 
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                 0000001
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                    ; break;
  case 75: baud = 
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                 0000002
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                    ; break;
  case 110: baud = 
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                  0000003
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                      ; break;
  case 134: baud = 
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                  0000004
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                      ; break;
  case 150: baud = 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                  0000005
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                      ; break;
  case 200: baud = 
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                  0000006
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                      ; break;
  case 300: baud = 
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                  0000007
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                      ; break;
  case 600: baud = 
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                  0000010
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                      ; break;
  case 1200: baud = 
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                   0000011
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                        ; break;
  case 1800: baud = 
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                   0000012
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                        ; break;
  case 2400: baud = 
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                   0000013
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                        ; break;
  case 4800: baud = 
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                   0000014
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                        ; break;
  case 9600: baud = 
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                   0000015
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                        ; break;
  case 19200: baud = 
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                    0000016
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                          ; break;
  case 38400: baud = 
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                    0000017
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                          ; break;
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  case 57600: baud = 
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                    0010001
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                          ; break;


  case 115200: baud = 
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0010002
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ; break;


  case 230400: baud = 
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0010003
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ; break;


  case 460800: baud = 
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0010004
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ; break;


  case 500000: baud = 
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0010005
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ; break;


  case 576000: baud = 
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0010006
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ; break;


  case 921600: baud = 
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0010007
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ; break;


  case 1000000: baud = 
# 95 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010010
# 95 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              ; break;


  case 1152000: baud = 
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010011
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              ; break;


  case 2000000: baud = 
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010013
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              ; break;


  case 3000000: baud = 
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010015
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              ; break;


  case 3500000: baud = 
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010016
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              ; break;


  case 4000000: baud = 
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010017
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              ; break;

  default:
    ec = asio::error::invalid_argument;
    return ec;
  }



  ::cfsetispeed(&storage, baud);
  ::cfsetospeed(&storage, baud);


  ec = asio::error_code();
  return ec;
}

asio::error_code serial_port_base::baud_rate::load(
    const termios& storage, asio::error_code& ec)
{



  speed_t baud = ::cfgetospeed(&storage);
  switch (baud)
  {

  case 
# 137 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000000
# 137 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
        : value_ = 0; break;
  case 
# 138 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000001
# 138 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
         : value_ = 50; break;
  case 
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000002
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
         : value_ = 75; break;
  case 
# 140 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000003
# 140 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
          : value_ = 110; break;
  case 
# 141 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000004
# 141 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
          : value_ = 134; break;
  case 
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000005
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
          : value_ = 150; break;
  case 
# 143 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000006
# 143 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
          : value_ = 200; break;
  case 
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000007
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
          : value_ = 300; break;
  case 
# 145 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000010
# 145 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
          : value_ = 600; break;
  case 
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000011
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
           : value_ = 1200; break;
  case 
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000012
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
           : value_ = 1800; break;
  case 
# 148 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000013
# 148 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
           : value_ = 2400; break;
  case 
# 149 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000014
# 149 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
           : value_ = 4800; break;
  case 
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000015
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
           : value_ = 9600; break;
  case 
# 151 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000016
# 151 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
            : value_ = 19200; break;
  case 
# 152 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0000017
# 152 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
            : value_ = 38400; break;
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  case 
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010001
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
            : value_ = 57600; break;


  case 
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010002
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
             : value_ = 115200; break;


  case 
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010003
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
             : value_ = 230400; break;


  case 
# 170 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010004
# 170 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
             : value_ = 460800; break;


  case 
# 173 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010005
# 173 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
             : value_ = 500000; break;


  case 
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010006
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
             : value_ = 576000; break;


  case 
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010007
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
             : value_ = 921600; break;


  case 
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010010
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
              : value_ = 1000000; break;


  case 
# 185 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010011
# 185 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
              : value_ = 1152000; break;


  case 
# 188 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010013
# 188 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
              : value_ = 2000000; break;


  case 
# 191 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010015
# 191 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
              : value_ = 3000000; break;


  case 
# 194 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010016
# 194 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
              : value_ = 3500000; break;


  case 
# 197 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
      0010017
# 197 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
              : value_ = 4000000; break;

  default:
    value_ = 0;
    ec = asio::error::invalid_argument;
    return ec;
  }

  ec = asio::error_code();
  return ec;
}

serial_port_base::flow_control::flow_control(
    serial_port_base::flow_control::type t)
  : value_(t)
{
  if (t != none && t != software && t != hardware)
  {
    std::out_of_range ex("invalid flow_control value");
    asio::detail::throw_exception(ex);
  }
}

asio::error_code serial_port_base::flow_control::store(
    termios& storage, asio::error_code& ec) const
{
# 248 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  switch (value_)
  {
  case none:
    storage.c_iflag &= ~(
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                        0010000 
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              | 
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                0002000
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                    );





    break;
  case software:
    storage.c_iflag |= 
# 259 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0010000 
# 259 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            | 
# 259 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                              0002000
# 259 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                  ;





    break;
  case hardware:
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
    ec = asio::error::operation_not_supported;
    return ec;

  default:
    break;
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code serial_port_base::flow_control::load(
    const termios& storage, asio::error_code& ec)
{
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  if (storage.c_iflag & (
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                        0010000 
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              | 
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                0002000
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                    ))
  {
    value_ = software;
  }
# 319 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  else
  {
    value_ = none;
  }

  ec = asio::error_code();
  return ec;
}

serial_port_base::parity::parity(serial_port_base::parity::type t)
  : value_(t)
{
  if (t != none && t != odd && t != even)
  {
    std::out_of_range ex("invalid parity value");
    asio::detail::throw_exception(ex);
  }
}

asio::error_code serial_port_base::parity::store(
    termios& storage, asio::error_code& ec) const
{
# 360 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  switch (value_)
  {
  case none:
    storage.c_iflag |= 
# 363 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0000004
# 363 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ;
    storage.c_cflag &= ~(
# 364 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                        0000400 
# 364 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               | 
# 364 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                 0001000
# 364 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                       );
    break;
  case even:
    storage.c_iflag &= ~(
# 367 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                        0000004 
# 367 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               | 
# 367 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                 0000010
# 367 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                       );
    storage.c_iflag |= 
# 368 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0000020
# 368 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                           ;
    storage.c_cflag |= 
# 369 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0000400
# 369 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ;
    storage.c_cflag &= ~
# 370 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                       0001000
# 370 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                             ;
    break;
  case odd:
    storage.c_iflag &= ~(
# 373 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                        0000004 
# 373 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               | 
# 373 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                 0000010
# 373 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                       );
    storage.c_iflag |= 
# 374 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0000020
# 374 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                           ;
    storage.c_cflag |= (
# 375 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                       0000400 
# 375 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                              | 
# 375 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                0001000
# 375 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                      );
    break;
  default:
    break;
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code serial_port_base::parity::load(
    const termios& storage, asio::error_code& ec)
{
# 402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  if (storage.c_cflag & 
# 402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                       0000400
# 402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                             )
  {
    if (storage.c_cflag & 
# 404 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                         0001000
# 404 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               )
    {
      value_ = odd;
    }
    else
    {
      value_ = even;
    }
  }
  else
  {
    value_ = none;
  }

  ec = asio::error_code();
  return ec;
}

serial_port_base::stop_bits::stop_bits(
    serial_port_base::stop_bits::type t)
  : value_(t)
{
  if (t != one && t != onepointfive && t != two)
  {
    std::out_of_range ex("invalid stop_bits value");
    asio::detail::throw_exception(ex);
  }
}

asio::error_code serial_port_base::stop_bits::store(
    termios& storage, asio::error_code& ec) const
{
# 452 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  switch (value_)
  {
  case one:
    storage.c_cflag &= ~
# 455 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                       0000100
# 455 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                             ;
    break;
  case two:
    storage.c_cflag |= 
# 458 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                      0000100
# 458 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                            ;
    break;
  default:
    ec = asio::error::operation_not_supported;
    return ec;
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code serial_port_base::stop_bits::load(
    const termios& storage, asio::error_code& ec)
{
# 490 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
  value_ = (storage.c_cflag & 
# 490 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                             0000100
# 490 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                   ) ? two : one;

  ec = asio::error_code();
  return ec;
}

serial_port_base::character_size::character_size(unsigned int t)
  : value_(t)
{
  if (t < 5 || t > 8)
  {
    std::out_of_range ex("invalid character_size value");
    asio::detail::throw_exception(ex);
  }
}

asio::error_code serial_port_base::character_size::store(
    termios& storage, asio::error_code& ec) const
{



  storage.c_cflag &= ~
# 512 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                     0000060
# 512 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                          ;
  switch (value_)
  {
  case 5: storage.c_cflag |= 
# 515 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                            0000000
# 515 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               ; break;
  case 6: storage.c_cflag |= 
# 516 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                            0000020
# 516 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               ; break;
  case 7: storage.c_cflag |= 
# 517 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                            0000040
# 517 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               ; break;
  case 8: storage.c_cflag |= 
# 518 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                            0000060
# 518 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                               ; break;
  default: break;
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code serial_port_base::character_size::load(
    const termios& storage, asio::error_code& ec)
{



  if ((storage.c_cflag & 
# 532 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                        0000060
# 532 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                             ) == 
# 532 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                  0000000
# 532 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                     ) { value_ = 5; }
  else if ((storage.c_cflag & 
# 533 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                             0000060
# 533 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                  ) == 
# 533 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                       0000020
# 533 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                          ) { value_ = 6; }
  else if ((storage.c_cflag & 
# 534 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                             0000060
# 534 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                  ) == 
# 534 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                       0000040
# 534 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                          ) { value_ = 7; }
  else if ((storage.c_cflag & 
# 535 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                             0000060
# 535 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                  ) == 
# 535 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 3 4
                                       0000060
# 535 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp"
                                          ) { value_ = 8; }
  else
  {

    value_ = 8;
  }

  ec = asio::error_code();
  return ec;
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 549 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/serial_port_base.ipp" 2
# 162 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp" 2

namespace asio {
namespace detail {
namespace descriptor_ops {


enum
{

  user_set_non_blocking = 1,


  internal_non_blocking = 2,


  non_blocking = user_set_non_blocking | internal_non_blocking,


  possible_dup = 4
};

typedef unsigned char state_type;

template <typename ReturnType>
inline ReturnType error_wrapper(ReturnType return_value,
    asio::error_code& ec)
{
  ec = asio::error_code(
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp" 3 4
                       (*__errno_location ())
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp"
                            ,
      asio::error::get_system_category());
  return return_value;
}

inline int open(const char* path, int flags,
    asio::error_code& ec);

inline int close(int d, state_type& state,
    asio::error_code& ec);

inline bool set_user_non_blocking(int d,
    state_type& state, bool value, asio::error_code& ec);

inline bool set_internal_non_blocking(int d,
    state_type& state, bool value, asio::error_code& ec);

typedef iovec buf;

inline std::size_t sync_read(int d, state_type state, buf* bufs,
    std::size_t count, bool all_empty, asio::error_code& ec);

inline bool non_blocking_read(int d, buf* bufs, std::size_t count,
    asio::error_code& ec, std::size_t& bytes_transferred);

inline std::size_t sync_write(int d, state_type state,
    const buf* bufs, std::size_t count, bool all_empty,
    asio::error_code& ec);

inline bool non_blocking_write(int d,
    const buf* bufs, std::size_t count,
    asio::error_code& ec, std::size_t& bytes_transferred);

inline int ioctl(int d, state_type& state, long cmd,
    ioctl_arg_type* arg, asio::error_code& ec);

inline int fcntl(int d, int cmd, asio::error_code& ec);

inline int fcntl(int d, int cmd,
    long arg, asio::error_code& ec);

inline int poll_read(int d,
    state_type state, asio::error_code& ec);

inline int poll_write(int d,
    state_type state, asio::error_code& ec);

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 2

namespace asio {
namespace detail {
namespace descriptor_ops {

int open(const char* path, int flags, asio::error_code& ec)
{
  
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
  int result = error_wrapper(::open(path, flags), ec);
  if (result >= 0)
    ec = asio::error_code();
  return result;
}

int close(int d, state_type& state, asio::error_code& ec)
{
  int result = 0;
  if (d != -1)
  {
    
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
   (*__errno_location ()) 
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
         = 0;
    result = error_wrapper(::close(d), ec);

    if (result != 0
        && (ec == asio::error::would_block
          || ec == asio::error::try_again))
    {
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
      ioctl_arg_type arg = 0;
      ::ioctl(d, 
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
                0x5421
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
                       , &arg);

      state &= ~non_blocking;

      
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
     (*__errno_location ()) 
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
           = 0;
      result = error_wrapper(::close(d), ec);
    }
  }

  if (result == 0)
    ec = asio::error_code();
  return result;
}

bool set_user_non_blocking(int d, state_type& state,
    bool value, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return false;
  }

  
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
# 99 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
  ioctl_arg_type arg = (value ? 1 : 0);
  int result = error_wrapper(::ioctl(d, 
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
                                       0x5421
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
                                              , &arg), ec);


  if (result >= 0)
  {
    ec = asio::error_code();
    if (value)
      state |= user_set_non_blocking;
    else
    {



      state &= ~(user_set_non_blocking | internal_non_blocking);
    }
    return true;
  }

  return false;
}

bool set_internal_non_blocking(int d, state_type& state,
    bool value, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return false;
  }

  if (!value && (state & user_set_non_blocking))
  {



    ec = asio::error::invalid_argument;
    return false;
  }

  
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
# 149 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
  ioctl_arg_type arg = (value ? 1 : 0);
  int result = error_wrapper(::ioctl(d, 
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
                                       0x5421
# 150 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
                                              , &arg), ec);


  if (result >= 0)
  {
    ec = asio::error_code();
    if (value)
      state |= internal_non_blocking;
    else
      state &= ~internal_non_blocking;
    return true;
  }

  return false;
}

std::size_t sync_read(int d, state_type state, buf* bufs,
    std::size_t count, bool all_empty, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  if (all_empty)
  {
    ec = asio::error_code();
    return 0;
  }


  for (;;)
  {

    
# 186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
   (*__errno_location ()) 
# 186 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
         = 0;
    signed_size_type bytes = error_wrapper(::readv(
          d, bufs, static_cast<int>(count)), ec);


    if (bytes > 0)
      return bytes;


    if (bytes == 0)
    {
      ec = asio::error::eof;
      return 0;
    }


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (descriptor_ops::poll_read(d, 0, ec) < 0)
      return 0;
  }
}

bool non_blocking_read(int d, buf* bufs, std::size_t count,
    asio::error_code& ec, std::size_t& bytes_transferred)
{
  for (;;)
  {

    
# 219 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
   (*__errno_location ()) 
# 219 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
         = 0;
    signed_size_type bytes = error_wrapper(::readv(
          d, bufs, static_cast<int>(count)), ec);


    if (bytes == 0)
    {
      ec = asio::error::eof;
      return true;
    }


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes > 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}

std::size_t sync_write(int d, state_type state, const buf* bufs,
    std::size_t count, bool all_empty, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return 0;
  }


  if (all_empty)
  {
    ec = asio::error_code();
    return 0;
  }


  for (;;)
  {

    
# 272 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
   (*__errno_location ()) 
# 272 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
         = 0;
    signed_size_type bytes = error_wrapper(::writev(
          d, bufs, static_cast<int>(count)), ec);


    if (bytes > 0)
      return bytes;


    if ((state & user_set_non_blocking)
        || (ec != asio::error::would_block
          && ec != asio::error::try_again))
      return 0;


    if (descriptor_ops::poll_write(d, 0, ec) < 0)
      return 0;
  }
}

bool non_blocking_write(int d, const buf* bufs, std::size_t count,
    asio::error_code& ec, std::size_t& bytes_transferred)
{
  for (;;)
  {

    
# 298 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
   (*__errno_location ()) 
# 298 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
         = 0;
    signed_size_type bytes = error_wrapper(::writev(
          d, bufs, static_cast<int>(count)), ec);


    if (ec == asio::error::interrupted)
      continue;


    if (ec == asio::error::would_block
        || ec == asio::error::try_again)
      return false;


    if (bytes >= 0)
    {
      ec = asio::error_code();
      bytes_transferred = bytes;
    }
    else
      bytes_transferred = 0;

    return true;
  }
}

int ioctl(int d, state_type& state, long cmd,
    ioctl_arg_type* arg, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return -1;
  }

  
# 333 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 333 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
  int result = error_wrapper(::ioctl(d, cmd, arg), ec);

  if (result >= 0)
  {
    ec = asio::error_code();







    if (cmd == static_cast<long>(
# 346 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
                                0x5421
# 346 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
                                       ))
    {
      if (*arg)
      {
        state |= user_set_non_blocking;
      }
      else
      {



        state &= ~(user_set_non_blocking | internal_non_blocking);
      }
    }
  }

  return result;
}

int fcntl(int d, int cmd, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return -1;
  }

  
# 373 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 373 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
  int result = error_wrapper(::fcntl(d, cmd), ec);
  if (result != -1)
    ec = asio::error_code();
  return result;
}

int fcntl(int d, int cmd, long arg, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return -1;
  }

  
# 388 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 388 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
  int result = error_wrapper(::fcntl(d, cmd, arg), ec);
  if (result != -1)
    ec = asio::error_code();
  return result;
}

int poll_read(int d, state_type state, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return -1;
  }

  pollfd fds;
  fds.fd = d;
  fds.events = 
# 405 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
              0x001
# 405 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
                    ;
  fds.revents = 0;
  int timeout = (state & user_set_non_blocking) ? 0 : -1;
  
# 408 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 408 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
  int result = error_wrapper(::poll(&fds, 1, timeout), ec);
  if (result == 0)
    ec = (state & user_set_non_blocking)
      ? asio::error::would_block : asio::error_code();
  else if (result > 0)
    ec = asio::error_code();
  return result;
}

int poll_write(int d, state_type state, asio::error_code& ec)
{
  if (d == -1)
  {
    ec = asio::error::bad_descriptor;
    return -1;
  }

  pollfd fds;
  fds.fd = d;
  fds.events = 
# 428 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
              0x004
# 428 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
                     ;
  fds.revents = 0;
  int timeout = (state & user_set_non_blocking) ? 0 : -1;
  
# 431 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 3 4
 (*__errno_location ()) 
# 431 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp"
       = 0;
  int result = error_wrapper(::poll(&fds, 1, timeout), ec);
  if (result == 0)
    ec = (state & user_set_non_blocking)
      ? asio::error::would_block : asio::error_code();
  else if (result > 0)
    ec = asio::error_code();
  return result;
}

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 446 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/descriptor_ops.ipp" 2
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_ops.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_read_op.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_read_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_read_op.hpp" 2

namespace asio {
namespace detail {

template <typename MutableBufferSequence>
class descriptor_read_op_base : public reactor_op
{
public:
  descriptor_read_op_base(int descriptor,
      const MutableBufferSequence& buffers, func_type complete_func)
    : reactor_op(&descriptor_read_op_base::do_perform, complete_func),
      descriptor_(descriptor),
      buffers_(buffers)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    descriptor_read_op_base* o(static_cast<descriptor_read_op_base*>(base));

    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(o->buffers_);

    return descriptor_ops::non_blocking_read(o->descriptor_,
        bufs.buffers(), bufs.count(), o->ec_, o->bytes_transferred_);
  }

private:
  int descriptor_;
  MutableBufferSequence buffers_;
};

template <typename MutableBufferSequence, typename Handler>
class descriptor_read_op
  : public descriptor_read_op_base<MutableBufferSequence>
{
public:
  struct ptr { Handler* h; void* v; descriptor_read_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~descriptor_read_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(descriptor_read_op), *h); v = 0; } } };

  descriptor_read_op(int descriptor,
      const MutableBufferSequence& buffers, Handler& handler)
    : descriptor_read_op_base<MutableBufferSequence>(
        descriptor, buffers, &descriptor_read_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    descriptor_read_op* o(static_cast<descriptor_read_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 116 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_read_op.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_write_op.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_write_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_write_op.hpp" 2

namespace asio {
namespace detail {

template <typename ConstBufferSequence>
class descriptor_write_op_base : public reactor_op
{
public:
  descriptor_write_op_base(int descriptor,
      const ConstBufferSequence& buffers, func_type complete_func)
    : reactor_op(&descriptor_write_op_base::do_perform, complete_func),
      descriptor_(descriptor),
      buffers_(buffers)
  {
  }

  static bool do_perform(reactor_op* base)
  {
    descriptor_write_op_base* o(static_cast<descriptor_write_op_base*>(base));

    buffer_sequence_adapter<asio::const_buffer,
        ConstBufferSequence> bufs(o->buffers_);

    return descriptor_ops::non_blocking_write(o->descriptor_,
        bufs.buffers(), bufs.count(), o->ec_, o->bytes_transferred_);
  }

private:
  int descriptor_;
  ConstBufferSequence buffers_;
};

template <typename ConstBufferSequence, typename Handler>
class descriptor_write_op
  : public descriptor_write_op_base<ConstBufferSequence>
{
public:
  struct ptr { Handler* h; void* v; descriptor_write_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~descriptor_write_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(descriptor_write_op), *h); v = 0; } } };

  descriptor_write_op(int descriptor,
      const ConstBufferSequence& buffers, Handler& handler)
    : descriptor_write_op_base<ConstBufferSequence>(
        descriptor, buffers, &descriptor_write_op::do_complete),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    descriptor_write_op* o(static_cast<descriptor_write_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    (void)0;







    detail::binder2<Handler, asio::error_code, std::size_t>
      handler(o->handler_, o->ec_, o->bytes_transferred_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 116 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/descriptor_write_op.hpp" 2
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 38 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 2

namespace asio {
namespace detail {

class reactive_descriptor_service
{
public:

  typedef int native_handle_type;


  class implementation_type
    : private asio::detail::noncopyable
  {
  public:

    implementation_type()
      : descriptor_(-1),
        state_(0)
    {
    }

  private:

    friend class reactive_descriptor_service;


    int descriptor_;


    descriptor_ops::state_type state_;


    reactor::per_descriptor_data reactor_data_;
  };


  inline reactive_descriptor_service(
      asio::io_service& io_service);


  inline void shutdown_service();


  inline void construct(implementation_type& impl);


  inline void move_construct(implementation_type& impl,
      implementation_type& other_impl);


  inline void move_assign(implementation_type& impl,
      reactive_descriptor_service& other_service,
      implementation_type& other_impl);


  inline void destroy(implementation_type& impl);


  inline asio::error_code assign(implementation_type& impl,
      const native_handle_type& native_descriptor,
      asio::error_code& ec);


  bool is_open(const implementation_type& impl) const
  {
    return impl.descriptor_ != -1;
  }


  inline asio::error_code close(implementation_type& impl,
      asio::error_code& ec);


  native_handle_type native_handle(const implementation_type& impl) const
  {
    return impl.descriptor_;
  }


  inline native_handle_type release(implementation_type& impl);


  inline asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec);


  template <typename IO_Control_Command>
  asio::error_code io_control(implementation_type& impl,
      IO_Control_Command& command, asio::error_code& ec)
  {
    descriptor_ops::ioctl(impl.descriptor_, impl.state_,
        command.name(), static_cast<ioctl_arg_type*>(command.data()), ec);
    return ec;
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return (impl.state_ & descriptor_ops::user_set_non_blocking) != 0;
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    descriptor_ops::set_user_non_blocking(
        impl.descriptor_, impl.state_, mode, ec);
    return ec;
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return (impl.state_ & descriptor_ops::internal_non_blocking) != 0;
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    descriptor_ops::set_internal_non_blocking(
        impl.descriptor_, impl.state_, mode, ec);
    return ec;
  }


  template <typename ConstBufferSequence>
  size_t write_some(implementation_type& impl,
      const ConstBufferSequence& buffers, asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::const_buffer,
        ConstBufferSequence> bufs(buffers);

    return descriptor_ops::sync_write(impl.descriptor_, impl.state_,
        bufs.buffers(), bufs.count(), bufs.all_empty(), ec);
  }


  size_t write_some(implementation_type& impl,
      const null_buffers&, asio::error_code& ec)
  {

    descriptor_ops::poll_write(impl.descriptor_, impl.state_, ec);

    return 0;
  }



  template <typename ConstBufferSequence, typename Handler>
  void async_write_some(implementation_type& impl,
      const ConstBufferSequence& buffers, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef descriptor_write_op<ConstBufferSequence, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.descriptor_, buffers, handler);

    (void)0;

    start_op(impl, reactor::write_op, p.p, is_continuation, true,
        buffer_sequence_adapter<asio::const_buffer,
          ConstBufferSequence>::all_empty(buffers));
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_write_some(implementation_type& impl,
      const null_buffers&, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                                   ;

    start_op(impl, reactor::write_op, p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }


  template <typename MutableBufferSequence>
  size_t read_some(implementation_type& impl,
      const MutableBufferSequence& buffers, asio::error_code& ec)
  {
    buffer_sequence_adapter<asio::mutable_buffer,
        MutableBufferSequence> bufs(buffers);

    return descriptor_ops::sync_read(impl.descriptor_, impl.state_,
        bufs.buffers(), bufs.count(), bufs.all_empty(), ec);
  }


  size_t read_some(implementation_type& impl,
      const null_buffers&, asio::error_code& ec)
  {

    descriptor_ops::poll_read(impl.descriptor_, impl.state_, ec);

    return 0;
  }



  template <typename MutableBufferSequence, typename Handler>
  void async_read_some(implementation_type& impl,
      const MutableBufferSequence& buffers, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef descriptor_read_op<MutableBufferSequence, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl.descriptor_, buffers, handler);

    (void)0;

    start_op(impl, reactor::read_op, p.p, is_continuation, true,
        buffer_sequence_adapter<asio::mutable_buffer,
          MutableBufferSequence>::all_empty(buffers));
    p.v = p.p = 0;
  }


  template <typename Handler>
  void async_read_some(implementation_type& impl,
      const null_buffers&, Handler& handler)
  {
    bool is_continuation =
      asio_handler_cont_helpers::is_continuation(handler);


    typedef reactive_null_buffers_op<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0
                                                  ;

    start_op(impl, reactor::read_op, p.p, is_continuation, false, false);
    p.v = p.p = 0;
  }

private:

  inline void start_op(implementation_type& impl, int op_type,
      reactor_op* op, bool is_continuation, bool is_non_blocking, bool noop);


  reactor& reactor_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 313 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_descriptor_service.ipp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_descriptor_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_descriptor_service.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_descriptor_service.ipp" 2

namespace asio {
namespace detail {

reactive_descriptor_service::reactive_descriptor_service(
    asio::io_service& io_service)
  : reactor_(asio::use_service<reactor>(io_service))
{
  reactor_.init_task();
}

void reactive_descriptor_service::shutdown_service()
{
}

void reactive_descriptor_service::construct(
    reactive_descriptor_service::implementation_type& impl)
{
  impl.descriptor_ = -1;
  impl.state_ = 0;
}

void reactive_descriptor_service::move_construct(
    reactive_descriptor_service::implementation_type& impl,
    reactive_descriptor_service::implementation_type& other_impl)
{
  impl.descriptor_ = other_impl.descriptor_;
  other_impl.descriptor_ = -1;

  impl.state_ = other_impl.state_;
  other_impl.state_ = 0;

  reactor_.move_descriptor(impl.descriptor_,
      impl.reactor_data_, other_impl.reactor_data_);
}

void reactive_descriptor_service::move_assign(
    reactive_descriptor_service::implementation_type& impl,
    reactive_descriptor_service& other_service,
    reactive_descriptor_service::implementation_type& other_impl)
{
  destroy(impl);

  impl.descriptor_ = other_impl.descriptor_;
  other_impl.descriptor_ = -1;

  impl.state_ = other_impl.state_;
  other_impl.state_ = 0;

  other_service.reactor_.move_descriptor(impl.descriptor_,
      impl.reactor_data_, other_impl.reactor_data_);
}

void reactive_descriptor_service::destroy(
    reactive_descriptor_service::implementation_type& impl)
{
  if (is_open(impl))
  {
    (void)0;

    reactor_.deregister_descriptor(impl.descriptor_, impl.reactor_data_,
        (impl.state_ & descriptor_ops::possible_dup) == 0);
  }

  asio::error_code ignored_ec;
  descriptor_ops::close(impl.descriptor_, impl.state_, ignored_ec);
}

asio::error_code reactive_descriptor_service::assign(
    reactive_descriptor_service::implementation_type& impl,
    const native_handle_type& native_descriptor, asio::error_code& ec)
{
  if (is_open(impl))
  {
    ec = asio::error::already_open;
    return ec;
  }

  if (int err = reactor_.register_descriptor(
        native_descriptor, impl.reactor_data_))
  {
    ec = asio::error_code(err,
        asio::error::get_system_category());
    return ec;
  }

  impl.descriptor_ = native_descriptor;
  impl.state_ = descriptor_ops::possible_dup;
  ec = asio::error_code();
  return ec;
}

asio::error_code reactive_descriptor_service::close(
    reactive_descriptor_service::implementation_type& impl,
    asio::error_code& ec)
{
  if (is_open(impl))
  {
    (void)0;

    reactor_.deregister_descriptor(impl.descriptor_, impl.reactor_data_,
        (impl.state_ & descriptor_ops::possible_dup) == 0);
  }

  descriptor_ops::close(impl.descriptor_, impl.state_, ec);







  construct(impl);

  return ec;
}

reactive_descriptor_service::native_handle_type
reactive_descriptor_service::release(
    reactive_descriptor_service::implementation_type& impl)
{
  native_handle_type descriptor = impl.descriptor_;

  if (is_open(impl))
  {
    (void)0;

    reactor_.deregister_descriptor(impl.descriptor_, impl.reactor_data_, false);
    construct(impl);
  }

  return descriptor;
}

asio::error_code reactive_descriptor_service::cancel(
    reactive_descriptor_service::implementation_type& impl,
    asio::error_code& ec)
{
  if (!is_open(impl))
  {
    ec = asio::error::bad_descriptor;
    return ec;
  }

  (void)0;

  reactor_.cancel_ops(impl.descriptor_, impl.reactor_data_);
  ec = asio::error_code();
  return ec;
}

void reactive_descriptor_service::start_op(
    reactive_descriptor_service::implementation_type& impl,
    int op_type, reactor_op* op, bool is_continuation,
    bool is_non_blocking, bool noop)
{
  if (!noop)
  {
    if ((impl.state_ & descriptor_ops::non_blocking) ||
        descriptor_ops::set_internal_non_blocking(
          impl.descriptor_, impl.state_, true, op->ec_))
    {
      reactor_.start_op(op_type, impl.descriptor_,
          impl.reactor_data_, op, is_continuation, is_non_blocking);
      return;
    }
  }

  reactor_.post_immediate_completion(op, is_continuation);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_descriptor_service.ipp" 2
# 316 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_descriptor_service.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 2

namespace asio {
namespace detail {


class reactive_serial_port_service
{
public:

  typedef reactive_descriptor_service::native_handle_type native_handle_type;


  typedef reactive_descriptor_service::implementation_type implementation_type;

  inline reactive_serial_port_service(
      asio::io_service& io_service);


  inline void shutdown_service();


  void construct(implementation_type& impl)
  {
    descriptor_service_.construct(impl);
  }


  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    descriptor_service_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      reactive_serial_port_service& other_service,
      implementation_type& other_impl)
  {
    descriptor_service_.move_assign(impl,
        other_service.descriptor_service_, other_impl);
  }


  void destroy(implementation_type& impl)
  {
    descriptor_service_.destroy(impl);
  }


  inline asio::error_code open(implementation_type& impl,
      const std::string& device, asio::error_code& ec);


  asio::error_code assign(implementation_type& impl,
      const native_handle_type& native_descriptor,
      asio::error_code& ec)
  {
    return descriptor_service_.assign(impl, native_descriptor, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return descriptor_service_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return descriptor_service_.close(impl, ec);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return descriptor_service_.native_handle(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return descriptor_service_.cancel(impl, ec);
  }


  template <typename SettableSerialPortOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSerialPortOption& option, asio::error_code& ec)
  {
    return do_set_option(impl,
        &reactive_serial_port_service::store_option<SettableSerialPortOption>,
        &option, ec);
  }


  template <typename GettableSerialPortOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSerialPortOption& option, asio::error_code& ec) const
  {
    return do_get_option(impl,
        &reactive_serial_port_service::load_option<GettableSerialPortOption>,
        &option, ec);
  }


  asio::error_code send_break(implementation_type& impl,
      asio::error_code& ec)
  {
    
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 3 4
   (*__errno_location ()) 
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp"
         = 0;
    descriptor_ops::error_wrapper(::tcsendbreak(
          descriptor_service_.native_handle(impl), 0), ec);
    return ec;
  }


  template <typename ConstBufferSequence>
  size_t write_some(implementation_type& impl,
      const ConstBufferSequence& buffers, asio::error_code& ec)
  {
    return descriptor_service_.write_some(impl, buffers, ec);
  }



  template <typename ConstBufferSequence, typename Handler>
  void async_write_some(implementation_type& impl,
      const ConstBufferSequence& buffers, Handler& handler)
  {
    descriptor_service_.async_write_some(impl, buffers, handler);
  }


  template <typename MutableBufferSequence>
  size_t read_some(implementation_type& impl,
      const MutableBufferSequence& buffers, asio::error_code& ec)
  {
    return descriptor_service_.read_some(impl, buffers, ec);
  }



  template <typename MutableBufferSequence, typename Handler>
  void async_read_some(implementation_type& impl,
      const MutableBufferSequence& buffers, Handler& handler)
  {
    descriptor_service_.async_read_some(impl, buffers, handler);
  }

private:

  typedef asio::error_code (*store_function_type)(
      const void*, termios&, asio::error_code&);


  template <typename SettableSerialPortOption>
  static asio::error_code store_option(const void* option,
      termios& storage, asio::error_code& ec)
  {
    return static_cast<const SettableSerialPortOption*>(option)->store(
        storage, ec);
  }


  inline asio::error_code do_set_option(
      implementation_type& impl, store_function_type store,
      const void* option, asio::error_code& ec);


  typedef asio::error_code (*load_function_type)(
      void*, const termios&, asio::error_code&);


  template <typename GettableSerialPortOption>
  static asio::error_code load_option(void* option,
      const termios& storage, asio::error_code& ec)
  {
    return static_cast<GettableSerialPortOption*>(option)->load(storage, ec);
  }


  inline asio::error_code do_get_option(
      const implementation_type& impl, load_function_type load,
      void* option, asio::error_code& ec) const;


  reactive_descriptor_service descriptor_service_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 226 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 2

namespace asio {
namespace detail {

reactive_serial_port_service::reactive_serial_port_service(
    asio::io_service& io_service)
  : descriptor_service_(io_service)
{
}

void reactive_serial_port_service::shutdown_service()
{
  descriptor_service_.shutdown_service();
}

asio::error_code reactive_serial_port_service::open(
    reactive_serial_port_service::implementation_type& impl,
    const std::string& device, asio::error_code& ec)
{
  if (is_open(impl))
  {
    ec = asio::error::already_open;
    return ec;
  }

  descriptor_ops::state_type state = 0;
  int fd = descriptor_ops::open(device.c_str(),
      
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
     02 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
            | 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
              04000 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                         | 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                           0400
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                   , ec);
  if (fd < 0)
    return ec;

  int s = descriptor_ops::fcntl(fd, 
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                   3
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                          , ec);
  if (s >= 0)
    s = descriptor_ops::fcntl(fd, 
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                 4
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                        , s | 
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                              04000
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                                        , ec);
  if (s < 0)
  {
    asio::error_code ignored_ec;
    descriptor_ops::close(fd, state, ignored_ec);
    return ec;
  }


  termios ios;
  
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
 (*__errno_location ()) 
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
       = 0;
  s = descriptor_ops::error_wrapper(::tcgetattr(fd, &ios), ec);
  if (s >= 0)
  {



    ios.c_iflag &= ~(
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                    0000001 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                           | 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                             0000002 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                    | 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                      0000010
        
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
       | 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
         0000040 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                | 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                  0000100 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                        | 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                          0000200 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                | 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                  0000400 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                        | 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                          0002000
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                              );
    ios.c_oflag &= ~
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                   0000001
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                        ;
    ios.c_lflag &= ~(
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                    0000010 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                         | 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                           0000100 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                  | 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                    0000002 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                           | 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                             0000001 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                                  | 
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                                    0100000
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                                          );
    ios.c_cflag &= ~(
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                    0000060 
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                          | 
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                            0000400
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                  );
    ios.c_cflag |= 
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                  0000060
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                     ;

    ios.c_iflag |= 
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                  0000004
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                        ;
    ios.c_cflag |= 
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                  0000200 
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                        | 
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                          0004000
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                ;
    
# 87 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
   (*__errno_location ()) 
# 87 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
         = 0;
    s = descriptor_ops::error_wrapper(::tcsetattr(fd, 
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                                     0
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                                            , &ios), ec);
  }
  if (s < 0)
  {
    asio::error_code ignored_ec;
    descriptor_ops::close(fd, state, ignored_ec);
    return ec;
  }


  if (descriptor_service_.assign(impl, fd, ec))
  {
    asio::error_code ignored_ec;
    descriptor_ops::close(fd, state, ignored_ec);
  }

  return ec;
}

asio::error_code reactive_serial_port_service::do_set_option(
    reactive_serial_port_service::implementation_type& impl,
    reactive_serial_port_service::store_function_type store,
    const void* option, asio::error_code& ec)
{
  termios ios;
  
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
 (*__errno_location ()) 
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
       = 0;
  descriptor_ops::error_wrapper(::tcgetattr(
        descriptor_service_.native_handle(impl), &ios), ec);
  if (ec)
    return ec;

  if (store(option, ios, ec))
    return ec;

  
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
 (*__errno_location ()) 
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
       = 0;
  descriptor_ops::error_wrapper(::tcsetattr(
        descriptor_service_.native_handle(impl), 
# 124 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
                                                0
# 124 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
                                                       , &ios), ec);
  return ec;
}

asio::error_code reactive_serial_port_service::do_get_option(
    const reactive_serial_port_service::implementation_type& impl,
    reactive_serial_port_service::load_function_type load,
    void* option, asio::error_code& ec) const
{
  termios ios;
  
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 3 4
 (*__errno_location ()) 
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp"
       = 0;
  descriptor_ops::error_wrapper(::tcgetattr(
        descriptor_service_.native_handle(impl), &ios), ec);
  if (ec)
    return ec;

  return load(option, ios, ec);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/reactive_serial_port_service.ipp" 2
# 229 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/reactive_serial_port_service.hpp" 2
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/win_iocp_serial_port_service.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp" 2

namespace asio {


class serial_port_service



  : public asio::detail::service_base<serial_port_service>

{
public:





private:




  typedef detail::reactive_serial_port_service service_impl_type;


public:




  typedef service_impl_type::implementation_type implementation_type;






  typedef service_impl_type::native_handle_type native_type;






  typedef service_impl_type::native_handle_type native_handle_type;



  explicit serial_port_service(asio::io_service& io_service)
    : asio::detail::service_base<serial_port_service>(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      serial_port_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code open(implementation_type& impl,
      const std::string& device, asio::error_code& ec)
  {
    return service_impl_.open(impl, device, ec);
  }


  asio::error_code assign(implementation_type& impl,
      const native_handle_type& handle, asio::error_code& ec)
  {
    return service_impl_.assign(impl, handle, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }


  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  template <typename SettableSerialPortOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSerialPortOption& option, asio::error_code& ec)
  {
    return service_impl_.set_option(impl, option, ec);
  }


  template <typename GettableSerialPortOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSerialPortOption& option, asio::error_code& ec) const
  {
    return service_impl_.get_option(impl, option, ec);
  }


  asio::error_code send_break(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.send_break(impl, ec);
  }


  template <typename ConstBufferSequence>
  std::size_t write_some(implementation_type& impl,
      const ConstBufferSequence& buffers, asio::error_code& ec)
  {
    return service_impl_.write_some(impl, buffers, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(implementation_type& impl,
      const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_write_some(impl, buffers, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t read_some(implementation_type& impl,
      const MutableBufferSequence& buffers, asio::error_code& ec)
  {
    return service_impl_.read_some(impl, buffers, ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(implementation_type& impl,
      const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_read_some(impl, buffers, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 249 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp" 2

namespace asio {
# 45 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
template <typename SerialPortService = serial_port_service>
class basic_serial_port
  : public basic_io_object<SerialPortService>,
    public serial_port_base
{
public:


  typedef typename SerialPortService::native_handle_type native_type;


  typedef typename SerialPortService::native_handle_type native_handle_type;


  typedef basic_serial_port<SerialPortService> lowest_layer_type;
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  explicit basic_serial_port(asio::io_service& io_service)
    : basic_io_object<SerialPortService>(io_service)
  {
  }
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  explicit basic_serial_port(asio::io_service& io_service,
      const char* device)
    : basic_io_object<SerialPortService>(io_service)
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), device, ec);
    asio::detail::throw_error(ec, "open");
  }
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  explicit basic_serial_port(asio::io_service& io_service,
      const std::string& device)
    : basic_io_object<SerialPortService>(io_service)
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), device, ec);
    asio::detail::throw_error(ec, "open");
  }
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  basic_serial_port(asio::io_service& io_service,
      const native_handle_type& native_serial_port)
    : basic_io_object<SerialPortService>(io_service)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        native_serial_port, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  basic_serial_port(basic_serial_port&& other)
    : basic_io_object<SerialPortService>(
        static_cast<basic_serial_port&&>(other))
  {
  }
# 162 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  basic_serial_port& operator=(basic_serial_port&& other)
  {
    basic_io_object<SerialPortService>::operator=(
        static_cast<basic_serial_port&&>(other));
    return *this;
  }
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  lowest_layer_type& lowest_layer()
  {
    return *this;
  }
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  const lowest_layer_type& lowest_layer() const
  {
    return *this;
  }
# 206 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  void open(const std::string& device)
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), device, ec);
    asio::detail::throw_error(ec, "open");
  }
# 222 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  asio::error_code open(const std::string& device,
      asio::error_code& ec)
  {
    return this->get_service().open(this->get_implementation(), device, ec);
  }
# 236 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  void assign(const native_handle_type& native_serial_port)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        native_serial_port, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 252 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  asio::error_code assign(const native_handle_type& native_serial_port,
      asio::error_code& ec)
  {
    return this->get_service().assign(this->get_implementation(),
        native_serial_port, ec);
  }


  bool is_open() const
  {
    return this->get_service().is_open(this->get_implementation());
  }
# 273 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  void close()
  {
    asio::error_code ec;
    this->get_service().close(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "close");
  }
# 288 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  asio::error_code close(asio::error_code& ec)
  {
    return this->get_service().close(this->get_implementation(), ec);
  }
# 300 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  native_type native()
  {
    return this->get_service().native_handle(this->get_implementation());
  }







  native_handle_type native_handle()
  {
    return this->get_service().native_handle(this->get_implementation());
  }
# 324 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  void cancel()
  {
    asio::error_code ec;
    this->get_service().cancel(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "cancel");
  }
# 339 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  asio::error_code cancel(asio::error_code& ec)
  {
    return this->get_service().cancel(this->get_implementation(), ec);
  }
# 351 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  void send_break()
  {
    asio::error_code ec;
    this->get_service().send_break(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "send_break");
  }
# 365 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  asio::error_code send_break(asio::error_code& ec)
  {
    return this->get_service().send_break(this->get_implementation(), ec);
  }
# 385 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename SettableSerialPortOption>
  void set_option(const SettableSerialPortOption& option)
  {
    asio::error_code ec;
    this->get_service().set_option(this->get_implementation(), option, ec);
    asio::detail::throw_error(ec, "set_option");
  }
# 408 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename SettableSerialPortOption>
  asio::error_code set_option(const SettableSerialPortOption& option,
      asio::error_code& ec)
  {
    return this->get_service().set_option(
        this->get_implementation(), option, ec);
  }
# 432 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename GettableSerialPortOption>
  void get_option(GettableSerialPortOption& option)
  {
    asio::error_code ec;
    this->get_service().get_option(this->get_implementation(), option, ec);
    asio::detail::throw_error(ec, "get_option");
  }
# 456 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename GettableSerialPortOption>
  asio::error_code get_option(GettableSerialPortOption& option,
      asio::error_code& ec)
  {
    return this->get_service().get_option(
        this->get_implementation(), option, ec);
  }
# 491 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().write_some(
        this->get_implementation(), buffers, ec);
    asio::detail::throw_error(ec, "write_some");
    return s;
  }
# 517 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers,
      asio::error_code& ec)
  {
    return this->get_service().write_some(
        this->get_implementation(), buffers, ec);
  }
# 560 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_write_some(this->get_implementation(),
        buffers, static_cast<WriteHandler&&>(handler));
  }
# 602 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().read_some(
        this->get_implementation(), buffers, ec);
    asio::detail::throw_error(ec, "read_some");
    return s;
  }
# 629 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return this->get_service().read_some(
        this->get_implementation(), buffers, ec);
  }
# 673 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_read_some(this->get_implementation(),
        buffers, static_cast<ReadHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 691 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set_service.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp"
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4

# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-arch.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR,

  SEGV_MTEAERR,

  SEGV_MTESERR,

  SEGV_CPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 216 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     noexcept (true);

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     noexcept (true);






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     noexcept (true);
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) noexcept (true);






extern int killpg (__pid_t __pgrp, int __sig) noexcept (true);



extern int raise (int __sig) noexcept (true);



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     noexcept (true);
extern int gsignal (int __sig) noexcept (true);




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause")
  __attribute__ ((__deprecated__ ("Use the sigsuspend function instead")));
# 173 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) noexcept (true) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) noexcept (true) __attribute__ ((__deprecated__));


extern int siggetmask (void) noexcept (true) __attribute__ ((__deprecated__));
# 188 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 230 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) noexcept (true);






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) noexcept (true);


extern int sigpending (sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));







extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));
# 292 "/usr/include/signal.h" 3 4
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     noexcept (true);







# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 302 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) noexcept (true);






# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 312 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 314 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 317 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) noexcept (true)
  __attribute__ ((__deprecated__ ("Use sigaction with SA_RESTART instead")));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 328 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigstksz.h" 1 3 4
# 329 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 330 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) noexcept (true);




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 340 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     noexcept (true) __attribute__ ((__deprecated__));






extern int sighold (int __sig) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the sigprocmask function instead")));


extern int sigrelse (int __sig) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the sigprocmask function instead")));


extern int sigignore (int __sig) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the signal function instead")));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the signal and sigprocmask functions instead")))
                                                        ;






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)noexcept (true);


extern int pthread_kill (pthread_t __threadid, int __signo) noexcept (true);



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) noexcept (true);
# 377 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) noexcept (true);

extern int __libc_current_sigrtmax (void) noexcept (true);





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 392 "/usr/include/signal.h" 2 3 4

}
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_handler.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_handler.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_op.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_op.hpp" 2


# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_op.hpp"
namespace asio {
namespace detail {

class signal_op
  : public operation
{
public:

  asio::error_code ec_;


  int signal_number_;

protected:
  signal_op(func_type func)
    : operation(func),
      signal_number_(0)
  {
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_op.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_handler.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_handler.hpp" 2

namespace asio {
namespace detail {

template <typename Handler>
class signal_handler : public signal_op
{
public:
  struct ptr { Handler* h; void* v; signal_handler* p; ~ptr() { reset(); } void reset() { if (p) { p->~signal_handler(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(signal_handler), *h); v = 0; } } };

  signal_handler(Handler& h)
    : signal_op(&signal_handler::do_complete),
      handler_(static_cast<Handler&&>(h))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    signal_handler* h(static_cast<signal_handler*>(base));
    ptr p = { asio::detail::addressof(h->handler_), h, h };

    (void)0;







    detail::binder2<Handler, asio::error_code, int>
      handler(h->handler_, h->ec_, h->signal_number_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_handler.hpp" 2
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 2







# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 36 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 2

namespace asio {
namespace detail {


enum { max_signal_number = 
# 41 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 3 4
                          (64 + 1) 
# 41 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp"
                               };




extern inline struct signal_state* get_signal_state();

extern "C" inline void asio_signal_handler(int signal_number);

class signal_set_service
{
public:

  class registration
  {
  public:

    registration()
      : signal_number_(0),
        queue_(0),
        undelivered_(0),
        next_in_table_(0),
        prev_in_table_(0),
        next_in_set_(0)
    {
    }

  private:

    friend class signal_set_service;


    int signal_number_;


    op_queue<signal_op>* queue_;


    std::size_t undelivered_;


    registration* next_in_table_;
    registration* prev_in_table_;


    registration* next_in_set_;
  };


  class implementation_type
  {
  public:

    implementation_type()
      : signals_(0)
    {
    }

  private:

    friend class signal_set_service;


    op_queue<signal_op> queue_;


    registration* signals_;
  };


  inline signal_set_service(asio::io_service& io_service);


  inline ~signal_set_service();


  inline void shutdown_service();


  inline void fork_service(
      asio::io_service::fork_event fork_ev);


  inline void construct(implementation_type& impl);


  inline void destroy(implementation_type& impl);


  inline asio::error_code add(implementation_type& impl,
      int signal_number, asio::error_code& ec);


  inline asio::error_code remove(implementation_type& impl,
      int signal_number, asio::error_code& ec);


  inline asio::error_code clear(implementation_type& impl,
      asio::error_code& ec);


  inline asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec);


  template <typename Handler>
  void async_wait(implementation_type& impl, Handler& handler)
  {

    typedef signal_handler<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    (void)0;

    start_wait_op(impl, p.p);
    p.v = p.p = 0;
  }


  inline static void deliver_signal(int signal_number);

private:

  inline static void add_service(signal_set_service* service);


  inline static void remove_service(signal_set_service* service);


  inline static void open_descriptors();


  inline static void close_descriptors();


  inline void start_wait_op(implementation_type& impl, signal_op* op);


  io_service_impl& io_service_;





  class pipe_read_op;


  reactor& reactor_;


  reactor::per_descriptor_data reactor_data_;





  registration* registrations_[max_signal_number];


  signal_set_service* next_;
  signal_set_service* prev_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_blocker.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_blocker.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp"
# 1 "/usr/include/c++/15/csignal" 1 3
# 52 "/usr/include/c++/15/csignal" 3

# 52 "/usr/include/c++/15/csignal" 3
namespace std
{
  using ::sig_atomic_t;
  using ::signal;
  using ::raise;
}
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 2


# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp"
namespace asio {
namespace detail {

class posix_signal_blocker
  : private noncopyable
{
public:

  posix_signal_blocker()
    : blocked_(false)
  {
    sigset_t new_mask;
    sigfillset(&new_mask);
    blocked_ = (pthread_sigmask(
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 3 4
                               0
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp"
                                        , &new_mask, &old_mask_) == 0);
  }


  ~posix_signal_blocker()
  {
    if (blocked_)
      pthread_sigmask(
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 3 4
                     2
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp"
                                , &old_mask_, 0);
  }


  void block()
  {
    if (!blocked_)
    {
      sigset_t new_mask;
      sigfillset(&new_mask);
      blocked_ = (pthread_sigmask(
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 3 4
                                 0
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp"
                                          , &new_mask, &old_mask_) == 0);
    }
  }


  void unblock()
  {
    if (blocked_)
      blocked_ = (pthread_sigmask(
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 3 4
                                 2
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp"
                                            , &old_mask_, 0) != 0);
  }

private:

  bool blocked_;


  sigset_t old_mask_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_signal_blocker.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_blocker.hpp" 2




namespace asio {
namespace detail {






typedef posix_signal_blocker signal_blocker;


}
}
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/static_mutex.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/static_mutex.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_static_mutex.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_static_mutex.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_static_mutex.hpp" 2

namespace asio {
namespace detail {

struct posix_static_mutex
{
  typedef asio::detail::scoped_lock<posix_static_mutex> scoped_lock;


  void init()
  {

  }


  void lock()
  {
    (void)::pthread_mutex_lock(&mutex_);
  }


  void unlock()
  {
    (void)::pthread_mutex_unlock(&mutex_);
  }

  ::pthread_mutex_t mutex_;
};



}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_static_mutex.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/static_mutex.hpp" 2






namespace asio {
namespace detail {
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/static_mutex.hpp"
typedef posix_static_mutex static_mutex;






}
}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 2

namespace asio {
namespace detail {

struct signal_state
{

  static_mutex mutex_;


  int read_descriptor_;


  int write_descriptor_;


  bool fork_prepared_;


  class signal_set_service* service_list_;


  std::size_t registration_count_[max_signal_number];
};

signal_state* get_signal_state()
{
  static signal_state state = {
    { 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
   { { 0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, { __null, __null } } } 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
   }, -1, -1, false, 0, { 0 } };
  return &state;
}

void asio_signal_handler(int signal_number)
{







  int saved_errno = 
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                   (*__errno_location ())
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                        ;
  signal_state* state = get_signal_state();
  signed_size_type result = ::write(state->write_descriptor_,
      &signal_number, sizeof(signal_number));
  (void)result;
  
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
 (*__errno_location ()) 
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
       = saved_errno;







}




class signal_set_service::pipe_read_op : public reactor_op
{
public:
  pipe_read_op()
    : reactor_op(&pipe_read_op::do_perform, pipe_read_op::do_complete)
  {
  }

  static bool do_perform(reactor_op*)
  {
    signal_state* state = get_signal_state();

    int fd = state->read_descriptor_;
    int signal_number = 0;
    while (::read(fd, &signal_number, sizeof(int)) == sizeof(int))
      if (signal_number >= 0 && signal_number < max_signal_number)
        signal_set_service::deliver_signal(signal_number);

    return false;
  }

  static void do_complete(io_service_impl* , operation* base,
      const asio::error_code& ,
      std::size_t )
  {
    pipe_read_op* o(static_cast<pipe_read_op*>(base));
    delete o;
  }
};




signal_set_service::signal_set_service(
    asio::io_service& io_service)
  : io_service_(asio::use_service<io_service_impl>(io_service)),



    reactor_(asio::use_service<reactor>(io_service)),



    next_(0),
    prev_(0)
{
  get_signal_state()->mutex_.init();




  reactor_.init_task();




  for (int i = 0; i < max_signal_number; ++i)
    registrations_[i] = 0;

  add_service(this);
}

signal_set_service::~signal_set_service()
{
  remove_service(this);
}

void signal_set_service::shutdown_service()
{
  remove_service(this);

  op_queue<operation> ops;

  for (int i = 0; i < max_signal_number; ++i)
  {
    registration* reg = registrations_[i];
    while (reg)
    {
      ops.push(*reg->queue_);
      reg = reg->next_in_table_;
    }
  }

  io_service_.abandon_operations(ops);
}

void signal_set_service::fork_service(
    asio::io_service::fork_event fork_ev)
{



  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);

  switch (fork_ev)
  {
  case asio::io_service::fork_prepare:
    {
      int read_descriptor = state->read_descriptor_;
      state->fork_prepared_ = true;
      lock.unlock();
      reactor_.deregister_internal_descriptor(read_descriptor, reactor_data_);
    }
    break;
  case asio::io_service::fork_parent:
    if (state->fork_prepared_)
    {
      int read_descriptor = state->read_descriptor_;
      state->fork_prepared_ = false;
      lock.unlock();
      reactor_.register_internal_descriptor(reactor::read_op,
          read_descriptor, reactor_data_, new pipe_read_op);
    }
    break;
  case asio::io_service::fork_child:
    if (state->fork_prepared_)
    {
      asio::detail::signal_blocker blocker;
      close_descriptors();
      open_descriptors();
      int read_descriptor = state->read_descriptor_;
      state->fork_prepared_ = false;
      lock.unlock();
      reactor_.register_internal_descriptor(reactor::read_op,
          read_descriptor, reactor_data_, new pipe_read_op);
    }
    break;
  default:
    break;
  }







}

void signal_set_service::construct(
    signal_set_service::implementation_type& impl)
{
  impl.signals_ = 0;
}

void signal_set_service::destroy(
    signal_set_service::implementation_type& impl)
{
  asio::error_code ignored_ec;
  clear(impl, ignored_ec);
  cancel(impl, ignored_ec);
}

asio::error_code signal_set_service::add(
    signal_set_service::implementation_type& impl,
    int signal_number, asio::error_code& ec)
{

  if (signal_number < 0 || signal_number >= max_signal_number)
  {
    ec = asio::error::invalid_argument;
    return ec;
  }

  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);


  registration** insertion_point = &impl.signals_;
  registration* next = impl.signals_;
  while (next && next->signal_number_ < signal_number)
  {
    insertion_point = &next->next_in_set_;
    next = next->next_in_set_;
  }


  if (next == 0 || next->signal_number_ != signal_number)
  {
    registration* new_registration = new registration;



    if (state->registration_count_[signal_number] == 0)
    {

      using namespace std;
      struct sigaction sa;
      memset(&sa, 0, sizeof(sa));
      sa.
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
        __sigaction_handler.sa_handler 
# 276 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                   = asio_signal_handler;
      sigfillset(&sa.sa_mask);
      if (::sigaction(signal_number, &sa, 0) == -1)



      {



        ec = asio::error_code(
# 286 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                             (*__errno_location ())
# 286 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                  ,
            asio::error::get_system_category());

        delete new_registration;
        return ec;
      }
    }



    new_registration->signal_number_ = signal_number;
    new_registration->queue_ = &impl.queue_;
    new_registration->next_in_set_ = next;
    *insertion_point = new_registration;


    new_registration->next_in_table_ = registrations_[signal_number];
    if (registrations_[signal_number])
      registrations_[signal_number]->prev_in_table_ = new_registration;
    registrations_[signal_number] = new_registration;

    ++state->registration_count_[signal_number];
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code signal_set_service::remove(
    signal_set_service::implementation_type& impl,
    int signal_number, asio::error_code& ec)
{

  if (signal_number < 0 || signal_number >= max_signal_number)
  {
    ec = asio::error::invalid_argument;
    return ec;
  }

  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);


  registration** deletion_point = &impl.signals_;
  registration* reg = impl.signals_;
  while (reg && reg->signal_number_ < signal_number)
  {
    deletion_point = &reg->next_in_set_;
    reg = reg->next_in_set_;
  }

  if (reg != 0 && reg->signal_number_ == signal_number)
  {


    if (state->registration_count_[signal_number] == 1)
    {

      using namespace std;
      struct sigaction sa;
      memset(&sa, 0, sizeof(sa));
      sa.
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
        __sigaction_handler.sa_handler 
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                   = 
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                     ((__sighandler_t) 0)
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                            ;
      if (::sigaction(signal_number, &sa, 0) == -1)



      {



        ec = asio::error_code(
# 356 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                             (*__errno_location ())
# 356 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                  ,
            asio::error::get_system_category());

        return ec;
      }
    }



    *deletion_point = reg->next_in_set_;


    if (registrations_[signal_number] == reg)
      registrations_[signal_number] = reg->next_in_table_;
    if (reg->prev_in_table_)
      reg->prev_in_table_->next_in_table_ = reg->next_in_table_;
    if (reg->next_in_table_)
      reg->next_in_table_->prev_in_table_ = reg->prev_in_table_;

    --state->registration_count_[signal_number];

    delete reg;
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code signal_set_service::clear(
    signal_set_service::implementation_type& impl,
    asio::error_code& ec)
{
  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);

  while (registration* reg = impl.signals_)
  {


    if (state->registration_count_[reg->signal_number_] == 1)
    {

      using namespace std;
      struct sigaction sa;
      memset(&sa, 0, sizeof(sa));
      sa.
# 401 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
        __sigaction_handler.sa_handler 
# 401 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                   = 
# 401 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                     ((__sighandler_t) 0)
# 401 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                            ;
      if (::sigaction(reg->signal_number_, &sa, 0) == -1)



      {



        ec = asio::error_code(
# 410 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                             (*__errno_location ())
# 410 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                  ,
            asio::error::get_system_category());

        return ec;
      }
    }



    if (registrations_[reg->signal_number_] == reg)
      registrations_[reg->signal_number_] = reg->next_in_table_;
    if (reg->prev_in_table_)
      reg->prev_in_table_->next_in_table_ = reg->next_in_table_;
    if (reg->next_in_table_)
      reg->next_in_table_->prev_in_table_ = reg->prev_in_table_;

    --state->registration_count_[reg->signal_number_];

    impl.signals_ = reg->next_in_set_;
    delete reg;
  }

  ec = asio::error_code();
  return ec;
}

asio::error_code signal_set_service::cancel(
    signal_set_service::implementation_type& impl,
    asio::error_code& ec)
{
  (void)0;

  op_queue<operation> ops;
  {
    signal_state* state = get_signal_state();
    static_mutex::scoped_lock lock(state->mutex_);

    while (signal_op* op = impl.queue_.front())
    {
      op->ec_ = asio::error::operation_aborted;
      impl.queue_.pop();
      ops.push(op);
    }
  }

  io_service_.post_deferred_completions(ops);

  ec = asio::error_code();
  return ec;
}

void signal_set_service::deliver_signal(int signal_number)
{
  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);

  signal_set_service* service = state->service_list_;
  while (service)
  {
    op_queue<operation> ops;

    registration* reg = service->registrations_[signal_number];
    while (reg)
    {
      if (reg->queue_->empty())
      {
        ++reg->undelivered_;
      }
      else
      {
        while (signal_op* op = reg->queue_->front())
        {
          op->signal_number_ = signal_number;
          reg->queue_->pop();
          ops.push(op);
        }
      }

      reg = reg->next_in_table_;
    }

    service->io_service_.post_deferred_completions(ops);

    service = service->next_;
  }
}

void signal_set_service::add_service(signal_set_service* service)
{
  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);



  if (state->service_list_ == 0)
    open_descriptors();



  service->next_ = state->service_list_;
  service->prev_ = 0;
  if (state->service_list_)
    state->service_list_->prev_ = service;
  state->service_list_ = service;





  int read_descriptor = state->read_descriptor_;
  lock.unlock();
  service->reactor_.register_internal_descriptor(reactor::read_op,
      read_descriptor, service->reactor_data_, new pipe_read_op);



}

void signal_set_service::remove_service(signal_set_service* service)
{
  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);

  if (service->next_ || service->prev_ || state->service_list_ == service)
  {




    int read_descriptor = state->read_descriptor_;
    lock.unlock();
    service->reactor_.deregister_descriptor(
        read_descriptor, service->reactor_data_, false);
    lock.lock();





    if (state->service_list_ == service)
      state->service_list_ = service->next_;
    if (service->prev_)
      service->prev_->next_ = service->next_;
    if (service->next_)
      service->next_->prev_= service->prev_;
    service->next_ = 0;
    service->prev_ = 0;



    if (state->service_list_ == 0)
      close_descriptors();

  }
}

void signal_set_service::open_descriptors()
{



  signal_state* state = get_signal_state();

  int pipe_fds[2];
  if (::pipe(pipe_fds) == 0)
  {
    state->read_descriptor_ = pipe_fds[0];
    ::fcntl(state->read_descriptor_, 
# 577 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                    4
# 577 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                           , 
# 577 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                             04000
# 577 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                                       );

    state->write_descriptor_ = pipe_fds[1];
    ::fcntl(state->write_descriptor_, 
# 580 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                     4
# 580 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                            , 
# 580 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                              04000
# 580 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                                        );


    ::fcntl(state->read_descriptor_, 
# 583 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                    2
# 583 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                           , 
# 583 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                             1
# 583 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                                       );
    ::fcntl(state->write_descriptor_, 
# 584 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                     2
# 584 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                            , 
# 584 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                                              1
# 584 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                                                        );

  }
  else
  {
    asio::error_code ec(
# 589 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 3 4
                       (*__errno_location ())
# 589 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp"
                            ,
        asio::error::get_system_category());
    asio::detail::throw_error(ec, "signal_set_service pipe");
  }



}

void signal_set_service::close_descriptors()
{



  signal_state* state = get_signal_state();

  if (state->read_descriptor_ != -1)
    ::close(state->read_descriptor_);
  state->read_descriptor_ = -1;

  if (state->write_descriptor_ != -1)
    ::close(state->write_descriptor_);
  state->write_descriptor_ = -1;



}

void signal_set_service::start_wait_op(
    signal_set_service::implementation_type& impl, signal_op* op)
{
  io_service_.work_started();

  signal_state* state = get_signal_state();
  static_mutex::scoped_lock lock(state->mutex_);

  registration* reg = impl.signals_;
  while (reg)
  {
    if (reg->undelivered_ > 0)
    {
      --reg->undelivered_;
      op->signal_number_ = reg->signal_number_;
      io_service_.post_deferred_completion(op);
      return;
    }

    reg = reg->next_in_set_;
  }

  impl.queue_.push(op);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 646 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/signal_set_service.ipp" 2
# 214 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/signal_set_service.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set_service.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set_service.hpp" 2

namespace asio {


class signal_set_service



  : public asio::detail::service_base<signal_set_service>

{
public:





public:




  typedef detail::signal_set_service::implementation_type implementation_type;



  explicit signal_set_service(asio::io_service& io_service)
    : asio::detail::service_base<signal_set_service>(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }


  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code add(implementation_type& impl,
      int signal_number, asio::error_code& ec)
  {
    return service_impl_.add(impl, signal_number, ec);
  }


  asio::error_code remove(implementation_type& impl,
      int signal_number, asio::error_code& ec)
  {
    return service_impl_.remove(impl, signal_number, ec);
  }


  asio::error_code clear(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.clear(impl, ec);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  template <typename SignalHandler>
  typename ::asio::async_result< typename ::asio::handler_type<SignalHandler, void (asio::error_code, int)>::type>::type

  async_wait(implementation_type& impl,
      SignalHandler&& handler)
  {
    detail::async_result_init<
      SignalHandler, void (asio::error_code, int)> init(
        static_cast<SignalHandler&&>(handler));

    service_impl_.async_wait(impl, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  void fork_service(asio::io_service::fork_event event)
  {
    service_impl_.fork_service(event);
  }


  detail::signal_set_service service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set_service.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp" 2

namespace asio {
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
template <typename SignalSetService = signal_set_service>
class basic_signal_set
  : public basic_io_object<SignalSetService>
{
public:







  explicit basic_signal_set(asio::io_service& io_service)
    : basic_io_object<SignalSetService>(io_service)
  {
  }
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  basic_signal_set(asio::io_service& io_service, int signal_number_1)
    : basic_io_object<SignalSetService>(io_service)
  {
    asio::error_code ec;
    this->service.add(this->implementation, signal_number_1, ec);
    asio::detail::throw_error(ec, "add");
  }
# 146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  basic_signal_set(asio::io_service& io_service, int signal_number_1,
      int signal_number_2)
    : basic_io_object<SignalSetService>(io_service)
  {
    asio::error_code ec;
    this->service.add(this->implementation, signal_number_1, ec);
    asio::detail::throw_error(ec, "add");
    this->service.add(this->implementation, signal_number_2, ec);
    asio::detail::throw_error(ec, "add");
  }
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  basic_signal_set(asio::io_service& io_service, int signal_number_1,
      int signal_number_2, int signal_number_3)
    : basic_io_object<SignalSetService>(io_service)
  {
    asio::error_code ec;
    this->service.add(this->implementation, signal_number_1, ec);
    asio::detail::throw_error(ec, "add");
    this->service.add(this->implementation, signal_number_2, ec);
    asio::detail::throw_error(ec, "add");
    this->service.add(this->implementation, signal_number_3, ec);
    asio::detail::throw_error(ec, "add");
  }
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  void add(int signal_number)
  {
    asio::error_code ec;
    this->service.add(this->implementation, signal_number, ec);
    asio::detail::throw_error(ec, "add");
  }
# 214 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  asio::error_code add(int signal_number,
      asio::error_code& ec)
  {
    return this->service.add(this->implementation, signal_number, ec);
  }
# 232 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  void remove(int signal_number)
  {
    asio::error_code ec;
    this->service.remove(this->implementation, signal_number, ec);
    asio::detail::throw_error(ec, "remove");
  }
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  asio::error_code remove(int signal_number,
      asio::error_code& ec)
  {
    return this->service.remove(this->implementation, signal_number, ec);
  }
# 266 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  void clear()
  {
    asio::error_code ec;
    this->service.clear(this->implementation, ec);
    asio::detail::throw_error(ec, "clear");
  }
# 282 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  asio::error_code clear(asio::error_code& ec)
  {
    return this->service.clear(this->implementation, ec);
  }
# 308 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  void cancel()
  {
    asio::error_code ec;
    this->service.cancel(this->implementation, ec);
    asio::detail::throw_error(ec, "cancel");
  }
# 336 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  asio::error_code cancel(asio::error_code& ec)
  {
    return this->service.cancel(this->implementation, ec);
  }
# 366 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp"
  template <typename SignalHandler>
  typename ::asio::async_result< typename ::asio::handler_type<SignalHandler, void (asio::error_code, int)>::type>::type

  async_wait(SignalHandler&& handler)
  {


    typedef typename handler_type<SignalHandler, void(asio::error_code, int)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const int*>(0))) == 1, "SignalHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const int>()), char(0))> __attribute__((__unused__)) type_check;

    return this->service.async_wait(this->implementation,
        static_cast<SignalHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 383 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_acceptor_service.hpp" 1
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_acceptor_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_acceptor_service.hpp" 2

namespace asio {


template <typename Protocol>
class socket_acceptor_service



  : public asio::detail::service_base<socket_acceptor_service<Protocol> >

{
public:






  typedef Protocol protocol_type;


  typedef typename protocol_type::endpoint endpoint_type;

private:






  typedef detail::reactive_socket_service<Protocol> service_impl_type;


public:




  typedef typename service_impl_type::implementation_type implementation_type;






  typedef typename service_impl_type::native_handle_type native_type;






  typedef typename service_impl_type::native_handle_type native_handle_type;



  explicit socket_acceptor_service(asio::io_service& io_service)
    : asio::detail::service_base<
        socket_acceptor_service<Protocol> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      socket_acceptor_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  template <typename Protocol1>
  void converting_move_construct(implementation_type& impl,
      typename socket_acceptor_service<
        Protocol1>::implementation_type& other_impl,
      typename enable_if<is_convertible<
        Protocol1, Protocol>::value>::type* = 0)
  {
    service_impl_.template converting_move_construct<Protocol1>(
        impl, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code open(implementation_type& impl,
      const protocol_type& protocol, asio::error_code& ec)
  {
    return service_impl_.open(impl, protocol, ec);
  }


  asio::error_code assign(implementation_type& impl,
      const protocol_type& protocol, const native_handle_type& native_acceptor,
      asio::error_code& ec)
  {
    return service_impl_.assign(impl, protocol, native_acceptor, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  asio::error_code bind(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    return service_impl_.bind(impl, endpoint, ec);
  }



  asio::error_code listen(implementation_type& impl, int backlog,
      asio::error_code& ec)
  {
    return service_impl_.listen(impl, backlog, ec);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }


  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  template <typename SettableSocketOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSocketOption& option, asio::error_code& ec)
  {
    return service_impl_.set_option(impl, option, ec);
  }


  template <typename GettableSocketOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSocketOption& option, asio::error_code& ec) const
  {
    return service_impl_.get_option(impl, option, ec);
  }


  template <typename IoControlCommand>
  asio::error_code io_control(implementation_type& impl,
      IoControlCommand& command, asio::error_code& ec)
  {
    return service_impl_.io_control(impl, command, ec);
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return service_impl_.non_blocking(impl);
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.non_blocking(impl, mode, ec);
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return service_impl_.native_non_blocking(impl);
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.native_non_blocking(impl, mode, ec);
  }


  endpoint_type local_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.local_endpoint(impl, ec);
  }


  template <typename Protocol1, typename SocketService>
  asio::error_code accept(implementation_type& impl,
      basic_socket<Protocol1, SocketService>& peer,
      endpoint_type* peer_endpoint, asio::error_code& ec,
      typename enable_if<is_convertible<Protocol, Protocol1>::value>::type* = 0)
  {
    return service_impl_.accept(impl, peer, peer_endpoint, ec);
  }


  template <typename Protocol1, typename SocketService, typename AcceptHandler>
  typename ::asio::async_result< typename ::asio::handler_type<AcceptHandler, void (asio::error_code)>::type>::type

  async_accept(implementation_type& impl,
      basic_socket<Protocol1, SocketService>& peer,
      endpoint_type* peer_endpoint,
      AcceptHandler&& handler,
      typename enable_if<is_convertible<Protocol, Protocol1>::value>::type* = 0)
  {
    detail::async_result_init<
      AcceptHandler, void (asio::error_code)> init(
        static_cast<AcceptHandler&&>(handler));

    service_impl_.async_accept(impl, peer, peer_endpoint, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 301 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_acceptor_service.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp" 2

namespace asio {
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
template <typename Protocol,
    typename SocketAcceptorService = socket_acceptor_service<Protocol> >
class basic_socket_acceptor
  : public basic_io_object<SocketAcceptorService>,
    public socket_base
{
public:


  typedef typename SocketAcceptorService::native_handle_type native_type;


  typedef typename SocketAcceptorService::native_handle_type native_handle_type;


  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  explicit basic_socket_acceptor(asio::io_service& io_service)
    : basic_io_object<SocketAcceptorService>(io_service)
  {
  }
# 99 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  basic_socket_acceptor(asio::io_service& io_service,
      const protocol_type& protocol)
    : basic_io_object<SocketAcceptorService>(io_service)
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), protocol, ec);
    asio::detail::throw_error(ec, "open");
  }
# 135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  basic_socket_acceptor(asio::io_service& io_service,
      const endpoint_type& endpoint, bool reuse_addr = true)
    : basic_io_object<SocketAcceptorService>(io_service)
  {
    asio::error_code ec;
    const protocol_type protocol = endpoint.protocol();
    this->get_service().open(this->get_implementation(), protocol, ec);
    asio::detail::throw_error(ec, "open");
    if (reuse_addr)
    {
      this->get_service().set_option(this->get_implementation(),
          socket_base::reuse_address(true), ec);
      asio::detail::throw_error(ec, "set_option");
    }
    this->get_service().bind(this->get_implementation(), endpoint, ec);
    asio::detail::throw_error(ec, "bind");
    this->get_service().listen(this->get_implementation(),
        socket_base::max_connections, ec);
    asio::detail::throw_error(ec, "listen");
  }
# 171 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  basic_socket_acceptor(asio::io_service& io_service,
      const protocol_type& protocol, const native_handle_type& native_acceptor)
    : basic_io_object<SocketAcceptorService>(io_service)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        protocol, native_acceptor, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  basic_socket_acceptor(basic_socket_acceptor&& other)
    : basic_io_object<SocketAcceptorService>(
        static_cast<basic_socket_acceptor&&>(other))
  {
  }
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  basic_socket_acceptor& operator=(basic_socket_acceptor&& other)
  {
    basic_io_object<SocketAcceptorService>::operator=(
        static_cast<basic_socket_acceptor&&>(other));
    return *this;
  }


  template <typename Protocol1, typename SocketAcceptorService1>
  friend class basic_socket_acceptor;
# 230 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename Protocol1, typename SocketAcceptorService1>
  basic_socket_acceptor(
      basic_socket_acceptor<Protocol1, SocketAcceptorService1>&& other,
      typename enable_if<is_convertible<Protocol1, Protocol>::value>::type* = 0)
    : basic_io_object<SocketAcceptorService>(other.get_io_service())
  {
    this->get_service().template converting_move_construct<Protocol1>(
        this->get_implementation(), other.get_implementation());
  }
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename Protocol1, typename SocketAcceptorService1>
  typename enable_if<is_convertible<Protocol1, Protocol>::value,
      basic_socket_acceptor>::type& operator=(
        basic_socket_acceptor<Protocol1, SocketAcceptorService1>&& other)
  {
    basic_socket_acceptor tmp(static_cast<basic_socket_acceptor< Protocol1, SocketAcceptorService1>&&>
                                               (other));
    basic_io_object<SocketAcceptorService>::operator=(
        static_cast<basic_socket_acceptor&&>(tmp));
    return *this;
  }
# 279 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void open(const protocol_type& protocol = protocol_type())
  {
    asio::error_code ec;
    this->get_service().open(this->get_implementation(), protocol, ec);
    asio::detail::throw_error(ec, "open");
  }
# 306 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code open(const protocol_type& protocol,
      asio::error_code& ec)
  {
    return this->get_service().open(this->get_implementation(), protocol, ec);
  }
# 322 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void assign(const protocol_type& protocol,
      const native_handle_type& native_acceptor)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        protocol, native_acceptor, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 341 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code assign(const protocol_type& protocol,
      const native_handle_type& native_acceptor, asio::error_code& ec)
  {
    return this->get_service().assign(this->get_implementation(),
        protocol, native_acceptor, ec);
  }


  bool is_open() const
  {
    return this->get_service().is_open(this->get_implementation());
  }
# 372 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void bind(const endpoint_type& endpoint)
  {
    asio::error_code ec;
    this->get_service().bind(this->get_implementation(), endpoint, ec);
    asio::detail::throw_error(ec, "bind");
  }
# 402 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code bind(const endpoint_type& endpoint,
      asio::error_code& ec)
  {
    return this->get_service().bind(this->get_implementation(), endpoint, ec);
  }
# 418 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void listen(int backlog = socket_base::max_connections)
  {
    asio::error_code ec;
    this->get_service().listen(this->get_implementation(), backlog, ec);
    asio::detail::throw_error(ec, "listen");
  }
# 447 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code listen(int backlog, asio::error_code& ec)
  {
    return this->get_service().listen(this->get_implementation(), backlog, ec);
  }
# 462 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void close()
  {
    asio::error_code ec;
    this->get_service().close(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "close");
  }
# 491 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code close(asio::error_code& ec)
  {
    return this->get_service().close(this->get_implementation(), ec);
  }







  native_type native()
  {
    return this->get_service().native_handle(this->get_implementation());
  }







  native_handle_type native_handle()
  {
    return this->get_service().native_handle(this->get_implementation());
  }
# 526 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void cancel()
  {
    asio::error_code ec;
    this->get_service().cancel(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "cancel");
  }
# 541 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code cancel(asio::error_code& ec)
  {
    return this->get_service().cancel(this->get_implementation(), ec);
  }
# 567 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename SettableSocketOption>
  void set_option(const SettableSocketOption& option)
  {
    asio::error_code ec;
    this->get_service().set_option(this->get_implementation(), option, ec);
    asio::detail::throw_error(ec, "set_option");
  }
# 601 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename SettableSocketOption>
  asio::error_code set_option(const SettableSocketOption& option,
      asio::error_code& ec)
  {
    return this->get_service().set_option(
        this->get_implementation(), option, ec);
  }
# 631 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename GettableSocketOption>
  void get_option(GettableSocketOption& option)
  {
    asio::error_code ec;
    this->get_service().get_option(this->get_implementation(), option, ec);
    asio::detail::throw_error(ec, "get_option");
  }
# 666 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename GettableSocketOption>
  asio::error_code get_option(GettableSocketOption& option,
      asio::error_code& ec)
  {
    return this->get_service().get_option(
        this->get_implementation(), option, ec);
  }
# 694 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename IoControlCommand>
  void io_control(IoControlCommand& command)
  {
    asio::error_code ec;
    this->get_service().io_control(this->get_implementation(), command, ec);
    asio::detail::throw_error(ec, "io_control");
  }
# 727 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename IoControlCommand>
  asio::error_code io_control(IoControlCommand& command,
      asio::error_code& ec)
  {
    return this->get_service().io_control(
        this->get_implementation(), command, ec);
  }
# 746 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  bool non_blocking() const
  {
    return this->get_service().non_blocking(this->get_implementation());
  }
# 764 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void non_blocking(bool mode)
  {
    asio::error_code ec;
    this->get_service().non_blocking(this->get_implementation(), mode, ec);
    asio::detail::throw_error(ec, "non_blocking");
  }
# 784 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code non_blocking(
      bool mode, asio::error_code& ec)
  {
    return this->get_service().non_blocking(
        this->get_implementation(), mode, ec);
  }
# 805 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  bool native_non_blocking() const
  {
    return this->get_service().native_non_blocking(this->get_implementation());
  }
# 825 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  void native_non_blocking(bool mode)
  {
    asio::error_code ec;
    this->get_service().native_non_blocking(
        this->get_implementation(), mode, ec);
    asio::detail::throw_error(ec, "native_non_blocking");
  }
# 848 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  asio::error_code native_non_blocking(
      bool mode, asio::error_code& ec)
  {
    return this->get_service().native_non_blocking(
        this->get_implementation(), mode, ec);
  }
# 870 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  endpoint_type local_endpoint() const
  {
    asio::error_code ec;
    endpoint_type ep = this->get_service().local_endpoint(
        this->get_implementation(), ec);
    asio::detail::throw_error(ec, "local_endpoint");
    return ep;
  }
# 901 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  endpoint_type local_endpoint(asio::error_code& ec) const
  {
    return this->get_service().local_endpoint(this->get_implementation(), ec);
  }
# 924 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename Protocol1, typename SocketService>
  void accept(basic_socket<Protocol1, SocketService>& peer,
      typename enable_if<is_convertible<Protocol, Protocol1>::value>::type* = 0)
  {
    asio::error_code ec;
    this->get_service().accept(this->get_implementation(),
        peer, static_cast<endpoint_type*>(0), ec);
    asio::detail::throw_error(ec, "accept");
  }
# 957 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename Protocol1, typename SocketService>
  asio::error_code accept(
      basic_socket<Protocol1, SocketService>& peer,
      asio::error_code& ec,
      typename enable_if<is_convertible<Protocol, Protocol1>::value>::type* = 0)
  {
    return this->get_service().accept(this->get_implementation(),
        peer, static_cast<endpoint_type*>(0), ec);
  }
# 1005 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename Protocol1, typename SocketService, typename AcceptHandler>
  typename ::asio::async_result< typename ::asio::handler_type<AcceptHandler, void (asio::error_code)>::type>::type

  async_accept(basic_socket<Protocol1, SocketService>& peer,
      AcceptHandler&& handler,
      typename enable_if<is_convertible<Protocol, Protocol1>::value>::type* = 0)
  {


    typedef typename handler_type<AcceptHandler, void(asio::error_code)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::one_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0))) == 1, "AcceptHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_accept(this->get_implementation(),
        peer, static_cast<endpoint_type*>(0),
        static_cast<AcceptHandler&&>(handler));
  }
# 1044 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename SocketService>
  void accept(basic_socket<protocol_type, SocketService>& peer,
      endpoint_type& peer_endpoint)
  {
    asio::error_code ec;
    this->get_service().accept(this->get_implementation(),
        peer, &peer_endpoint, ec);
    asio::detail::throw_error(ec, "accept");
  }
# 1082 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename SocketService>
  asio::error_code accept(
      basic_socket<protocol_type, SocketService>& peer,
      endpoint_type& peer_endpoint, asio::error_code& ec)
  {
    return this->get_service().accept(
        this->get_implementation(), peer, &peer_endpoint, ec);
  }
# 1117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp"
  template <typename SocketService, typename AcceptHandler>
  typename ::asio::async_result< typename ::asio::handler_type<AcceptHandler, void (asio::error_code)>::type>::type

  async_accept(basic_socket<protocol_type, SocketService>& peer,
      endpoint_type& peer_endpoint, AcceptHandler&& handler)
  {


    typedef typename handler_type<AcceptHandler, void(asio::error_code)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::one_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0))) == 1, "AcceptHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_accept(this->get_implementation(), peer,
        &peer_endpoint, static_cast<AcceptHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 1135 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp" 2
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
# 1 "/usr/include/c++/15/istream" 1 3
# 42 "/usr/include/c++/15/istream" 3
# 1 "/usr/include/c++/15/ios" 1 3
# 46 "/usr/include/c++/15/ios" 3
# 1 "/usr/include/c++/15/bits/ios_base.h" 1 3
# 43 "/usr/include/c++/15/bits/ios_base.h" 3
# 1 "/usr/include/c++/15/bits/locale_classes.h" 1 3
# 49 "/usr/include/c++/15/bits/locale_classes.h" 3

# 49 "/usr/include/c++/15/bits/locale_classes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/15/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend const _Facet*
      __try_use_facet(const locale&) noexcept;

    template<typename _Cache>
      friend struct __use_cache;
# 108 "/usr/include/c++/15/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 127 "/usr/include/c++/15/bits/locale_classes.h" 3
    locale() throw();
# 136 "/usr/include/c++/15/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 146 "/usr/include/c++/15/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 161 "/usr/include/c++/15/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 172 "/usr/include/c++/15/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 187 "/usr/include/c++/15/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 202 "/usr/include/c++/15/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 215 "/usr/include/c++/15/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 229 "/usr/include/c++/15/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 244 "/usr/include/c++/15/bits/locale_classes.h" 3
    template<typename _Facet>
      [[__nodiscard__]]
      locale
      combine(const locale& __other) const;






    [[__nodiscard__]] __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 275 "/usr/include/c++/15/bits/locale_classes.h" 3
    [[__nodiscard__]]
    bool
    operator==(const locale& __other) const throw();
# 286 "/usr/include/c++/15/bits/locale_classes.h" 3
    [[__nodiscard__]]
    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 307 "/usr/include/c++/15/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      [[__nodiscard__]]
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 324 "/usr/include/c++/15/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    [[__nodiscard__]]
    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 360 "/usr/include/c++/15/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 404 "/usr/include/c++/15/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 435 "/usr/include/c++/15/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 471 "/usr/include/c++/15/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 516 "/usr/include/c++/15/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet*
      __try_use_facet(const locale&) noexcept;




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend const _Facet*
      __try_use_facet(const locale&) noexcept;

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);




  };
# 686 "/usr/include/c++/15/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 713 "/usr/include/c++/15/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 727 "/usr/include/c++/15/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 744 "/usr/include/c++/15/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 763 "/usr/include/c++/15/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 777 "/usr/include/c++/15/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 806 "/usr/include/c++/15/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 820 "/usr/include/c++/15/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 833 "/usr/include/c++/15/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/15/bits/locale_classes.tcc" 1 3
# 43 "/usr/include/c++/15/bits/locale_classes.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wvariadic-macros"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {


      if (__builtin_expect(!__f, 0))
 {
   _M_impl = __other._M_impl;
   _M_impl->_M_add_reference();
   return;
 }

      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {




      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      delete[] __tmp->_M_names[0];
      __tmp->_M_names[0] = 0;
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Facet>
    inline const _Facet*
    __try_use_facet(const locale& __loc) noexcept
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;







      if constexpr (__is_same(const _Facet, const ctype<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_get<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_put<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const codecvt<char, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const collate<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<char, true>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_get<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_put<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const numpunct<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_get<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_put<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const messages<char>)) return static_cast<const _Facet*>(__facets[__i]);


      if constexpr (__is_same(const _Facet, const ctype<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const codecvt<wchar_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const collate<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<wchar_t, true>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const numpunct<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const messages<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);


      if constexpr (__is_same(const _Facet, const codecvt<char16_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const codecvt<char32_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);




      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
 return 0;


      return dynamic_cast<const _Facet*>(__facets[__i]);



    }
#pragma GCC diagnostic pop
# 187 "/usr/include/c++/15/bits/locale_classes.tcc" 3
  template<typename _Facet>
    [[__nodiscard__]]
    inline bool
    has_facet(const locale& __loc) noexcept
    {

      static_assert(__is_base_of(locale::facet, _Facet),
      "template argument must be derived from locale::facet");



      return std::__try_use_facet<_Facet>(__loc) != 0;
    }
# 215 "/usr/include/c++/15/bits/locale_classes.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdangling-reference"
  template<typename _Facet>
    [[__nodiscard__]]
    inline const _Facet&
    use_facet(const locale& __loc)
    {

      static_assert(__is_base_of(locale::facet, _Facet),
      "template argument must be derived from locale::facet");



      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
 return *__f;
      __throw_bad_cast();
    }
#pragma GCC diagnostic pop



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      struct _Buf
      {
 _Buf(size_t __n, void* __buf, int __e)
 : _M_c(__buf ? (_CharT*)__buf : new _CharT[__n]),
   _M_stackbuf(__buf),
   _M_errno(__e)
 { }

 ~_Buf()
 {
   if (_M_c != _M_stackbuf)
     delete[] _M_c;
   if ((*__errno_location ()) == 0)
     (*__errno_location ()) = _M_errno;
 }

 void _M_realloc(size_t __len)
 {
   _CharT* __p = new _CharT[__len];
   if (_M_c != _M_stackbuf)
     delete[] _M_c;
   _M_c = __p;
 }

 _CharT* _M_c;
 void* const _M_stackbuf;
 int _M_errno;
      };

      const size_t __bytes = __len * sizeof(_CharT);
      _Buf __buf(__len, __bytes <= 256 ? __builtin_alloca(__bytes) : 0, (*__errno_location ()));
      (*__errno_location ()) = 0;




      for (;;)
 {

   size_t __res = _M_transform(__buf._M_c, __p, __len);


   if (__res >= __len)
     {
       if (__builtin_expect((*__errno_location ()), 0))
  {

    __throw_system_error((*__errno_location ()));







  }

       __len = __res + 1;
       __buf._M_realloc(__len);
       __res = _M_transform(__buf._M_c, __p, __len);
     }

   __ret.append(__buf._M_c, __res);
   __p += char_traits<_CharT>::length(__p);
   if (__p == __pend)
     break;

   __p++;
   __ret.push_back(_CharT());
 }

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>*
    __try_use_facet<collate<char> >(const locale&) noexcept;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>*
    __try_use_facet<collate<wchar_t> >(const locale&) noexcept;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}

#pragma GCC diagnostic pop
# 897 "/usr/include/c++/15/bits/locale_classes.h" 2 3
# 44 "/usr/include/c++/15/bits/ios_base.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a) noexcept
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  constexpr
  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept
  { return __a = __a | __b; }

  constexpr
  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept
  { return __a = __a & __b; }

  constexpr
  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept
  { return __a = __a ^ __b; }
# 127 "/usr/include/c++/15/bits/ios_base.h" 3
  enum __attribute__((__flag_enum__)) _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_noreplace __attribute__((__unused__)) = 1L << 6,
      _S_ios_openmode_end __attribute__((__unused__)) = 1L << 16,
      _S_ios_openmode_max __attribute__((__unused__)) = 0x7fffffff,
      _S_ios_openmode_min __attribute__((__unused__)) = ~0x7fffffff
    };



  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b) noexcept
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b) noexcept
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b) noexcept
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator~(_Ios_Openmode __a) noexcept
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  constexpr
  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept
  { return __a = __a | __b; }

  constexpr
  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept
  { return __a = __a & __b; }

  constexpr
  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b) noexcept
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b) noexcept
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b) noexcept
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator~(_Ios_Iostate __a) noexcept
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  constexpr
  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept
  { return __a = __a | __b; }

  constexpr
  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept
  { return __a = __a & __b; }

  constexpr
  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  iostream_category() noexcept;

  [[__nodiscard__]]
  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  [[__nodiscard__]]
  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 265 "/usr/include/c++/15/bits/ios_base.h" 3
  class ios_base
  {
# 283 "/usr/include/c++/15/bits/ios_base.h" 3
  public:
# 292 "/usr/include/c++/15/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 378 "/usr/include/c++/15/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 453 "/usr/include/c++/15/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 484 "/usr/include/c++/15/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;

    static const openmode __noreplace = _S_noreplace;
# 523 "/usr/include/c++/15/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state
      ;
    typedef int open_mode
      ;
    typedef int seek_dir
      ;

    typedef std::streampos streampos
      ;
    typedef std::streamoff streamoff
      ;
# 556 "/usr/include/c++/15/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 573 "/usr/include/c++/15/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 585 "/usr/include/c++/15/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();


      Init(const Init&) = default;
      Init& operator=(const Init&) = default;


    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    [[__nodiscard__]]
    fmtflags
    flags() const
    { return _M_flags; }
# 704 "/usr/include/c++/15/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 720 "/usr/include/c++/15/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 737 "/usr/include/c++/15/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 763 "/usr/include/c++/15/bits/ios_base.h" 3
    [[__nodiscard__]]
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    [[__nodiscard__]]
    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 816 "/usr/include/c++/15/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 828 "/usr/include/c++/15/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 839 "/usr/include/c++/15/bits/ios_base.h" 3
    [[__nodiscard__]]
    locale
    getloc() const
    { return _M_ios_locale; }
# 851 "/usr/include/c++/15/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 870 "/usr/include/c++/15/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 886 "/usr/include/c++/15/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 907 "/usr/include/c++/15/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 924 "/usr/include/c++/15/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 938 "/usr/include/c++/15/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 47 "/usr/include/c++/15/ios" 2 3
# 1 "/usr/include/c++/15/streambuf" 1 3
# 49 "/usr/include/c++/15/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 125 "/usr/include/c++/15/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      friend void __istream_extract(istream&, char*, streamsize);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 217 "/usr/include/c++/15/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 234 "/usr/include/c++/15/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 247 "/usr/include/c++/15/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 259 "/usr/include/c++/15/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 271 "/usr/include/c++/15/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 292 "/usr/include/c++/15/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 306 "/usr/include/c++/15/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 324 "/usr/include/c++/15/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 346 "/usr/include/c++/15/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 365 "/usr/include/c++/15/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 380 "/usr/include/c++/15/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 405 "/usr/include/c++/15/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 432 "/usr/include/c++/15/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 458 "/usr/include/c++/15/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 472 "/usr/include/c++/15/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 490 "/usr/include/c++/15/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 506 "/usr/include/c++/15/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 517 "/usr/include/c++/15/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 537 "/usr/include/c++/15/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 553 "/usr/include/c++/15/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 563 "/usr/include/c++/15/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 584 "/usr/include/c++/15/streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 599 "/usr/include/c++/15/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 610 "/usr/include/c++/15/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 622 "/usr/include/c++/15/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 635 "/usr/include/c++/15/streambuf" 3
      virtual int
      sync() { return 0; }
# 657 "/usr/include/c++/15/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 673 "/usr/include/c++/15/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 695 "/usr/include/c++/15/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 708 "/usr/include/c++/15/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 732 "/usr/include/c++/15/streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 750 "/usr/include/c++/15/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 776 "/usr/include/c++/15/streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 791 "/usr/include/c++/15/streambuf" 3
     
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}

# 1 "/usr/include/c++/15/bits/streambuf.tcc" 1 3
# 41 "/usr/include/c++/15/bits/streambuf.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;

  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);


  extern template class basic_streambuf<wchar_t>;

  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);




}

#pragma GCC diagnostic pop
# 863 "/usr/include/c++/15/streambuf" 2 3
# 48 "/usr/include/c++/15/ios" 2 3
# 1 "/usr/include/c++/15/bits/basic_ios.h" 1 3
# 39 "/usr/include/c++/15/bits/basic_ios.h" 3
# 1 "/usr/include/c++/15/bits/locale_facets.h" 1 3
# 41 "/usr/include/c++/15/bits/locale_facets.h" 3
# 1 "/usr/include/c++/15/cwctype" 1 3
# 55 "/usr/include/c++/15/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) noexcept (true);





extern int iswalpha (wint_t __wc) noexcept (true);


extern int iswcntrl (wint_t __wc) noexcept (true);



extern int iswdigit (wint_t __wc) noexcept (true);



extern int iswgraph (wint_t __wc) noexcept (true);




extern int iswlower (wint_t __wc) noexcept (true);


extern int iswprint (wint_t __wc) noexcept (true);




extern int iswpunct (wint_t __wc) noexcept (true);




extern int iswspace (wint_t __wc) noexcept (true);




extern int iswupper (wint_t __wc) noexcept (true);




extern int iswxdigit (wint_t __wc) noexcept (true);





extern int iswblank (wint_t __wc) noexcept (true);
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) noexcept (true);



extern int iswctype (wint_t __wc, wctype_t __desc) noexcept (true);






extern wint_t towlower (wint_t __wc) noexcept (true);


extern wint_t towupper (wint_t __wc) noexcept (true);

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) noexcept (true);


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) noexcept (true);







extern int iswalnum_l (wint_t __wc, locale_t __locale) noexcept (true);





extern int iswalpha_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswcntrl_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswdigit_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswgraph_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswprint_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswpunct_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswspace_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswupper_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswxdigit_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswblank_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     noexcept (true);



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     noexcept (true);






extern wint_t towlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern wint_t towupper_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     noexcept (true);


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) noexcept (true);



}
# 56 "/usr/include/c++/15/cwctype" 2 3
# 82 "/usr/include/c++/15/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 42 "/usr/include/c++/15/bits/locale_facets.h" 2 3

# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/ctype_base.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/15/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 44 "/usr/include/c++/15/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/15/bits/streambuf_iterator.h" 1 3
# 41 "/usr/include/c++/15/bits/streambuf_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








 
# 51 "/usr/include/c++/15/bits/streambuf_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT>
    {
    public:
# 72 "/usr/include/c++/15/bits/streambuf_iterator.h" 3
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2, typename _Size>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_n_a(istreambuf_iterator<_CharT2>, _Size, _CharT2*, bool);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }







      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }


      istreambuf_iterator&
      operator=(const istreambuf_iterator&) noexcept = default;





      [[__nodiscard__]]
      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 163 "/usr/include/c++/15/bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      [[__nodiscard__]]
      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }







    };

  template<typename _CharT, typename _Traits>
    [[__nodiscard__]]
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }


  template<typename _CharT, typename _Traits>
    [[__nodiscard__]]
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }



  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:
# 286 "/usr/include/c++/15/bits/streambuf_iterator.h" 3
      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      [[__nodiscard__]]
      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      [[__nodiscard__]]
      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };
#pragma GCC diagnostic pop


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result,
        bool __strict __attribute__((__unused__)))
    {
      if (__n == 0)
 return __result;

     

                            ;
      _CharT* __beg = __result;
      __result += __it._M_sbuf->sgetn(__beg, __n);
     

                            ;
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

      do { if (std::__is_constant_evaluated() && !bool(__n > 0)) std::__glibcxx_assert_fail(); } while (false);
     

                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {
      

                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 51 "/usr/include/c++/15/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 154 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 173 "/usr/include/c++/15/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 190 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 206 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 222 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 236 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 251 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 265 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 280 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 297 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 316 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 335 "/usr/include/c++/15/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 357 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 382 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 401 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 420 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 439 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 457 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 474 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 490 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 507 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 526 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 547 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 568 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 593 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 616 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;



  template<typename _CharT, typename _Traits, typename _Alloc>
    class ctype<basic_string<_CharT, _Traits, _Alloc> >;
# 690 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 727 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 740 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 753 "/usr/include/c++/15/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 768 "/usr/include/c++/15/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 782 "/usr/include/c++/15/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 796 "/usr/include/c++/15/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 811 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 828 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 844 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 861 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 881 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 908 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 940 "/usr/include/c++/15/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 973 "/usr/include/c++/15/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1023 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1040 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1056 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1073 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1093 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1116 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1143 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1169 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1195 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1228 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1239 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1263 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1282 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1300 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1318 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1335 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1352 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1368 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1385 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1405 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1427 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1450 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1476 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/ctype_inline.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/15/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1549 "/usr/include/c++/15/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1679 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1717 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1731 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1745 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1758 "/usr/include/c++/15/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1789 "/usr/include/c++/15/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1802 "/usr/include/c++/15/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1815 "/usr/include/c++/15/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1832 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1844 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1857 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1870 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1883 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1961 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1982 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 2008 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2045 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
#pragma GCC diagnostic pop
# 2108 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2151 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2224 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }
#pragma GCC diagnostic pop


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;
# 2279 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2307 "/usr/include/c++/15/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2325 "/usr/include/c++/15/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2346 "/usr/include/c++/15/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2364 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2406 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
#pragma GCC diagnostic pop
# 2472 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2497 "/usr/include/c++/15/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2545 "/usr/include/c++/15/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }
#pragma GCC diagnostic pop


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;
# 2600 "/usr/include/c++/15/bits/locale_facets.h" 3
    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/15/bits/locale_facets.tcc" 1 3
# 36 "/usr/include/c++/15/bits/locale_facets.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 143 "/usr/include/c++/15/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 739 "/usr/include/c++/15/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;
#pragma GCC diagnostic pop

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }
# 802 "/usr/include/c++/15/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 996 "/usr/include/c++/15/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1069 "/usr/include/c++/15/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1194 "/usr/include/c++/15/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;
#pragma GCC diagnostic pop

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1234 "/usr/include/c++/15/bits/locale_facets.tcc" 3

# 1243 "/usr/include/c++/15/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>*
    __try_use_facet<ctype<char> >(const locale&) noexcept;

  extern template
    const numpunct<char>*
    __try_use_facet<numpunct<char> >(const locale&) noexcept;

  extern template
    const num_put<char>*
    __try_use_facet<num_put<char> >(const locale&) noexcept;

  extern template
    const num_get<char>*
    __try_use_facet<num_get<char> >(const locale&) noexcept;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>*
    __try_use_facet<ctype<wchar_t> >(const locale&) noexcept;

  extern template
    const numpunct<wchar_t>*
    __try_use_facet<numpunct<wchar_t> >(const locale&) noexcept;

  extern template
    const num_put<wchar_t>*
    __try_use_facet<num_put<wchar_t> >(const locale&) noexcept;

  extern template
    const num_get<wchar_t>*
    __try_use_facet<num_get<wchar_t> >(const locale&) noexcept;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}

#pragma GCC diagnostic pop
# 2702 "/usr/include/c++/15/bits/locale_facets.h" 2 3
# 40 "/usr/include/c++/15/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 68 "/usr/include/c++/15/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {




    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 123 "/usr/include/c++/15/bits/basic_ios.h" 3
      [[__nodiscard__]]
      explicit operator bool() const
      { return !this->fail(); }





      [[__nodiscard__]]
      bool
      operator!() const
      { return this->fail(); }
# 144 "/usr/include/c++/15/bits/basic_ios.h" 3
      [[__nodiscard__]]
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 156 "/usr/include/c++/15/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   { throw; }
      }







      [[__nodiscard__]]
      bool
      good() const
      { return this->rdstate() == 0; }







      [[__nodiscard__]]
      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 211 "/usr/include/c++/15/bits/basic_ios.h" 3
      [[__nodiscard__]]
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      [[__nodiscard__]]
      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 234 "/usr/include/c++/15/bits/basic_ios.h" 3
      [[__nodiscard__]]
      iostate
      exceptions() const
      { return _M_exception; }
# 270 "/usr/include/c++/15/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 308 "/usr/include/c++/15/bits/basic_ios.h" 3
      [[__nodiscard__]]
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 321 "/usr/include/c++/15/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      [[__nodiscard__]]
      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 362 "/usr/include/c++/15/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 376 "/usr/include/c++/15/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      [[__nodiscard__]]
      char_type
      fill() const
      {
 if (__builtin_expect(!_M_fill_init, false))
   return this->widen(' ');
 return _M_fill;
      }
# 403 "/usr/include/c++/15/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = _M_fill;
 _M_fill = __ch;
 _M_fill_init = true;
 return __old;
      }
# 424 "/usr/include/c++/15/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 444 "/usr/include/c++/15/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 463 "/usr/include/c++/15/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/15/bits/basic_ios.tcc" 1 3
# 37 "/usr/include/c++/15/bits/basic_ios.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
 _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != std::__addressof(__rhs))
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 153 "/usr/include/c++/15/bits/basic_ios.tcc" 3
      if (_M_ctype)
 {
   _M_fill = _M_ctype->widen(' ');
   _M_fill_init = true;
 }
      else
 _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      _M_ctype = std::__try_use_facet<__ctype_type>(__loc);
      _M_num_put = std::__try_use_facet<__num_put_type>(__loc);
      _M_num_get = std::__try_use_facet<__num_get_type>(__loc);
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}

#pragma GCC diagnostic pop
# 532 "/usr/include/c++/15/bits/basic_ios.h" 2 3
# 49 "/usr/include/c++/15/ios" 2 3


# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 52 "/usr/include/c++/15/ios" 2 3
# 43 "/usr/include/c++/15/istream" 2 3
# 1 "/usr/include/c++/15/ostream" 1 3
# 42 "/usr/include/c++/15/ostream" 3
# 1 "/usr/include/c++/15/bits/ostream.h" 1 3
# 47 "/usr/include/c++/15/bits/ostream.h" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 48 "/usr/include/c++/15/bits/ostream.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 65 "/usr/include/c++/15/bits/ostream.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
       __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 91 "/usr/include/c++/15/bits/ostream.h" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 115 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 173 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
#pragma GCC diagnostic pop
# 230 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(_S_cast_flt<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 300 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 338 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 371 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      put(char_type __c);
# 390 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 403 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      flush();
# 413 "/usr/include/c++/15/bits/ostream.h" 3
      pos_type
      tellp();
# 424 "/usr/include/c++/15/bits/ostream.h" 3
      __ostream_type&
      seekp(pos_type);
# 436 "/usr/include/c++/15/bits/ostream.h" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);

    private:

      void
      _M_write(const char_type* __s, streamsize __n)
      { std::__ostream_insert(*this, __s, __n); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      template<typename _To, typename _From>
 static _To
 _S_cast_flt(_From __f)
 {
   _To __d = static_cast<_To>(__f);
# 507 "/usr/include/c++/15/bits/ostream.h" 3
   return __d;
 }
#pragma GCC diagnostic pop


      struct _Disable_exceptions
      {
 _Disable_exceptions(basic_ostream& __os)
 : _M_os(__os), _M_exception(_M_os._M_exception)
 { _M_os._M_exception = ios_base::goodbit; }

 ~_Disable_exceptions()
 { _M_os._M_exception = _M_exception; }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"
 _Disable_exceptions(const _Disable_exceptions&) = delete;
 _Disable_exceptions& operator=(const _Disable_exceptions&) = delete;
#pragma GCC diagnostic pop

      private:
 basic_ostream& _M_os;
 const ios_base::iostate _M_exception;
      };
    };
# 540 "/usr/include/c++/15/bits/ostream.h" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 559 "/usr/include/c++/15/bits/ostream.h" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"







      ~sentry()
      {




 if (bool(_M_os.flags() & ios_base::unitbuf) && _M_os.good()
       && !uncaught_exception())
   {
     _Disable_exceptions __noex(_M_os);
     try
       {


  if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
    _M_os.setstate(ios_base::badbit);
       }
     catch(...)
       { _M_os.setstate(ios_base::badbit); }
   }
      }
#pragma GCC diagnostic pop
# 602 "/usr/include/c++/15/bits/ostream.h" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 624 "/usr/include/c++/15/bits/ostream.h" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    {
      if (__out.width() != 0)
 return __ostream_insert(__out, &__c, 1);
      __out.put(__c);
      return __out;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    {
      if (__out.width() != 0)
 return __ostream_insert(__out, &__c, 1);
      __out.put(__c);
      return __out;
    }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 715 "/usr/include/c++/15/bits/ostream.h" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<typename _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 812 "/usr/include/c++/15/bits/ostream.h" 3
  template<typename _Tp>
    using _Require_derived_from_ios_base
      = _Require<is_class<_Tp>, __not_<is_same<_Tp, ios_base>>,
   is_convertible<typename add_pointer<_Tp>::type, ios_base*>>;

  template<typename _Os, typename _Tp,
    typename = _Require_derived_from_ios_base<_Os>,
    typename
      = decltype(std::declval<_Os&>() << std::declval<const _Tp&>())>
    using __rvalue_stream_insertion_t = _Os&&;
# 834 "/usr/include/c++/15/bits/ostream.h" 3
  template<typename _Ostream, typename _Tp>
    inline __rvalue_stream_insertion_t<_Ostream, _Tp>
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __os << __x;
      return std::move(__os);
    }



}
# 43 "/usr/include/c++/15/ostream" 2 3





# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 49 "/usr/include/c++/15/ostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/15/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 76 "/usr/include/c++/15/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 291 "/usr/include/c++/15/ostream" 3

}

# 1 "/usr/include/c++/15/bits/ostream.tcc" 1 3
# 40 "/usr/include/c++/15/bits/ostream.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else if (__os.bad())
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {

  const __num_put_type& __np = __check_facet(this->_M_num_put);




  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (this->rdbuf()->sputn(__s, __n) != __n)
  __err = ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(ios_base::badbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {





      if (__streambuf_type* __buf = this->rdbuf())
 {
   sentry __cerb(*this);
   if (__cerb)
     {
       ios_base::iostate __err = ios_base::goodbit;
       try
  {
    if (this->rdbuf()->pubsync() == -1)
      __err |= ios_base::badbit;
  }
       catch(__cxxabiv1::__forced_unwind&)
  {
    this->_M_setstate(ios_base::badbit);
    throw;
  }
       catch(...)
  { this->_M_setstate(ios_base::badbit); }
       if (__err)
  this->setstate(__err);
     }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      sentry __cerb(*this);
      pos_type __ret = pos_type(-1);
      if (!this->fail())
 __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      sentry __cerb(*this);
      if (!this->fail())
 {


   const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);


   if (__p == pos_type(off_type(-1)))
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      sentry __cerb(*this);
      if (!this->fail())
 {


   const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
        ios_base::out);


   if (__p == pos_type(off_type(-1)))
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);
#pragma GCC diagnostic pop

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);
#pragma GCC diagnostic pop

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}

#pragma GCC diagnostic pop
# 295 "/usr/include/c++/15/ostream" 2 3
# 44 "/usr/include/c++/15/istream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 123 "/usr/include/c++/15/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 171 "/usr/include/c++/15/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
#pragma GCC diagnostic pop
# 220 "/usr/include/c++/15/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 329 "/usr/include/c++/15/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 353 "/usr/include/c++/15/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 363 "/usr/include/c++/15/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 396 "/usr/include/c++/15/istream" 3
      int_type
      get();
# 410 "/usr/include/c++/15/istream" 3
      __istream_type&
      get(char_type& __c);
# 437 "/usr/include/c++/15/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 448 "/usr/include/c++/15/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 471 "/usr/include/c++/15/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 481 "/usr/include/c++/15/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 510 "/usr/include/c++/15/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 521 "/usr/include/c++/15/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 545 "/usr/include/c++/15/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 562 "/usr/include/c++/15/istream" 3
      int_type
      peek();
# 580 "/usr/include/c++/15/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 599 "/usr/include/c++/15/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 616 "/usr/include/c++/15/istream" 3
      __istream_type&
      putback(char_type __c);
# 632 "/usr/include/c++/15/istream" 3
      __istream_type&
      unget();
# 650 "/usr/include/c++/15/istream" 3
      int
      sync();
# 665 "/usr/include/c++/15/istream" 3
      pos_type
      tellg();
# 680 "/usr/include/c++/15/istream" 3
      __istream_type&
      seekg(pos_type);
# 696 "/usr/include/c++/15/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 780 "/usr/include/c++/15/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 816 "/usr/include/c++/15/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 827 "/usr/include/c++/15/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 845 "/usr/include/c++/15/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }



  template<typename _CharT, typename _Traits>
    void
    __istream_extract(basic_istream<_CharT, _Traits>&, _CharT*, streamsize);

  void __istream_extract(istream&, char*, streamsize);
# 895 "/usr/include/c++/15/istream" 3
  template<typename _CharT, typename _Traits>
    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {



      size_t __n = __builtin_object_size(__s, 0);
      if (__n < sizeof(_CharT))
 {

   do { if (std::__is_constant_evaluated() && !bool(__n >= sizeof(_CharT))) std::__glibcxx_assert_fail(); } while (false);

   __in.width(0);
   __in.setstate(ios_base::failbit);
 }
      else if (__n != (size_t)-1)
 {
   __n /= sizeof(_CharT);
   streamsize __w = __in.width();
   std::__istream_extract(__in, __s, __n);
   if (__in.good() && (__w <= 0 || __n < (size_t)__w))
     {


       const typename _Traits::int_type __c = __in.rdbuf()->sgetc();
       const bool __eof = _Traits::eq_int_type(__c, _Traits::eof());
       if (__builtin_expect(__eof, true))
  __in.setstate(ios_base::eofbit);
     }
 }
      else

 {

   streamsize __n = __gnu_cxx::__numeric_traits<streamsize>::__max;
   __n /= sizeof(_CharT);
   std::__istream_extract(__in, __s, __n);
 }
      return __in;
    }

  template<class _Traits>
    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return __in >> reinterpret_cast<char*>(__s); }

  template<class _Traits>
    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return __in >> reinterpret_cast<char*>(__s); }
# 984 "/usr/include/c++/15/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 1067 "/usr/include/c++/15/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 1083 "/usr/include/c++/15/istream" 3
  template<typename _Is, typename _Tp,
    typename = _Require_derived_from_ios_base<_Is>,
    typename = decltype(std::declval<_Is&>() >> std::declval<_Tp>())>
    using __rvalue_stream_extraction_t = _Is&&;
# 1099 "/usr/include/c++/15/istream" 3
  template<typename _Istream, typename _Tp>
    inline __rvalue_stream_extraction_t<_Istream, _Tp>
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __is >> std::forward<_Tp>(__x);
      return std::move(__is);
    }



}

# 1 "/usr/include/c++/15/bits/istream.tcc" 1 3
# 41 "/usr/include/c++/15/bits/istream.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   try
     {
       if (__in.tie())
  __in.tie()->flush();
       if (!__noskip && bool(__in.flags() & ios_base::skipws))
  {
    const __int_type __eof = traits_type::eof();
    __streambuf_type* __sb = __in.rdbuf();
    __int_type __c = __sb->sgetc();

    const __ctype_type& __ct = __check_facet(__in._M_ctype);
    while (!traits_type::eq_int_type(__c, __eof)
    && __ct.is(ctype_base::space,
        traits_type::to_char_type(__c)))
      __c = __sb->snextc();




    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {

  const __num_get_type& __ng = __check_facet(this->_M_num_get);




  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;

       const __num_get_type& __ng = __check_facet(this->_M_num_get);




       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;

       const __num_get_type& __ng = __check_facet(this->_M_num_get);




       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
       unsigned long long __gcount = 0;
#pragma GCC diagnostic pop

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++__gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;


       if (__gcount <= __gnu_cxx::__numeric_traits<streamsize>::__max)
  _M_gcount = __gcount;
       else
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 553 "/usr/include/c++/15/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max)
  {
    if (__large_ignore)
      _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
  }
       else if (_M_gcount < __n)
  {
    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max)
  {
    if (__large_ignore)
      _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
    else
      {
        if (_M_gcount != __n)
   ++_M_gcount;
        __sb->sbumpc();
      }
  }
       else if (_M_gcount < __n)
  {
    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
    else
      {
        ++_M_gcount;
        __sb->sbumpc();
      }
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    void
    __istream_extract(basic_istream<_CharT, _Traits>& __in, _CharT* __s,
        streamsize __num)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __width = __in.width();
       if (0 < __width && __width < __num)
  __num = __width;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }

       if (__extracted < __num - 1
    && _Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;



      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       while (true)
  {
    if (_Traits::eq_int_type(__c, __eof))
      {
        __err = ios_base::eofbit;
        break;
      }
    if (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))
      break;
    __c = __sb->snextc();
  }
     }
   catch(const __cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     {
       __in._M_setstate(ios_base::badbit);
     }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);
#pragma GCC diagnostic pop

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template void __istream_extract(wistream&, wchar_t*, streamsize);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;

#pragma GCC diagnostic pop



}

#pragma GCC diagnostic pop
# 1112 "/usr/include/c++/15/istream" 2 3
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/deadline_timer_service.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/array.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/array.hpp"

# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/array.hpp"
namespace asio {
namespace detail {


using std::array;




}
}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp" 2

namespace asio {


template <typename Protocol>
class stream_socket_service



  : public asio::detail::service_base<stream_socket_service<Protocol> >

{
public:






  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;

private:






  typedef detail::reactive_socket_service<Protocol> service_impl_type;


public:




  typedef typename service_impl_type::implementation_type implementation_type;






  typedef typename service_impl_type::native_handle_type native_type;






  typedef typename service_impl_type::native_handle_type native_handle_type;



  explicit stream_socket_service(asio::io_service& io_service)
    : asio::detail::service_base<
        stream_socket_service<Protocol> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      stream_socket_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  template <typename Protocol1>
  void converting_move_construct(implementation_type& impl,
      typename stream_socket_service<
        Protocol1>::implementation_type& other_impl,
      typename enable_if<is_convertible<
        Protocol1, Protocol>::value>::type* = 0)
  {
    service_impl_.template converting_move_construct<Protocol1>(
        impl, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code open(implementation_type& impl,
      const protocol_type& protocol, asio::error_code& ec)
  {
    if (protocol.type() == 
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp" 3 4
                          SOCK_STREAM
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp"
                                                  )
      service_impl_.open(impl, protocol, ec);
    else
      ec = asio::error::invalid_argument;
    return ec;
  }


  asio::error_code assign(implementation_type& impl,
      const protocol_type& protocol, const native_handle_type& native_socket,
      asio::error_code& ec)
  {
    return service_impl_.assign(impl, protocol, native_socket, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }


  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  bool at_mark(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.at_mark(impl, ec);
  }


  std::size_t available(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.available(impl, ec);
  }


  asio::error_code bind(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    return service_impl_.bind(impl, endpoint, ec);
  }


  asio::error_code connect(implementation_type& impl,
      const endpoint_type& peer_endpoint, asio::error_code& ec)
  {
    return service_impl_.connect(impl, peer_endpoint, ec);
  }


  template <typename ConnectHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ConnectHandler, void (asio::error_code)>::type>::type

  async_connect(implementation_type& impl,
      const endpoint_type& peer_endpoint,
      ConnectHandler&& handler)
  {
    detail::async_result_init<
      ConnectHandler, void (asio::error_code)> init(
        static_cast<ConnectHandler&&>(handler));

    service_impl_.async_connect(impl, peer_endpoint, init.handler);

    return init.result.get();
  }


  template <typename SettableSocketOption>
  asio::error_code set_option(implementation_type& impl,
      const SettableSocketOption& option, asio::error_code& ec)
  {
    return service_impl_.set_option(impl, option, ec);
  }


  template <typename GettableSocketOption>
  asio::error_code get_option(const implementation_type& impl,
      GettableSocketOption& option, asio::error_code& ec) const
  {
    return service_impl_.get_option(impl, option, ec);
  }


  template <typename IoControlCommand>
  asio::error_code io_control(implementation_type& impl,
      IoControlCommand& command, asio::error_code& ec)
  {
    return service_impl_.io_control(impl, command, ec);
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return service_impl_.non_blocking(impl);
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.non_blocking(impl, mode, ec);
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return service_impl_.native_non_blocking(impl);
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.native_non_blocking(impl, mode, ec);
  }


  endpoint_type local_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.local_endpoint(impl, ec);
  }


  endpoint_type remote_endpoint(const implementation_type& impl,
      asio::error_code& ec) const
  {
    return service_impl_.remote_endpoint(impl, ec);
  }


  asio::error_code shutdown(implementation_type& impl,
      socket_base::shutdown_type what, asio::error_code& ec)
  {
    return service_impl_.shutdown(impl, what, ec);
  }


  template <typename ConstBufferSequence>
  std::size_t send(implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.send(impl, buffers, flags, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(implementation_type& impl,
      const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_send(impl, buffers, flags, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t receive(implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return service_impl_.receive(impl, buffers, flags, ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(implementation_type& impl,
      const MutableBufferSequence& buffers,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_receive(impl, buffers, flags, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 375 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/steady_timer.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/steady_timer.hpp"
# 1 "/usr/include/c++/15/chrono" 1 3
# 45 "/usr/include/c++/15/chrono" 3
# 1 "/usr/include/c++/15/bits/chrono.h" 1 3
# 39 "/usr/include/c++/15/bits/chrono.h" 3
# 1 "/usr/include/c++/15/ratio" 1 3
# 45 "/usr/include/c++/15/ratio" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 46 "/usr/include/c++/15/ratio" 2 3


# 47 "/usr/include/c++/15/ratio" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15/ratio" 3
  template<intmax_t _Pn>
    struct __static_sign
    : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>
    { };

  template<intmax_t _Pn>
    struct __static_abs
    : integral_constant<intmax_t, _Pn * __static_sign<_Pn>::value>
    { };

  template<intmax_t _Pn, intmax_t _Qn>
    struct __static_gcd
    : __static_gcd<_Qn, (_Pn % _Qn)>
    { };

  template<intmax_t _Pn>
    struct __static_gcd<_Pn, 0>
    : integral_constant<intmax_t, __static_abs<_Pn>::value>
    { };

  template<intmax_t _Qn>
    struct __static_gcd<0, _Qn>
    : integral_constant<intmax_t, __static_abs<_Qn>::value>
    { };







  template<intmax_t _Pn, intmax_t _Qn>
    struct __safe_multiply
    {
    private:
      static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);

      static const uintmax_t __a0 = __static_abs<_Pn>::value % __c;
      static const uintmax_t __a1 = __static_abs<_Pn>::value / __c;
      static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;
      static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;

      static_assert(__a1 == 0 || __b1 == 0,
      "overflow in multiplication");
      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1),
      "overflow in multiplication");
      static_assert(__b0 * __a0 <= 0x7fffffffffffffffL,
      "overflow in multiplication");
      static_assert((__a0 * __b1 + __b0 * __a1) * __c
      <= 0x7fffffffffffffffL - __b0 * __a0,
      "overflow in multiplication");

    public:
      static const intmax_t value = _Pn * _Qn;
    };



  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_less
    : integral_constant<bool, (__hi1 < __hi2
          || (__hi1 == __hi2 && __lo1 < __lo2))>
    { };

  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_add
    {
      static constexpr uintmax_t __lo = __lo1 + __lo2;
      static constexpr uintmax_t __hi = (__hi1 + __hi2 +
      (__lo1 + __lo2 < __lo1));
    };


  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_sub
    {
      static_assert(!__big_less<__hi1, __lo1, __hi2, __lo2>::value,
      "Internal library error");
      static constexpr uintmax_t __lo = __lo1 - __lo2;
      static constexpr uintmax_t __hi = (__hi1 - __hi2 -
      (__lo1 < __lo2));
    };


  template<uintmax_t __x, uintmax_t __y>
    struct __big_mul
    {
    private:
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __x0 = __x % __c;
      static constexpr uintmax_t __x1 = __x / __c;
      static constexpr uintmax_t __y0 = __y % __c;
      static constexpr uintmax_t __y1 = __y / __c;
      static constexpr uintmax_t __x0y0 = __x0 * __y0;
      static constexpr uintmax_t __x0y1 = __x0 * __y1;
      static constexpr uintmax_t __x1y0 = __x1 * __y0;
      static constexpr uintmax_t __x1y1 = __x1 * __y1;
      static constexpr uintmax_t __mix = __x0y1 + __x1y0;
      static constexpr uintmax_t __mix_lo = __mix * __c;
      static constexpr uintmax_t __mix_hi
      = __mix / __c + ((__mix < __x0y1) ? __c : 0);
      typedef __big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;
    public:
      static constexpr uintmax_t __hi = _Res::__hi;
      static constexpr uintmax_t __lo = _Res::__lo;
    };



  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div_impl
    {
    private:
      static_assert(__d >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)),
      "Internal library error");
      static_assert(__n1 < __d, "Internal library error");
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __d1 = __d / __c;
      static constexpr uintmax_t __d0 = __d % __c;

      static constexpr uintmax_t __q1x = __n1 / __d1;
      static constexpr uintmax_t __r1x = __n1 % __d1;
      static constexpr uintmax_t __m = __q1x * __d0;
      static constexpr uintmax_t __r1y = __r1x * __c + __n0 / __c;
      static constexpr uintmax_t __r1z = __r1y + __d;
      static constexpr uintmax_t __r1
      = ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m))
  ? (__r1z + __d) : __r1z : __r1y) - __m;
      static constexpr uintmax_t __q1
      = __q1x - ((__r1y < __m)
   ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0);
      static constexpr uintmax_t __q0x = __r1 / __d1;
      static constexpr uintmax_t __r0x = __r1 % __d1;
      static constexpr uintmax_t __n = __q0x * __d0;
      static constexpr uintmax_t __r0y = __r0x * __c + __n0 % __c;
      static constexpr uintmax_t __r0z = __r0y + __d;
      static constexpr uintmax_t __r0
      = ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n))
  ? (__r0z + __d) : __r0z : __r0y) - __n;
      static constexpr uintmax_t __q0
      = __q0x - ((__r0y < __n) ? ((__r0z >= __d)
      && (__r0z < __n)) ? 2 : 1 : 0);

    public:
      static constexpr uintmax_t __quot = __q1 * __c + __q0;
      static constexpr uintmax_t __rem = __r0;

    private:
      typedef __big_mul<__quot, __d> _Prod;
      typedef __big_add<_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;
      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
  };

  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div
    {
    private:
      static_assert(__d != 0, "Internal library error");
      static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),
      "This library calls __builtin_clzll on uintmax_t, which "
      "is unsafe on your platform. Please complain to "
      "http://gcc.gnu.org/bugzilla/");
      static constexpr int __shift = __builtin_clzll(__d);
      static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;
      static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;
      static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;
      static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;
      static constexpr uintmax_t __new_d = __d * __c1;
      static constexpr uintmax_t __new_n0 = __n0 * __c1;
      static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;
      static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;
      static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;
      typedef __big_div_impl<__new_n1, __new_n0, __new_d> _Res;

    public:
      static constexpr uintmax_t __quot_hi = __n1 / __d;
      static constexpr uintmax_t __quot_lo = _Res::__quot;
      static constexpr uintmax_t __rem = _Res::__rem / __c1;

    private:
      typedef __big_mul<__quot_lo, __d> _P0;
      typedef __big_mul<__quot_hi, __d> _P1;
      typedef __big_add<_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;

      static_assert(_P1::__hi == 0, "Internal library error");
      static_assert(_Sum::__hi >= _P0::__hi, "Internal library error");

      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
      static_assert(__rem < __d, "Internal library error");
    };
# 270 "/usr/include/c++/15/ratio" 3
  template<intmax_t _Num, intmax_t _Den = 1>
    struct ratio
    {
      static_assert(_Den != 0, "denominator cannot be zero");
      static_assert(_Num >= -0x7fffffffffffffffL && _Den >= -0x7fffffffffffffffL,
      "out of range");


      static constexpr intmax_t num =
        _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;

      static constexpr intmax_t den =
        __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;

      typedef ratio<num, den> type;
    };


  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::num;

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::den;




  template<typename _Tp>
    struct __is_ratio
    : std::false_type
    { };

  template<intmax_t _Num, intmax_t _Den>
    struct __is_ratio<ratio<_Num, _Den>>
    : std::true_type
    { };


  template<typename _Tp>
    constexpr bool __is_ratio_v = false;
  template<intmax_t _Num, intmax_t _Den>
    constexpr bool __is_ratio_v<ratio<_Num, _Den>> = true;


  template<typename _R1, typename _R2>
    constexpr bool
    __are_both_ratios() noexcept
    {






      return __and_<__is_ratio<_R1>, __is_ratio<_R2>>::value;

    }

  template<typename _R1, typename _R2>
    struct __ratio_multiply
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");

    private:
      static const intmax_t __gcd1 =
        __static_gcd<_R1::num, _R2::den>::value;
      static const intmax_t __gcd2 =
        __static_gcd<_R2::num, _R1::den>::value;

    public:
      typedef ratio<
        __safe_multiply<(_R1::num / __gcd1),
                        (_R2::num / __gcd2)>::value,
        __safe_multiply<(_R1::den / __gcd2),
                        (_R2::den / __gcd1)>::value> type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };


  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::den;





  template<typename _R1, typename _R2>
    using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;



  template<typename _R1, typename _R2>
    struct __ratio_divide
    {
      static_assert(_R2::num != 0, "division by 0");

      typedef typename __ratio_multiply<
        _R1,
        ratio<_R2::den, _R2::num>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };


  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::den;





  template<typename _R1, typename _R2>
    using ratio_divide = typename __ratio_divide<_R1, _R2>::type;


  template<typename _R1, typename _R2>
    struct ratio_equal
    : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");
    };


  template<typename _R1, typename _R2>
    struct ratio_not_equal
    : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
    { };




  template<typename _R1, typename _R2,
           typename _Left = __big_mul<_R1::num,_R2::den>,
           typename _Right = __big_mul<_R2::num,_R1::den> >
    struct __ratio_less_impl_1
    : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,
           _Right::__hi, _Right::__lo>::value>
    { };

  template<typename _R1, typename _R2,
    bool = (_R1::num == 0 || _R2::num == 0
     || (__static_sign<_R1::num>::value
         != __static_sign<_R2::num>::value)),
    bool = (__static_sign<_R1::num>::value == -1
     && __static_sign<_R2::num>::value == -1)>
    struct __ratio_less_impl
    : __ratio_less_impl_1<_R1, _R2>::type
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, true, false>
    : integral_constant<bool, _R1::num < _R2::num>
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, false, true>
    : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>,
           ratio<-_R1::num, _R1::den> >::type
    { };




  template<typename _R1, typename _R2>
    struct ratio_less
    : __ratio_less_impl<_R1, _R2>::type
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");
    };


  template<typename _R1, typename _R2>
    struct ratio_less_equal
    : integral_constant<bool, !ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater
    : integral_constant<bool, ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater_equal
    : integral_constant<bool, !ratio_less<_R1, _R2>::value>
    { };
# 489 "/usr/include/c++/15/ratio" 3
  template<typename _R1, typename _R2,
      bool = (_R1::num >= 0),
      bool = (_R2::num >= 0),
      bool = ratio_less<ratio<__static_abs<_R1::num>::value, _R1::den>,
        ratio<__static_abs<_R2::num>::value, _R2::den> >::value>
    struct __ratio_add_impl
    {
    private:
      typedef typename __ratio_add_impl<
        ratio<-_R1::num, _R1::den>,
        ratio<-_R2::num, _R2::den> >::type __t;
    public:
      typedef ratio<-__t::num, __t::den> type;
    };


  template<typename _R1, typename _R2, bool __b>
    struct __ratio_add_impl<_R1, _R2, true, true, __b>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<_R2::num, _R1::den / __g> __y;
      typedef __big_add<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      static_assert(__n::__hi >= __x::__hi, "Internal library error");
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 0x7fffffffffffffffL, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 0x7fffffffffffffffL, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, false, true, true>
    : __ratio_add_impl<_R2, _R1>
    { };


  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, true, false, false>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<-_R2::num, _R1::den / __g> __y;
      typedef __big_sub<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 0x7fffffffffffffffL, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 0x7fffffffffffffffL, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");

      typedef typename __ratio_add_impl<_R1, _R2>::type type;
      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };


  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::den;





  template<typename _R1, typename _R2>
    using ratio_add = typename __ratio_add<_R1, _R2>::type;



  template<typename _R1, typename _R2>
    struct __ratio_subtract
    {
      typedef typename __ratio_add<
        _R1,
        ratio<-_R2::num, _R2::den>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };


  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::den;





  template<typename _R1, typename _R2>
    using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;
# 620 "/usr/include/c++/15/ratio" 3
  using atto = ratio< 1, 1000000000000000000>;
  using femto = ratio< 1, 1000000000000000>;
  using pico = ratio< 1, 1000000000000>;
  using nano = ratio< 1, 1000000000>;
  using micro = ratio< 1, 1000000>;
  using milli = ratio< 1, 1000>;
  using centi = ratio< 1, 100>;
  using deci = ratio< 1, 10>;
  using deca = ratio< 10, 1>;
  using hecto = ratio< 100, 1>;
  using kilo = ratio< 1000, 1>;
  using mega = ratio< 1000000, 1>;
  using giga = ratio< 1000000000, 1>;
  using tera = ratio< 1000000000000, 1>;
  using peta = ratio< 1000000000000000, 1>;
  using exa = ratio< 1000000000000000000, 1>;
# 648 "/usr/include/c++/15/ratio" 3

}
# 40 "/usr/include/c++/15/bits/chrono.h" 2 3



# 1 "/usr/include/c++/15/ctime" 1 3
# 60 "/usr/include/c++/15/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 44 "/usr/include/c++/15/bits/chrono.h" 2 3

# 1 "/usr/include/c++/15/bits/parse_numbers.h" 1 3
# 44 "/usr/include/c++/15/bits/parse_numbers.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


namespace __parse_int
{
  template<unsigned _Base, char _Dig>
    struct _Digit;

  template<unsigned _Base>
    struct _Digit<_Base, '0'> : integral_constant<unsigned, 0>
    {
      using __valid = true_type;
    };

  template<unsigned _Base>
    struct _Digit<_Base, '1'> : integral_constant<unsigned, 1>
    {
      using __valid = true_type;
    };

  template<unsigned _Base, unsigned _Val>
    struct _Digit_impl : integral_constant<unsigned, _Val>
    {
      static_assert(_Base > _Val, "invalid digit");
      using __valid = true_type;
    };

  template<unsigned _Base>
    struct _Digit<_Base, '2'> : _Digit_impl<_Base, 2>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '3'> : _Digit_impl<_Base, 3>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '4'> : _Digit_impl<_Base, 4>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '5'> : _Digit_impl<_Base, 5>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '6'> : _Digit_impl<_Base, 6>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '7'> : _Digit_impl<_Base, 7>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '8'> : _Digit_impl<_Base, 8>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '9'> : _Digit_impl<_Base, 9>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'a'> : _Digit_impl<_Base, 0xa>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'A'> : _Digit_impl<_Base, 0xa>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'b'> : _Digit_impl<_Base, 0xb>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'B'> : _Digit_impl<_Base, 0xb>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'c'> : _Digit_impl<_Base, 0xc>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'C'> : _Digit_impl<_Base, 0xc>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'd'> : _Digit_impl<_Base, 0xd>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'D'> : _Digit_impl<_Base, 0xd>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'e'> : _Digit_impl<_Base, 0xe>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'E'> : _Digit_impl<_Base, 0xe>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'f'> : _Digit_impl<_Base, 0xf>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'F'> : _Digit_impl<_Base, 0xf>
    { };


  template<unsigned _Base>
    struct _Digit<_Base, '\''> : integral_constant<unsigned, 0>
    {
      using __valid = false_type;
    };



  template<unsigned long long _Val>
    using __ull_constant = integral_constant<unsigned long long, _Val>;

  template<unsigned _Base, char _Dig, char... _Digs>
    struct _Power_help
    {
      using __next = typename _Power_help<_Base, _Digs...>::type;
      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
      using type
 = __ull_constant<__next::value * (__valid_digit{} ? _Base : 1ULL)>;
    };

  template<unsigned _Base, char _Dig>
    struct _Power_help<_Base, _Dig>
    {
      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
      using type = __ull_constant<__valid_digit::value>;
    };

  template<unsigned _Base, char... _Digs>
    struct _Power : _Power_help<_Base, _Digs...>::type
    { };

  template<unsigned _Base>
    struct _Power<_Base> : __ull_constant<0>
    { };



  template<unsigned _Base, unsigned long long _Pow, char _Dig, char... _Digs>
    struct _Number_help
    {
      using __digit = _Digit<_Base, _Dig>;
      using __valid_digit = typename __digit::__valid;
      using __next = _Number_help<_Base,
      __valid_digit::value ? _Pow / _Base : _Pow,
      _Digs...>;
      using type = __ull_constant<_Pow * __digit::value + __next::type::value>;
      static_assert((type::value / _Pow) == __digit::value,
      "integer literal does not fit in unsigned long long");
    };


  template<unsigned _Base, unsigned long long _Pow, char _Dig, char..._Digs>
    struct _Number_help<_Base, _Pow, '\'', _Dig, _Digs...>
    : _Number_help<_Base, _Pow, _Dig, _Digs...>
    { };


  template<unsigned _Base, char _Dig>
    struct _Number_help<_Base, 1ULL, _Dig>
    {
      using type = __ull_constant<_Digit<_Base, _Dig>::value>;
    };

  template<unsigned _Base, char... _Digs>
    struct _Number
    : _Number_help<_Base, _Power<_Base, _Digs...>::value, _Digs...>::type
    { };

  template<unsigned _Base>
    struct _Number<_Base>
    : __ull_constant<0>
    { };



  template<char... _Digs>
    struct _Parse_int;

  template<char... _Digs>
    struct _Parse_int<'0', 'b', _Digs...>
    : _Number<2U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'B', _Digs...>
    : _Number<2U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'x', _Digs...>
    : _Number<16U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'X', _Digs...>
    : _Number<16U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', _Digs...>
    : _Number<8U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int
    : _Number<10U, _Digs...>::type
    { };

}


namespace __select_int
{
  template<unsigned long long _Val, typename... _Ints>
    struct _Select_int_base;

  template<unsigned long long _Val, typename _IntType, typename... _Ints>
    struct _Select_int_base<_Val, _IntType, _Ints...>
    : __conditional_t<(_Val <= __gnu_cxx::__int_traits<_IntType>::__max),
        integral_constant<_IntType, (_IntType)_Val>,
        _Select_int_base<_Val, _Ints...>>
    { };

  template<unsigned long long _Val>
    struct _Select_int_base<_Val>
    { };

  template<char... _Digs>
    using _Select_int = typename _Select_int_base<
 __parse_int::_Parse_int<_Digs...>::value,
 unsigned char,
 unsigned short,
 unsigned int,
 unsigned long,
 unsigned long long
      >::type;

}


}
# 46 "/usr/include/c++/15/bits/chrono.h" 2 3





# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 52 "/usr/include/c++/15/bits/chrono.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  namespace chrono
  {




    template<typename _Rep, typename _Period = ratio<1>>
      class duration;


    template<typename _Clock, typename _Dur = typename _Clock::duration>
      class time_point;

  }
# 83 "/usr/include/c++/15/bits/chrono.h" 3
  template<typename _CT, typename _Period1, typename _Period2, typename = void>
    struct __duration_common_type
    { };

  template<typename _CT, typename _Period1, typename _Period2>
    struct __duration_common_type<_CT, _Period1, _Period2,
      __void_t<typename _CT::type>>
    {
    private:
      using __gcd_num = __static_gcd<_Period1::num, _Period2::num>;
      using __gcd_den = __static_gcd<_Period1::den, _Period2::den>;
      using __cr = typename _CT::type;
      using __r = ratio<__gcd_num::value,
   (_Period1::den / __gcd_den::value) * _Period2::den>;

    public:
      using type = chrono::duration<__cr, typename __r::type>;
    };







  template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>
    struct common_type<chrono::duration<_Rep1, _Period1>,
         chrono::duration<_Rep2, _Period2>>
    : __duration_common_type<common_type<_Rep1, _Rep2>,
        typename _Period1::type,
        typename _Period2::type>
    { };


  template<typename _Rep, typename _Period>
    struct common_type<chrono::duration<_Rep, _Period>,
         chrono::duration<_Rep, _Period>>
    {
      using type = chrono::duration<typename common_type<_Rep>::type,
        typename _Period::type>;
    };


  template<typename _Rep, typename _Period>
    struct common_type<chrono::duration<_Rep, _Period>>
    {
      using type = chrono::duration<typename common_type<_Rep>::type,
        typename _Period::type>;
    };






  template<typename _CT, typename _Clock, typename = void>
    struct __timepoint_common_type
    { };

  template<typename _CT, typename _Clock>
    struct __timepoint_common_type<_CT, _Clock, __void_t<typename _CT::type>>
    {
      using type = chrono::time_point<_Clock, typename _CT::type>;
    };







  template<typename _Clock, typename _Duration1, typename _Duration2>
    struct common_type<chrono::time_point<_Clock, _Duration1>,
         chrono::time_point<_Clock, _Duration2>>
    : __timepoint_common_type<common_type<_Duration1, _Duration2>, _Clock>
    { };


  template<typename _Clock, typename _Duration>
    struct common_type<chrono::time_point<_Clock, _Duration>,
         chrono::time_point<_Clock, _Duration>>
    { using type = chrono::time_point<_Clock, _Duration>; };


  template<typename _Clock, typename _Duration>
    struct common_type<chrono::time_point<_Clock, _Duration>>
    { using type = chrono::time_point<_Clock, _Duration>; };




  namespace chrono
  {






    template<typename _ToDur, typename _CF, typename _CR,
      bool _NumIsOne = false, bool _DenIsOne = false>
      struct __duration_cast_impl
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())
       * static_cast<_CR>(_CF::num)
       / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(__d.count()));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
   }
      };

    template<typename _Tp>
      struct __is_duration
      : std::false_type
      { };

    template<typename _Rep, typename _Period>
      struct __is_duration<duration<_Rep, _Period>>
      : std::true_type
      { };

    template<typename _Tp>
      using __enable_if_is_duration
 = typename enable_if<__is_duration<_Tp>::value, _Tp>::type;

    template<typename _Tp>
      using __disable_if_is_duration
 = typename enable_if<!__is_duration<_Tp>::value, _Tp>::type;
# 276 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _ToDur, typename _Rep, typename _Period>
      [[__nodiscard__]]
      constexpr __enable_if_is_duration<_ToDur>
      duration_cast(const duration<_Rep, _Period>& __d)
      {






   using __to_period = typename _ToDur::period;
   using __to_rep = typename _ToDur::rep;
   using __cf = ratio_divide<_Period, __to_period>;
   using __cr = typename common_type<__to_rep, _Rep, intmax_t>::type;
   using __dc = __duration_cast_impl<_ToDur, __cf, __cr,
         __cf::num == 1, __cf::den == 1>;
   return __dc::__cast(__d);



      }
# 310 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Rep>
      struct treat_as_floating_point
      : is_floating_point<_Rep>
      { };
# 478 "/usr/include/c++/15/bits/chrono.h" 3
    namespace __detail
    {
      template<typename _Tp, typename _Up>
 constexpr _Tp
 __ceil_impl(const _Tp& __t, const _Up& __u)
 {
   return (__t < __u) ? (__t + _Tp{1}) : __t;
 }


      template<typename _ToDur, typename _Rep, typename _Period>
 constexpr _ToDur
 ceil(const duration<_Rep, _Period>& __d)
 {
   return __detail::__ceil_impl(chrono::duration_cast<_ToDur>(__d), __d);
 }
    }



    template<typename _Rep>
      struct duration_values
      {
 static constexpr _Rep
 zero() noexcept
 { return _Rep(0); }

 static constexpr _Rep
 max() noexcept
 { return numeric_limits<_Rep>::max(); }

 static constexpr _Rep
 min() noexcept
 { return numeric_limits<_Rep>::lowest(); }
      };

    template<typename _Rep, typename _Period>
      class duration
      {
 static_assert(!__is_duration<_Rep>::value,
        "rep cannot be a std::chrono::duration");
 static_assert(__is_ratio<_Period>::value,
        "period must be a specialization of std::ratio");
 static_assert(_Period::num > 0, "period must be positive");

 template<typename _Rep2>
   using __is_float = treat_as_floating_point<_Rep2>;

 static constexpr intmax_t
 _S_gcd(intmax_t __m, intmax_t __n) noexcept
 {



   do
     {
       intmax_t __rem = __m % __n;
       __m = __n;
       __n = __rem;
     }
   while (__n != 0);
   return __m;





 }





 template<typename _R1, typename _R2,
   intmax_t __gcd1 = _S_gcd(_R1::num, _R2::num),
   intmax_t __gcd2 = _S_gcd(_R1::den, _R2::den)>
   using __divide = ratio<(_R1::num / __gcd1) * (_R2::den / __gcd2),
     (_R1::den / __gcd2) * (_R2::num / __gcd1)>;


 template<typename _Period2>
   using __is_harmonic
     = __bool_constant<__divide<_Period2, _Period>::den == 1>;

      public:

 using rep = _Rep;
 using period = typename _Period::type;


 constexpr duration() = default;

 duration(const duration&) = default;



 template<typename _Rep2, typename = _Require<
   is_convertible<const _Rep2&, rep>,
   __or_<__is_float<rep>, __not_<__is_float<_Rep2>>>>>
   constexpr explicit duration(const _Rep2& __rep)
   : __r(static_cast<rep>(__rep)) { }

 template<typename _Rep2, typename _Period2, typename = _Require<
   is_convertible<const _Rep2&, rep>,
   __or_<__is_float<rep>,
         __and_<__is_harmonic<_Period2>,
         __not_<__is_float<_Rep2>>>>>>
   constexpr duration(const duration<_Rep2, _Period2>& __d)
   : __r(duration_cast<duration>(__d).count()) { }

 ~duration() = default;
 duration& operator=(const duration&) = default;


 constexpr rep
 count() const
 { return __r; }



 constexpr duration<typename common_type<rep>::type, period>
 operator+() const
 { return duration<typename common_type<rep>::type, period>(__r); }

 constexpr duration<typename common_type<rep>::type, period>
 operator-() const
 { return duration<typename common_type<rep>::type, period>(-__r); }

 duration&
 operator++()
 {
   ++__r;
   return *this;
 }

 duration
 operator++(int)
 { return duration(__r++); }

 duration&
 operator--()
 {
   --__r;
   return *this;
 }

 duration
 operator--(int)
 { return duration(__r--); }

 duration&
 operator+=(const duration& __d)
 {
   __r += __d.count();
   return *this;
 }

 duration&
 operator-=(const duration& __d)
 {
   __r -= __d.count();
   return *this;
 }

 duration&
 operator*=(const rep& __rhs)
 {
   __r *= __rhs;
   return *this;
 }

 duration&
 operator/=(const rep& __rhs)
 {
   __r /= __rhs;
   return *this;
 }


 template<typename _Rep2 = rep>
  
   __enable_if_t<!treat_as_floating_point<_Rep2>::value, duration&>
   operator%=(const rep& __rhs)
   {
     __r %= __rhs;
     return *this;
   }

 template<typename _Rep2 = rep>
  
   __enable_if_t<!treat_as_floating_point<_Rep2>::value, duration&>
   operator%=(const duration& __d)
   {
     __r %= __d.count();
     return *this;
   }


 static constexpr duration
 zero() noexcept
 { return duration(duration_values<rep>::zero()); }

 static constexpr duration
 min() noexcept
 { return duration(duration_values<rep>::min()); }

 static constexpr duration
 max() noexcept
 { return duration(duration_values<rep>::max()); }

      private:
 rep __r;
      };





    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() + __cd(__rhs).count());
      }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator-(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() - __cd(__rhs).count());
      }
# 731 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Rep1, typename _Rep2,
      typename _CRep = typename common_type<_Rep1, _Rep2>::type>
      using __common_rep_t = typename
 enable_if<is_convertible<const _Rep2&, _CRep>::value, _CRep>::type;
# 743 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<__common_rep_t<_Rep1, _Rep2>, _Period>
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() * __s);
      }

    template<typename _Rep1, typename _Rep2, typename _Period>
      constexpr duration<__common_rep_t<_Rep2, _Rep1>, _Period>
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
      { return __d * __s; }

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<__common_rep_t<_Rep1, __disable_if_is_duration<_Rep2>>, _Period>
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() / __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<_Rep1, _Rep2>::type
      operator/(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__lhs).count() / __cd(__rhs).count();
      }


    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<__common_rep_t<_Rep1, __disable_if_is_duration<_Rep2>>, _Period>
      operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() % __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator%(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() % __cd(__rhs).count());
      }
# 811 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() == __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() < __ct(__rhs).count();
      }
# 848 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator!=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs == __rhs); }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs < __rhs); }
# 892 "/usr/include/c++/15/bits/chrono.h" 3
    using nanoseconds = duration<int64_t, nano>;


    using microseconds = duration<int64_t, micro>;


    using milliseconds = duration<int64_t, milli>;


    using seconds = duration<int64_t>;


    using minutes = duration<int64_t, ratio< 60>>;


    using hours = duration<int64_t, ratio<3600>>;
# 925 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Clock, typename _Dur>
      class time_point
      {
 static_assert(__is_duration<_Dur>::value,
     "duration must be a specialization of std::chrono::duration");

      public:
 typedef _Clock clock;
 typedef _Dur duration;
 typedef typename duration::rep rep;
 typedef typename duration::period period;

 constexpr time_point() : __d(duration::zero())
 { }

 constexpr explicit time_point(const duration& __dur)
 : __d(__dur)
 { }


 template<typename _Dur2,
   typename = _Require<is_convertible<_Dur2, _Dur>>>
   constexpr time_point(const time_point<clock, _Dur2>& __t)
   : __d(__t.time_since_epoch())
   { }


 constexpr duration
 time_since_epoch() const
 { return __d; }
# 981 "/usr/include/c++/15/bits/chrono.h" 3
 time_point&
 operator+=(const duration& __dur)
 {
   __d += __dur;
   return *this;
 }

 time_point&
 operator-=(const duration& __dur)
 {
   __d -= __dur;
   return *this;
 }


 static constexpr time_point
 min() noexcept
 { return time_point(duration::min()); }

 static constexpr time_point
 max() noexcept
 { return time_point(duration::max()); }

      private:
 duration __d;
      };
# 1020 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _ToDur, typename _Clock, typename _Dur>
      [[__nodiscard__]] constexpr
      __enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>
      time_point_cast(const time_point<_Clock, _Dur>& __t)
      {
 typedef time_point<_Clock, _ToDur> __time_point;
 return __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));
      }
# 1101 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator+(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() + __rhs);
      }


    template<typename _Rep1, typename _Period1,
      typename _Clock, typename _Dur2>
      constexpr time_point<_Clock,
 typename common_type<duration<_Rep1, _Period1>, _Dur2>::type>
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef typename common_type<__dur1,_Dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__rhs.time_since_epoch() + __lhs);
      }


    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() -__rhs);
      }


    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }







    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator==(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }
# 1169 "/usr/include/c++/15/bits/chrono.h" 3
    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator!=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs == __rhs); }


    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() < __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs < __rhs); }
# 1222 "/usr/include/c++/15/bits/chrono.h" 3
inline namespace _V2 {







    struct system_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<system_clock, duration> time_point;

      static_assert(system_clock::duration::min()
      < system_clock::duration::zero(),
      "a clock's minimum duration cannot be less than its epoch");

      static constexpr bool is_steady = false;

      static time_point
      now() noexcept;


      [[__gnu__::__always_inline__]]
      static std::time_t
      to_time_t(const time_point& __t) noexcept
      {
 return std::time_t(duration_cast<chrono::seconds>
      (__t.time_since_epoch()).count());
      }

      [[__gnu__::__always_inline__]]
      static time_point
      from_time_t(std::time_t __t) noexcept
      {
 typedef chrono::time_point<system_clock, seconds> __from;
 return time_point_cast<system_clock::duration>
        (__from(chrono::seconds(__t)));
      }
    };
# 1272 "/usr/include/c++/15/bits/chrono.h" 3
    struct steady_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<steady_clock, duration> time_point;

      static constexpr bool is_steady = true;

      static time_point
      now() noexcept;
    };
# 1294 "/usr/include/c++/15/bits/chrono.h" 3
    using high_resolution_clock = system_clock;

}
# 1329 "/usr/include/c++/15/bits/chrono.h" 3
  }


  inline namespace literals
  {
# 1358 "/usr/include/c++/15/bits/chrono.h" 3
  inline namespace chrono_literals
  {



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"

    template<typename _Dur, char... _Digits>
      constexpr _Dur __check_overflow()
      {
 using _Val = __parse_int::_Parse_int<_Digits...>;
 constexpr typename _Dur::rep __repval = _Val::value;
 static_assert(__repval >= 0 && __repval == _Val::value,
        "literal value cannot be represented by duration type");
 return _Dur(__repval);
      }



    constexpr chrono::duration<long double, ratio<3600,1>>
    operator""h(long double __hours)
    { return chrono::duration<long double, ratio<3600,1>>{__hours}; }


    template <char... _Digits>
      constexpr chrono::hours
      operator""h()
      { return __check_overflow<chrono::hours, _Digits...>(); }


    constexpr chrono::duration<long double, ratio<60,1>>
    operator""min(long double __mins)
    { return chrono::duration<long double, ratio<60,1>>{__mins}; }


    template <char... _Digits>
      constexpr chrono::minutes
      operator""min()
      { return __check_overflow<chrono::minutes, _Digits...>(); }


    constexpr chrono::duration<long double>
    operator""s(long double __secs)
    { return chrono::duration<long double>{__secs}; }


    template <char... _Digits>
      constexpr chrono::seconds
      operator""s()
      { return __check_overflow<chrono::seconds, _Digits...>(); }


    constexpr chrono::duration<long double, milli>
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }


    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }


    constexpr chrono::duration<long double, micro>
    operator""us(long double __usecs)
    { return chrono::duration<long double, micro>{__usecs}; }


    template <char... _Digits>
      constexpr chrono::microseconds
      operator""us()
      { return __check_overflow<chrono::microseconds, _Digits...>(); }


    constexpr chrono::duration<long double, nano>
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }


    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }

#pragma GCC diagnostic pop

  }
  }

  namespace chrono
  {
    using namespace literals::chrono_literals;
  }
# 1518 "/usr/include/c++/15/bits/chrono.h" 3

}
# 46 "/usr/include/c++/15/chrono" 2 3
# 61 "/usr/include/c++/15/chrono" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 62 "/usr/include/c++/15/chrono" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 80 "/usr/include/c++/15/chrono" 3
  namespace chrono
  {
# 3346 "/usr/include/c++/15/chrono" 3
  }
# 3374 "/usr/include/c++/15/chrono" 3

}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/steady_timer.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/wait_traits.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/wait_traits.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/wait_traits.hpp" 2


# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/wait_traits.hpp"
namespace asio {


template <typename Clock>
struct wait_traits
{




  static typename Clock::duration to_wait_duration(
      const typename Clock::duration& d)
  {
    return d;
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/wait_traits.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/chrono_time_traits.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/chrono_time_traits.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/chrono_time_traits.hpp" 2

namespace asio {
namespace detail {


template <int64_t v1, int64_t v2>
struct gcd { enum { value = gcd<v2, v1 % v2>::value }; };

template <int64_t v1>
struct gcd<v1, 0> { enum { value = v1 }; };


template <typename Clock, typename WaitTraits>
struct chrono_time_traits
{

  typedef Clock clock_type;


  typedef typename clock_type::duration duration_type;


  typedef typename clock_type::time_point time_type;


  typedef typename duration_type::period period_type;


  static time_type now()
  {
    return clock_type::now();
  }


  static time_type add(const time_type& t, const duration_type& d)
  {
    const time_type epoch;
    if (t >= epoch)
    {
      if ((time_type::max)() - t < d)
        return (time_type::max)();
    }
    else
    {
      if (-(t - (time_type::min)()) > d)
        return (time_type::min)();
    }

    return t + d;
  }


  static duration_type subtract(const time_type& t1, const time_type& t2)
  {
    const time_type epoch;
    if (t1 >= epoch)
    {
      if (t2 >= epoch)
      {
        return t1 - t2;
      }
      else if (t2 == (time_type::min)())
      {
        return (duration_type::max)();
      }
      else if ((time_type::max)() - t1 < epoch - t2)
      {
        return (duration_type::max)();
      }
      else
      {
        return t1 - t2;
      }
    }
    else
    {
      if (t2 < epoch)
      {
        return t1 - t2;
      }
      else if (t1 == (time_type::min)())
      {
        return (duration_type::min)();
      }
      else if ((time_type::max)() - t2 < epoch - t1)
      {
        return (duration_type::min)();
      }
      else
      {
        return -(t2 - t1);
      }
    }
  }


  static bool less_than(const time_type& t1, const time_type& t2)
  {
    return t1 < t2;
  }



  class posix_time_duration
  {
  public:
    explicit posix_time_duration(const duration_type& d)
      : d_(d)
    {
    }

    int64_t ticks() const
    {
      return d_.count();
    }

    int64_t total_seconds() const
    {
      return duration_cast<1, 1>();
    }

    int64_t total_milliseconds() const
    {
      return duration_cast<1, 1000>();
    }

    int64_t total_microseconds() const
    {
      return duration_cast<1, 1000000>();
    }

  private:
    template <int64_t Num, int64_t Den>
    int64_t duration_cast() const
    {
      const int64_t num1 = period_type::num / gcd<period_type::num, Num>::value;
      const int64_t num2 = Num / gcd<period_type::num, Num>::value;

      const int64_t den1 = period_type::den / gcd<period_type::den, Den>::value;
      const int64_t den2 = Den / gcd<period_type::den, Den>::value;

      const int64_t num = num1 * den2;
      const int64_t den = num2 * den1;

      if (num == 1 && den == 1)
        return ticks();
      else if (num != 1 && den == 1)
        return ticks() * num;
      else if (num == 1 && period_type::den != 1)
        return ticks() / den;
      else
        return ticks() * num / den;
    }

    duration_type d_;
  };


  static posix_time_duration to_posix_duration(const duration_type& d)
  {
    return posix_time_duration(WaitTraits::to_wait_duration(d));
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 189 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/chrono_time_traits.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/date_time_fwd.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/date_time_fwd.hpp"
namespace boost {
namespace date_time {

template<class T, class TimeSystem>
class base_time;

}
namespace posix_time {

class ptime;

}
}
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue.hpp" 2

namespace asio {
namespace detail {

template <typename Time_Traits>
class timer_queue
  : public timer_queue_base
{
public:

  typedef typename Time_Traits::time_type time_type;


  typedef typename Time_Traits::duration_type duration_type;


  class per_timer_data
  {
  public:
    per_timer_data() : next_(0), prev_(0) {}

  private:
    friend class timer_queue;


    op_queue<wait_op> op_queue_;


    std::size_t heap_index_;


    per_timer_data* next_;
    per_timer_data* prev_;
  };


  timer_queue()
    : timers_(),
      heap_()
  {
  }




  bool enqueue_timer(const time_type& time, per_timer_data& timer, wait_op* op)
  {

    if (timer.prev_ == 0 && &timer != timers_)
    {
      if (this->is_positive_infinity(time))
      {

        timer.heap_index_ = (std::numeric_limits<std::size_t>::max)();
      }
      else
      {


        timer.heap_index_ = heap_.size();
        heap_entry entry = { time, &timer };
        heap_.push_back(entry);
        up_heap(heap_.size() - 1);
      }


      timer.next_ = timers_;
      timer.prev_ = 0;
      if (timers_)
        timers_->prev_ = &timer;
      timers_ = &timer;
    }


    timer.op_queue_.push(op);


    return timer.heap_index_ == 0 && timer.op_queue_.front() == op;
  }


  virtual bool empty() const
  {
    return timers_ == 0;
  }


  virtual long wait_duration_msec(long max_duration) const
  {
    if (heap_.empty())
      return max_duration;

    return this->to_msec(
        Time_Traits::to_posix_duration(
          Time_Traits::subtract(heap_[0].time_, Time_Traits::now())),
        max_duration);
  }


  virtual long wait_duration_usec(long max_duration) const
  {
    if (heap_.empty())
      return max_duration;

    return this->to_usec(
        Time_Traits::to_posix_duration(
          Time_Traits::subtract(heap_[0].time_, Time_Traits::now())),
        max_duration);
  }


  virtual void get_ready_timers(op_queue<operation>& ops)
  {
    if (!heap_.empty())
    {
      const time_type now = Time_Traits::now();
      while (!heap_.empty() && !Time_Traits::less_than(now, heap_[0].time_))
      {
        per_timer_data* timer = heap_[0].timer_;
        ops.push(timer->op_queue_);
        remove_timer(*timer);
      }
    }
  }


  virtual void get_all_timers(op_queue<operation>& ops)
  {
    while (timers_)
    {
      per_timer_data* timer = timers_;
      timers_ = timers_->next_;
      ops.push(timer->op_queue_);
      timer->next_ = 0;
      timer->prev_ = 0;
    }

    heap_.clear();
  }


  std::size_t cancel_timer(per_timer_data& timer, op_queue<operation>& ops,
      std::size_t max_cancelled = (std::numeric_limits<std::size_t>::max)())
  {
    std::size_t num_cancelled = 0;
    if (timer.prev_ != 0 || &timer == timers_)
    {
      while (wait_op* op = (num_cancelled != max_cancelled)
          ? timer.op_queue_.front() : 0)
      {
        op->ec_ = asio::error::operation_aborted;
        timer.op_queue_.pop();
        ops.push(op);
        ++num_cancelled;
      }
      if (timer.op_queue_.empty())
        remove_timer(timer);
    }
    return num_cancelled;
  }

private:

  void up_heap(std::size_t index)
  {
    while (index > 0)
    {
      std::size_t parent = (index - 1) / 2;
      if (!Time_Traits::less_than(heap_[index].time_, heap_[parent].time_))
        break;
      swap_heap(index, parent);
      index = parent;
    }
  }


  void down_heap(std::size_t index)
  {
    std::size_t child = index * 2 + 1;
    while (child < heap_.size())
    {
      std::size_t min_child = (child + 1 == heap_.size()
          || Time_Traits::less_than(
            heap_[child].time_, heap_[child + 1].time_))
        ? child : child + 1;
      if (Time_Traits::less_than(heap_[index].time_, heap_[min_child].time_))
        break;
      swap_heap(index, min_child);
      index = min_child;
      child = index * 2 + 1;
    }
  }


  void swap_heap(std::size_t index1, std::size_t index2)
  {
    heap_entry tmp = heap_[index1];
    heap_[index1] = heap_[index2];
    heap_[index2] = tmp;
    heap_[index1].timer_->heap_index_ = index1;
    heap_[index2].timer_->heap_index_ = index2;
  }


  void remove_timer(per_timer_data& timer)
  {

    std::size_t index = timer.heap_index_;
    if (!heap_.empty() && index < heap_.size())
    {
      if (index == heap_.size() - 1)
      {
        heap_.pop_back();
      }
      else
      {
        swap_heap(index, heap_.size() - 1);
        heap_.pop_back();
        if (index > 0 && Time_Traits::less_than(
              heap_[index].time_, heap_[(index - 1) / 2].time_))
          up_heap(index);
        else
          down_heap(index);
      }
    }


    if (timers_ == &timer)
      timers_ = timer.next_;
    if (timer.prev_)
      timer.prev_->next_ = timer.next_;
    if (timer.next_)
      timer.next_->prev_= timer.prev_;
    timer.next_ = 0;
    timer.prev_ = 0;
  }


  template <typename Time_Type>
  static bool is_positive_infinity(const Time_Type&)
  {
    return false;
  }


  template <typename T, typename TimeSystem>
  static bool is_positive_infinity(
      const boost::date_time::base_time<T, TimeSystem>& time)
  {
    return time.is_pos_infinity();
  }


  template <typename Duration>
  long to_msec(const Duration& d, long max_duration) const
  {
    if (d.ticks() <= 0)
      return 0;
    int64_t msec = d.total_milliseconds();
    if (msec == 0)
      return 1;
    if (msec > max_duration)
      return max_duration;
    return static_cast<long>(msec);
  }


  template <typename Duration>
  long to_usec(const Duration& d, long max_duration) const
  {
    if (d.ticks() <= 0)
      return 0;
    int64_t usec = d.total_microseconds();
    if (usec == 0)
      return 1;
    if (usec > max_duration)
      return max_duration;
    return static_cast<long>(usec);
  }


  per_timer_data* timers_;

  struct heap_entry
  {

    time_type time_;


    per_timer_data* timer_;
  };


  std::vector<heap_entry> heap_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 330 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_queue.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_scheduler.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_scheduler.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_scheduler_fwd.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_scheduler_fwd.hpp"
namespace asio {
namespace detail {






typedef class epoll_reactor timer_scheduler;
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_scheduler_fwd.hpp"
}
}
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/timer_scheduler.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_handler.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_handler.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_handler.hpp" 2

namespace asio {
namespace detail {

template <typename Handler>
class wait_handler : public wait_op
{
public:
  struct ptr { Handler* h; void* v; wait_handler* p; ~ptr() { reset(); } void reset() { if (p) { p->~wait_handler(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(wait_handler), *h); v = 0; } } };

  wait_handler(Handler& h)
    : wait_op(&wait_handler::do_complete),
      handler_(static_cast<Handler&&>(h))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    wait_handler* h(static_cast<wait_handler*>(base));
    ptr p = { asio::detail::addressof(h->handler_), h, h };

    (void)0;







    detail::binder1<Handler, asio::error_code>
      handler(h->handler_, h->ec_);
    p.h = asio::detail::addressof(handler.handler_);
    p.reset();


    if (owner)
    {
      fenced_block b(fenced_block::half);
      (void)0;
      asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      (void)0;
    }
  }

private:
  Handler handler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/wait_handler.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp" 2







# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp" 2

namespace asio {
namespace detail {

template <typename Time_Traits>
class deadline_timer_service
{
public:

  typedef typename Time_Traits::time_type time_type;


  typedef typename Time_Traits::duration_type duration_type;



  struct implementation_type
    : private asio::detail::noncopyable
  {
    time_type expiry;
    bool might_have_pending_waits;
    typename timer_queue<Time_Traits>::per_timer_data timer_data;
  };


  deadline_timer_service(asio::io_service& io_service)
    : scheduler_(asio::use_service<timer_scheduler>(io_service))
  {
    scheduler_.init_task();
    scheduler_.add_timer_queue(timer_queue_);
  }


  ~deadline_timer_service()
  {
    scheduler_.remove_timer_queue(timer_queue_);
  }


  void shutdown_service()
  {
  }


  void construct(implementation_type& impl)
  {
    impl.expiry = time_type();
    impl.might_have_pending_waits = false;
  }


  void destroy(implementation_type& impl)
  {
    asio::error_code ec;
    cancel(impl, ec);
  }


  std::size_t cancel(implementation_type& impl, asio::error_code& ec)
  {
    if (!impl.might_have_pending_waits)
    {
      ec = asio::error_code();
      return 0;
    }

    (void)0;

    std::size_t count = scheduler_.cancel_timer(timer_queue_, impl.timer_data);
    impl.might_have_pending_waits = false;
    ec = asio::error_code();
    return count;
  }


  std::size_t cancel_one(implementation_type& impl,
      asio::error_code& ec)
  {
    if (!impl.might_have_pending_waits)
    {
      ec = asio::error_code();
      return 0;
    }

    (void)0;

    std::size_t count = scheduler_.cancel_timer(
        timer_queue_, impl.timer_data, 1);
    if (count == 0)
      impl.might_have_pending_waits = false;
    ec = asio::error_code();
    return count;
  }


  time_type expires_at(const implementation_type& impl) const
  {
    return impl.expiry;
  }


  std::size_t expires_at(implementation_type& impl,
      const time_type& expiry_time, asio::error_code& ec)
  {
    std::size_t count = cancel(impl, ec);
    impl.expiry = expiry_time;
    ec = asio::error_code();
    return count;
  }


  duration_type expires_from_now(const implementation_type& impl) const
  {
    return Time_Traits::subtract(expires_at(impl), Time_Traits::now());
  }


  std::size_t expires_from_now(implementation_type& impl,
      const duration_type& expiry_time, asio::error_code& ec)
  {
    return expires_at(impl,
        Time_Traits::add(Time_Traits::now(), expiry_time), ec);
  }


  void wait(implementation_type& impl, asio::error_code& ec)
  {
    time_type now = Time_Traits::now();
    ec = asio::error_code();
    while (Time_Traits::less_than(now, impl.expiry) && !ec)
    {
      this->do_wait(Time_Traits::to_posix_duration(
            Time_Traits::subtract(impl.expiry, now)), ec);
      now = Time_Traits::now();
    }
  }


  template <typename Handler>
  void async_wait(implementation_type& impl, Handler& handler)
  {

    typedef wait_handler<Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(handler);

    impl.might_have_pending_waits = true;

    (void)0;

    scheduler_.schedule_timer(timer_queue_, impl.expiry, impl.timer_data, p.p);
    p.v = p.p = 0;
  }

private:



  template <typename Duration>
  void do_wait(const Duration& timeout, asio::error_code& ec)
  {






    ::timeval tv;
    tv.tv_sec = timeout.total_seconds();
    tv.tv_usec = timeout.total_microseconds() % 1000000;
    socket_ops::select(0, 0, 0, 0, &tv, ec);

  }


  timer_queue<Time_Traits> timer_queue_;


  timer_scheduler& scheduler_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 226 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/deadline_timer_service.hpp" 2
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp" 2

namespace asio {


template <typename Clock,
    typename WaitTraits = asio::wait_traits<Clock> >
class waitable_timer_service



  : public asio::detail::service_base<
      waitable_timer_service<Clock, WaitTraits> >

{
public:






  typedef Clock clock_type;


  typedef typename clock_type::duration duration;


  typedef typename clock_type::time_point time_point;


  typedef WaitTraits traits_type;

private:

  typedef detail::deadline_timer_service<
    detail::chrono_time_traits<Clock, WaitTraits> > service_impl_type;

public:




  typedef typename service_impl_type::implementation_type implementation_type;



  explicit waitable_timer_service(asio::io_service& io_service)
    : asio::detail::service_base<
        waitable_timer_service<Clock, WaitTraits> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }


  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  std::size_t cancel(implementation_type& impl, asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  std::size_t cancel_one(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel_one(impl, ec);
  }


  time_point expires_at(const implementation_type& impl) const
  {
    return service_impl_.expires_at(impl);
  }


  std::size_t expires_at(implementation_type& impl,
      const time_point& expiry_time, asio::error_code& ec)
  {
    return service_impl_.expires_at(impl, expiry_time, ec);
  }


  duration expires_from_now(const implementation_type& impl) const
  {
    return service_impl_.expires_from_now(impl);
  }


  std::size_t expires_from_now(implementation_type& impl,
      const duration& expiry_time, asio::error_code& ec)
  {
    return service_impl_.expires_from_now(impl, expiry_time, ec);
  }


  void wait(implementation_type& impl, asio::error_code& ec)
  {
    service_impl_.wait(impl, ec);
  }


  template <typename WaitHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WaitHandler, void (asio::error_code)>::type>::type

  async_wait(implementation_type& impl,
      WaitHandler&& handler)
  {
    detail::async_result_init<
      WaitHandler, void (asio::error_code)> init(
        static_cast<WaitHandler&&>(handler));

    service_impl_.async_wait(impl, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp" 2

namespace asio {
# 123 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
template <typename Clock,
    typename WaitTraits = asio::wait_traits<Clock>,
    typename WaitableTimerService = waitable_timer_service<Clock, WaitTraits> >
class basic_waitable_timer
  : public basic_io_object<WaitableTimerService>
{
public:

  typedef Clock clock_type;


  typedef typename clock_type::duration duration;


  typedef typename clock_type::time_point time_point;


  typedef WaitTraits traits_type;
# 151 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  explicit basic_waitable_timer(asio::io_service& io_service)
    : basic_io_object<WaitableTimerService>(io_service)
  {
  }
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  basic_waitable_timer(asio::io_service& io_service,
      const time_point& expiry_time)
    : basic_io_object<WaitableTimerService>(io_service)
  {
    asio::error_code ec;
    this->service.expires_at(this->implementation, expiry_time, ec);
    asio::detail::throw_error(ec, "expires_at");
  }
# 185 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  basic_waitable_timer(asio::io_service& io_service,
      const duration& expiry_time)
    : basic_io_object<WaitableTimerService>(io_service)
  {
    asio::error_code ec;
    this->service.expires_from_now(this->implementation, expiry_time, ec);
    asio::detail::throw_error(ec, "expires_from_now");
  }
# 216 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t cancel()
  {
    asio::error_code ec;
    std::size_t s = this->service.cancel(this->implementation, ec);
    asio::detail::throw_error(ec, "cancel");
    return s;
  }
# 246 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t cancel(asio::error_code& ec)
  {
    return this->service.cancel(this->implementation, ec);
  }
# 275 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t cancel_one()
  {
    asio::error_code ec;
    std::size_t s = this->service.cancel_one(this->implementation, ec);
    asio::detail::throw_error(ec, "cancel_one");
    return s;
  }
# 307 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t cancel_one(asio::error_code& ec)
  {
    return this->service.cancel_one(this->implementation, ec);
  }






  time_point expires_at() const
  {
    return this->service.expires_at(this->implementation);
  }
# 344 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t expires_at(const time_point& expiry_time)
  {
    asio::error_code ec;
    std::size_t s = this->service.expires_at(
        this->implementation, expiry_time, ec);
    asio::detail::throw_error(ec, "expires_at");
    return s;
  }
# 375 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t expires_at(const time_point& expiry_time,
      asio::error_code& ec)
  {
    return this->service.expires_at(this->implementation, expiry_time, ec);
  }






  duration expires_from_now() const
  {
    return this->service.expires_from_now(this->implementation);
  }
# 413 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t expires_from_now(const duration& expiry_time)
  {
    asio::error_code ec;
    std::size_t s = this->service.expires_from_now(
        this->implementation, expiry_time, ec);
    asio::detail::throw_error(ec, "expires_from_now");
    return s;
  }
# 444 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  std::size_t expires_from_now(const duration& expiry_time,
      asio::error_code& ec)
  {
    return this->service.expires_from_now(
        this->implementation, expiry_time, ec);
  }
# 458 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  void wait()
  {
    asio::error_code ec;
    this->service.wait(this->implementation, ec);
    asio::detail::throw_error(ec, "wait");
  }
# 472 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  void wait(asio::error_code& ec)
  {
    this->service.wait(this->implementation, ec);
  }
# 501 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp"
  template <typename WaitHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WaitHandler, void (asio::error_code)>::type>::type

  async_wait(WaitHandler&& handler)
  {


    typedef typename handler_type<WaitHandler, void(asio::error_code)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::one_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0))) == 1, "WaitHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>()), char(0))> __attribute__((__unused__)) type_check;

    return this->service.async_wait(this->implementation,
        static_cast<WaitHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 518 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/steady_timer.hpp" 2

namespace asio {
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/steady_timer.hpp"
typedef basic_waitable_timer<std::chrono::steady_clock> steady_timer;





}
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 2
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 2

namespace asio {
namespace detail {



class socket_streambuf_base
{
protected:
  io_service io_service_;
};

}


template <typename Protocol,
    typename StreamSocketService = stream_socket_service<Protocol>,






    typename Time = steady_timer::clock_type,
    typename TimeTraits = steady_timer::traits_type,
    typename TimerService = steady_timer::service_type>

class basic_socket_streambuf
  : public std::streambuf,
    private detail::socket_streambuf_base,
    public basic_socket<Protocol, StreamSocketService>
{
private:





  typedef detail::chrono_time_traits<Time, TimeTraits> traits_helper;


public:

  typedef typename Protocol::endpoint endpoint_type;
# 126 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
  typedef typename traits_helper::time_type time_type;
  typedef typename traits_helper::duration_type duration_type;



  basic_socket_streambuf()
    : basic_socket<Protocol, StreamSocketService>(
        this->detail::socket_streambuf_base::io_service_),
      unbuffered_(false),
      timer_service_(0),
      timer_state_(no_timer)
  {
    init_buffers();
  }


  virtual ~basic_socket_streambuf()
  {
    if (pptr() != pbase())
      overflow(traits_type::eof());

    destroy_timer();
  }
# 157 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
  basic_socket_streambuf<Protocol, StreamSocketService,
    Time, TimeTraits, TimerService>* connect(
      const endpoint_type& endpoint)
  {
    init_buffers();

    this->basic_socket<Protocol, StreamSocketService>::close(ec_);

    if (timer_state_ == timer_has_expired)
    {
      ec_ = asio::error::operation_aborted;
      return 0;
    }

    io_handler handler = { this };
    this->basic_socket<Protocol, StreamSocketService>::async_connect(
        endpoint, handler);

    ec_ = asio::error::would_block;
    this->get_service().get_io_service().reset();
    do this->get_service().get_io_service().run_one();
    while (ec_ == asio::error::would_block);

    return !ec_ ? this : 0;
  }
# 197 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
  template <typename... T>
  basic_socket_streambuf<Protocol, StreamSocketService,
    Time, TimeTraits, TimerService>* connect(T... x)
  {
    init_buffers();
    this->basic_socket<Protocol, StreamSocketService>::close(ec_);
    typedef typename Protocol::resolver resolver_type;
    typedef typename resolver_type::query resolver_query;
    resolver_query query(x...);
    resolve_and_connect(query);
    return !ec_ ? this : 0;
  }
# 218 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
  basic_socket_streambuf<Protocol, StreamSocketService,
    Time, TimeTraits, TimerService>* close()
  {
    sync();
    this->basic_socket<Protocol, StreamSocketService>::close(ec_);
    if (!ec_)
      init_buffers();
    return !ec_ ? this : 0;
  }






  const asio::error_code& puberror() const
  {
    return error();
  }






  time_type expires_at() const
  {
    return timer_service_
      ? timer_service_->expires_at(timer_implementation_)
      : time_type();
  }
# 259 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
  void expires_at(const time_type& expiry_time)
  {
    construct_timer();

    asio::error_code ec;
    timer_service_->expires_at(timer_implementation_, expiry_time, ec);
    asio::detail::throw_error(ec, "expires_at");

    start_timer();
  }





  duration_type expires_from_now() const
  {
    return traits_helper::subtract(expires_at(), traits_helper::now());
  }
# 288 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp"
  void expires_from_now(const duration_type& expiry_time)
  {
    construct_timer();

    asio::error_code ec;
    timer_service_->expires_from_now(timer_implementation_, expiry_time, ec);
    asio::detail::throw_error(ec, "expires_from_now");

    start_timer();
  }

protected:
  int_type underflow()
  {
    if (gptr() == egptr())
    {
      if (timer_state_ == timer_has_expired)
      {
        ec_ = asio::error::operation_aborted;
        return traits_type::eof();
      }

      io_handler handler = { this };
      this->get_service().async_receive(this->get_implementation(),
          asio::buffer(asio::buffer(get_buffer_) + putback_max),
          0, handler);

      ec_ = asio::error::would_block;
      this->get_service().get_io_service().reset();
      do this->get_service().get_io_service().run_one();
      while (ec_ == asio::error::would_block);
      if (ec_)
        return traits_type::eof();

      setg(&get_buffer_[0], &get_buffer_[0] + putback_max,
          &get_buffer_[0] + putback_max + bytes_transferred_);
      return traits_type::to_int_type(*gptr());
    }
    else
    {
      return traits_type::eof();
    }
  }

  int_type overflow(int_type c)
  {
    if (unbuffered_)
    {
      if (traits_type::eq_int_type(c, traits_type::eof()))
      {

        return traits_type::not_eof(c);
      }
      else
      {
        if (timer_state_ == timer_has_expired)
        {
          ec_ = asio::error::operation_aborted;
          return traits_type::eof();
        }


        char_type ch = traits_type::to_char_type(c);
        io_handler handler = { this };
        this->get_service().async_send(this->get_implementation(),
            asio::buffer(&ch, sizeof(char_type)), 0, handler);

        ec_ = asio::error::would_block;
        this->get_service().get_io_service().reset();
        do this->get_service().get_io_service().run_one();
        while (ec_ == asio::error::would_block);
        if (ec_)
          return traits_type::eof();

        return c;
      }
    }
    else
    {

      asio::const_buffer buffer =
        asio::buffer(pbase(), pptr() - pbase());
      while (asio::buffer_size(buffer) > 0)
      {
        if (timer_state_ == timer_has_expired)
        {
          ec_ = asio::error::operation_aborted;
          return traits_type::eof();
        }

        io_handler handler = { this };
        this->get_service().async_send(this->get_implementation(),
            asio::buffer(buffer), 0, handler);

        ec_ = asio::error::would_block;
        this->get_service().get_io_service().reset();
        do this->get_service().get_io_service().run_one();
        while (ec_ == asio::error::would_block);
        if (ec_)
          return traits_type::eof();

        buffer = buffer + bytes_transferred_;
      }
      setp(&put_buffer_[0], &put_buffer_[0] + put_buffer_.size());


      if (traits_type::eq_int_type(c, traits_type::eof()))
        return traits_type::not_eof(c);


      *pptr() = traits_type::to_char_type(c);
      pbump(1);
      return c;
    }
  }

  int sync()
  {
    return overflow(traits_type::eof());
  }

  std::streambuf* setbuf(char_type* s, std::streamsize n)
  {
    if (pptr() == pbase() && s == 0 && n == 0)
    {
      unbuffered_ = true;
      setp(0, 0);
      return this;
    }

    return 0;
  }






  virtual const asio::error_code& error() const
  {
    return ec_;
  }

private:
  void init_buffers()
  {
    setg(&get_buffer_[0],
        &get_buffer_[0] + putback_max,
        &get_buffer_[0] + putback_max);
    if (unbuffered_)
      setp(0, 0);
    else
      setp(&put_buffer_[0], &put_buffer_[0] + put_buffer_.size());
  }

  template <typename ResolverQuery>
  void resolve_and_connect(const ResolverQuery& query)
  {
    typedef typename Protocol::resolver resolver_type;
    typedef typename resolver_type::iterator iterator_type;
    resolver_type resolver(detail::socket_streambuf_base::io_service_);
    iterator_type i = resolver.resolve(query, ec_);
    if (!ec_)
    {
      iterator_type end;
      ec_ = asio::error::host_not_found;
      while (ec_ && i != end)
      {
        this->basic_socket<Protocol, StreamSocketService>::close(ec_);

        if (timer_state_ == timer_has_expired)
        {
          ec_ = asio::error::operation_aborted;
          return;
        }

        io_handler handler = { this };
        this->basic_socket<Protocol, StreamSocketService>::async_connect(
            *i, handler);

        ec_ = asio::error::would_block;
        this->get_service().get_io_service().reset();
        do this->get_service().get_io_service().run_one();
        while (ec_ == asio::error::would_block);

        ++i;
      }
    }
  }

  struct io_handler;
  friend struct io_handler;
  struct io_handler
  {
    basic_socket_streambuf* this_;

    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred = 0)
    {
      this_->ec_ = ec;
      this_->bytes_transferred_ = bytes_transferred;
    }
  };

  struct timer_handler;
  friend struct timer_handler;
  struct timer_handler
  {
    basic_socket_streambuf* this_;

    void operator()(const asio::error_code&)
    {
      time_type now = traits_helper::now();

      time_type expiry_time = this_->timer_service_->expires_at(
            this_->timer_implementation_);

      if (traits_helper::less_than(now, expiry_time))
      {
        this_->timer_state_ = timer_is_pending;
        this_->timer_service_->async_wait(this_->timer_implementation_, *this);
      }
      else
      {
        this_->timer_state_ = timer_has_expired;
        asio::error_code ec;
        this_->basic_socket<Protocol, StreamSocketService>::close(ec);
      }
    }
  };

  void construct_timer()
  {
    if (timer_service_ == 0)
    {
      TimerService& timer_service = use_service<TimerService>(
          detail::socket_streambuf_base::io_service_);
      timer_service.construct(timer_implementation_);
      timer_service_ = &timer_service;
    }
  }

  void destroy_timer()
  {
    if (timer_service_)
      timer_service_->destroy(timer_implementation_);
  }

  void start_timer()
  {
    if (timer_state_ != timer_is_pending)
    {
      timer_handler handler = { this };
      handler(asio::error_code());
    }
  }

  enum { putback_max = 8 };
  enum { buffer_size = 512 };
  asio::detail::array<char, buffer_size> get_buffer_;
  asio::detail::array<char, buffer_size> put_buffer_;
  bool unbuffered_;
  asio::error_code ec_;
  std::size_t bytes_transferred_;
  TimerService* timer_service_;
  typename TimerService::implementation_type timer_implementation_;
  enum state { no_timer, timer_is_pending, timer_has_expired } timer_state_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 560 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp" 2
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp" 2

namespace asio {
namespace detail {



template <typename Protocol, typename StreamSocketService,
    typename Time, typename TimeTraits, typename TimerService>
class socket_iostream_base
{
protected:
  basic_socket_streambuf<Protocol, StreamSocketService,
    Time, TimeTraits, TimerService> streambuf_;
};

}


template <typename Protocol,
    typename StreamSocketService = stream_socket_service<Protocol>,






    typename Time = steady_timer::clock_type,
    typename TimeTraits = steady_timer::traits_type,
    typename TimerService = steady_timer::service_type>

class basic_socket_iostream
  : private detail::socket_iostream_base<Protocol,
        StreamSocketService, Time, TimeTraits, TimerService>,
    public std::basic_iostream<char>
{
private:





  typedef detail::chrono_time_traits<Time, TimeTraits> traits_helper;


public:

  typedef typename Protocol::endpoint endpoint_type;
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
  typedef typename traits_helper::time_type time_type;
  typedef typename traits_helper::duration_type duration_type;



  basic_socket_iostream()
    : std::basic_iostream<char>(
        &this->detail::socket_iostream_base<
          Protocol, StreamSocketService, Time,
          TimeTraits, TimerService>::streambuf_)
  {
    this->setf(std::ios_base::unitbuf);
  }
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
  template <typename... T>
  explicit basic_socket_iostream(T... x)
    : std::basic_iostream<char>(
        &this->detail::socket_iostream_base<
          Protocol, StreamSocketService, Time,
          TimeTraits, TimerService>::streambuf_)
  {
    this->setf(std::ios_base::unitbuf);
    if (rdbuf()->connect(x...) == 0)
      this->setstate(std::ios_base::failbit);
  }
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
  template <typename... T>
  void connect(T... x)
  {
    if (rdbuf()->connect(x...) == 0)
      this->setstate(std::ios_base::failbit);
  }





  void close()
  {
    if (rdbuf()->close() == 0)
      this->setstate(std::ios_base::failbit);
  }


  basic_socket_streambuf<Protocol, StreamSocketService,
    Time, TimeTraits, TimerService>* rdbuf() const
  {
    return const_cast<basic_socket_streambuf<Protocol, StreamSocketService,
      Time, TimeTraits, TimerService>*>(
        &this->detail::socket_iostream_base<
          Protocol, StreamSocketService, Time,
          TimeTraits, TimerService>::streambuf_);
  }
# 223 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
  const asio::error_code& error() const
  {
    return rdbuf()->puberror();
  }





  time_type expires_at() const
  {
    return rdbuf()->expires_at();
  }
# 246 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
  void expires_at(const time_type& expiry_time)
  {
    rdbuf()->expires_at(expiry_time);
  }





  duration_type expires_from_now() const
  {
    return rdbuf()->expires_from_now();
  }
# 269 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp"
  void expires_from_now(const duration_type& expiry_time)
  {
    rdbuf()->expires_from_now(expiry_time);
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 278 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp" 2
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_streambuf.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp" 2

namespace asio {
# 43 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
template <typename Protocol,
    typename StreamSocketService = stream_socket_service<Protocol> >
class basic_stream_socket
  : public basic_socket<Protocol, StreamSocketService>
{
public:


  typedef typename StreamSocketService::native_handle_type native_type;


  typedef typename StreamSocketService::native_handle_type native_handle_type;


  typedef Protocol protocol_type;


  typedef typename Protocol::endpoint endpoint_type;
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  explicit basic_stream_socket(asio::io_service& io_service)
    : basic_socket<Protocol, StreamSocketService>(io_service)
  {
  }
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  basic_stream_socket(asio::io_service& io_service,
      const protocol_type& protocol)
    : basic_socket<Protocol, StreamSocketService>(io_service, protocol)
  {
  }
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  basic_stream_socket(asio::io_service& io_service,
      const endpoint_type& endpoint)
    : basic_socket<Protocol, StreamSocketService>(io_service, endpoint)
  {
  }
# 129 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  basic_stream_socket(asio::io_service& io_service,
      const protocol_type& protocol, const native_handle_type& native_socket)
    : basic_socket<Protocol, StreamSocketService>(
        io_service, protocol, native_socket)
  {
  }
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  basic_stream_socket(basic_stream_socket&& other)
    : basic_socket<Protocol, StreamSocketService>(
        static_cast<basic_stream_socket&&>(other))
  {
  }
# 163 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  basic_stream_socket& operator=(basic_stream_socket&& other)
  {
    basic_socket<Protocol, StreamSocketService>::operator=(
        static_cast<basic_stream_socket&&>(other));
    return *this;
  }
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename Protocol1, typename StreamSocketService1>
  basic_stream_socket(
      basic_stream_socket<Protocol1, StreamSocketService1>&& other,
      typename enable_if<is_convertible<Protocol1, Protocol>::value>::type* = 0)
    : basic_socket<Protocol, StreamSocketService>(
        static_cast<basic_stream_socket< Protocol1, StreamSocketService1>&&>
                                           (other))
  {
  }
# 201 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename Protocol1, typename StreamSocketService1>
  typename enable_if<is_convertible<Protocol1, Protocol>::value,
      basic_stream_socket>::type& operator=(
        basic_stream_socket<Protocol1, StreamSocketService1>&& other)
  {
    basic_socket<Protocol, StreamSocketService>::operator=(
        static_cast<basic_stream_socket< Protocol1, StreamSocketService1>&&>
                                           (other));
    return *this;
  }
# 238 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 275 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "send");
    return s;
  }
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().send(
        this->get_implementation(), buffers, flags, ec);
  }
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(
        this->get_implementation(), buffers, 0,
        static_cast<WriteHandler&&>(handler));
  }
# 399 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_send(const ConstBufferSequence& buffers,
      socket_base::message_flags flags,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(
        this->get_implementation(), buffers, flags,
        static_cast<WriteHandler&&>(handler));
  }
# 443 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 483 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, flags, ec);
    asio::detail::throw_error(ec, "receive");
    return s;
  }
# 512 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags, asio::error_code& ec)
  {
    return this->get_service().receive(
        this->get_implementation(), buffers, flags, ec);
  }
# 557 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, 0, static_cast<ReadHandler&&>(handler));
  }
# 610 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_receive(const MutableBufferSequence& buffers,
      socket_base::message_flags flags,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, flags, static_cast<ReadHandler&&>(handler));
  }
# 652 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().send(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "write_some");
    return s;
  }
# 678 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers,
      asio::error_code& ec)
  {
    return this->get_service().send(this->get_implementation(), buffers, 0, ec);
  }
# 720 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_send(this->get_implementation(),
        buffers, 0, static_cast<WriteHandler&&>(handler));
  }
# 762 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().receive(
        this->get_implementation(), buffers, 0, ec);
    asio::detail::throw_error(ec, "read_some");
    return s;
  }
# 789 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return this->get_service().receive(
        this->get_implementation(), buffers, 0, ec);
  }
# 833 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_receive(this->get_implementation(),
        buffers, 0, static_cast<ReadHandler&&>(handler));
  }
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 851 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
# 1 "/usr/include/c++/15/algorithm" 1 3
# 63 "/usr/include/c++/15/algorithm" 3
# 1 "/usr/include/c++/15/bits/stl_algo.h" 1 3
# 59 "/usr/include/c++/15/bits/stl_algo.h" 3
# 1 "/usr/include/c++/15/bits/algorithmfwd.h" 1 3
# 44 "/usr/include/c++/15/bits/algorithmfwd.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 200 "/usr/include/c++/15/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
   
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
   
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp >
   
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);
# 234 "/usr/include/c++/15/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _OIter>
   
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
   
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
   
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
   
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp >
   
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp >
   
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size,
    typename _Tp >
   
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
   
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
   
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
   
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
   
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
   
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
   
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
   
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
   
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
   
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
   
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
   
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp >
   
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
   
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
   
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
   
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
   
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
   
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
   
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
   
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
   
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
   
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
   
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp >
   
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
   
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter,
    typename _Tp >
   
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
   
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
   
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate,
    typename _Tp >
   
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
   
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
   
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

inline namespace _V2 {

  template<typename _FIter>
   
    _FIter
    rotate(_FIter, _FIter, _FIter);

}

  template<typename _FIter, typename _OIter>
   
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 635 "/usr/include/c++/15/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
   
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    sort_heap(_RAIter, _RAIter, _Compare);


  template<typename _BIter, typename _Predicate>
   
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);
# 671 "/usr/include/c++/15/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
   
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
   
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
   
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp >
   
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);



  template<typename _FIter>
   
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
   
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp >
   
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
   
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
   
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp >
   
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
   
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
   
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
   
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
   
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
   
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
   
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
   
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
   
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
   
    _BIter
    partition(_BIter, _BIter, _Predicate);


  template<typename _RAIter>
   
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
   
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);





  template<typename _FIter, typename _Tp >
   
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate,
    typename _Tp >
   
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size,
    typename _Tp >
   
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size,
    typename _Tp ,
    typename _BinaryPredicate>
   
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
   
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
   
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
   
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
   
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
   
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);



}

#pragma GCC diagnostic pop
# 60 "/usr/include/c++/15/bits/stl_algo.h" 2 3

# 1 "/usr/include/c++/15/bits/stl_heap.h" 1 3
# 63 "/usr/include/c++/15/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
   
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare& __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return std::__is_heap_until(__first, __n, __comp) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __n, __cmp) == __n;
    }

  template<typename _RandomAccessIterator>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      return std::__is_heap(__first, std::move(__comp),
       std::distance(__first, __last));
    }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
   
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare& __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 159 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_val __comp;
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }
# 195 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;
      ;

      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
   
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 280 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      do { if (std::__is_constant_evaluated() && !bool(__first != __last)) std::__glibcxx_assert_fail(); } while (false);
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   __gnu_cxx::__ops::_Iter_less_iter __comp;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 314 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;
      do { if (std::__is_constant_evaluated() && !bool(__first != __last)) std::__glibcxx_assert_fail(); } while (false);
      ;

      if (__last - __first > 1)
 {
   typedef __decltype(__comp) _Cmp;
   __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
   --__last;
   std::__pop_heap(__first, __last, __last, __cmp);
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 372 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__make_heap(__first, __last, __comp);
    }
# 399 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 437 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__sort_heap(__first, __last, __comp);
    }
# 465 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__sort_heap(__first, __last, __cmp);
    }
# 494 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    [[__nodiscard__]]
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last), __comp);
    }
# 523 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    [[__nodiscard__]]
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last), __cmp);
    }
# 548 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    [[__nodiscard__]]
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 562 "/usr/include/c++/15/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    [[__nodiscard__]]
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    {

     

      ;
      ;

      const auto __dist = std::distance(__first, __last);
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __dist, __cmp) == __dist;
    }



}
# 62 "/usr/include/c++/15/bits/stl_algo.h" 2 3



# 1 "/usr/include/c++/15/bits/uniform_int_dist.h" 1 3
# 41 "/usr/include/c++/15/bits/uniform_int_dist.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/15/bits/uniform_int_dist.h" 3
  namespace __detail
  {



    template<typename _Tp>
      constexpr bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      }
  }
# 87 "/usr/include/c++/15/bits/uniform_int_dist.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument must be an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 param_type() : param_type(0) { }

 explicit
 param_type(_IntType __a,
     _IntType __b = __gnu_cxx::__int_traits<_IntType>::__max)
 : _M_a(__a), _M_b(__b)
 {
   do { if (std::__is_constant_evaluated() && !bool(_M_a <= _M_b)) std::__glibcxx_assert_fail(); } while (false);
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

 friend bool
 operator!=(const param_type& __p1, const param_type& __p2)
 { return !(__p1 == __p2); }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      uniform_int_distribution() : uniform_int_distribution(0) { }




      explicit
      uniform_int_distribution(_IntType __a,
          _IntType __b
     = __gnu_cxx::__int_traits<_IntType>::__max)
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomBitGenerator>
 result_type
 operator()(_UniformRandomBitGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomBitGenerator>
 result_type
 operator()(_UniformRandomBitGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomBitGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomBitGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomBitGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomBitGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomBitGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomBitGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomBitGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomBitGenerator& __urng,
   const param_type& __p);

      param_type _M_param;




      template<typename _Wp, typename _Urbg, typename _Up>
 static _Up
 _S_nd(_Urbg& __g, _Up __range)
 {
   using _Up_traits = __gnu_cxx::__int_traits<_Up>;
   using _Wp_traits = __gnu_cxx::__int_traits<_Wp>;
   static_assert(!_Up_traits::__is_signed, "U must be unsigned");
   static_assert(!_Wp_traits::__is_signed, "W must be unsigned");
   static_assert(_Wp_traits::__digits == (2 * _Up_traits::__digits),
   "W must be twice as wide as U");




   _Wp __product = _Wp(__g()) * _Wp(__range);
   _Up __low = _Up(__product);
   if (__low < __range)
     {
       _Up __threshold = -__range % __range;
       while (__low < __threshold)
  {
    __product = _Wp(__g()) * _Wp(__range);
    __low = _Up(__product);
  }
     }
   return __product >> _Up_traits::__digits;
 }
    };

  template<typename _IntType>
    template<typename _UniformRandomBitGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomBitGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
 typedef typename make_unsigned<result_type>::type __utype;
 typedef typename common_type<_Gresult_type, __utype>::type __uctype;

 constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
 constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
 static_assert( __urngmin < __urngmax,
     "Uniform random bit generator must define min() < max()");
 constexpr __uctype __urngrange = __urngmax - __urngmin;

 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;
 if (__urngrange > __urange)
   {


     const __uctype __uerange = __urange + 1;



     if (__urngrange == 0xffffffffffffffffUL)
       {


  long unsigned int __u64erange = __uerange;
  __ret = __extension__ _S_nd<unsigned __int128>(__urng,
              __u64erange);
       }
     else

     if (__urngrange == 0xffffffffU)
       {


  unsigned int __u32erange = __uerange;
  __ret = _S_nd<long unsigned int>(__urng, __u32erange);
       }
     else

       {

  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  do
    __ret = __uctype(__urng()) - __urngmin;
  while (__ret >= __past);
  __ret /= __scaling;
       }
   }
 else if (__urngrange < __urange)
   {
# 359 "/usr/include/c++/15/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomBitGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomBitGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
 typedef typename make_unsigned<result_type>::type __utype;
 typedef typename common_type<_Gresult_type, __utype>::type __uctype;

 static_assert( __urng.min() < __urng.max(),
     "Uniform random bit generator must define min() < max()");

 constexpr __uctype __urngmin = __urng.min();
 constexpr __uctype __urngmax = __urng.max();
 constexpr __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 444 "/usr/include/c++/15/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      constexpr __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }




}
# 66 "/usr/include/c++/15/bits/stl_algo.h" 2 3
# 75 "/usr/include/c++/15/bits/stl_algo.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
   
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
   
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, (void) ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 150 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
   
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
   
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
  return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
   
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
   
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 324 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    [[__nodiscard__]]
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 373 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 409 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 427 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 446 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 462 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {

     
     

      ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 487 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      if (__first == __last)
 return true;
      ++__first;
      return std::none_of(__first, __last, __pred);
    }
# 509 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    [[__nodiscard__]]
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {

     
     



      ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 576 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
   
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 609 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 644 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 681 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {

     
     


      const auto __n2 = std::__size_to_integer(__n);
      if (__n2 <= 0)
 return __result;

      ;
      ;

      auto __res = std::__copy_n_a(std::__niter_base(__first), __n2,
       std::__niter_base(__result), true);
      return std::__niter_wrap(__result, std::move(__res));
    }
# 718 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
   
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {

     
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }
# 769 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 803 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 872 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 903 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     

     


      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
   
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     


      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
   
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
   
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1064 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1092 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
   
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
   
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

inline namespace _V2 {


  template<typename _ForwardIterator>
   
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
   
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
   
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


      typedef typename make_unsigned<_Distance>::type _UDistance;




      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n = static_cast<_UDistance>(__n) % static_cast<_UDistance>(__k);
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n = static_cast<_UDistance>(__n) % static_cast<_UDistance>(__k);
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1329 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

}
# 1367 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
   
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
  _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
         std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
   
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1448 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
   
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      return std::rotate(__left_split, __middle, __right_split);
    }

  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      const _DistanceType __len = std::distance(__first, __last);
# 1540 "/usr/include/c++/15/bits/stl_algo.h" 3
      _Temporary_buffer<_ForwardIterator, _ValueType>
 __buf(__first, __len);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      __len,
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1566 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }





  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
   
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1660 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
   
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
# 1675 "/usr/include/c++/15/bits/stl_algo.h" 3
     
     

     

     
      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1710 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
   
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
# 1727 "/usr/include/c++/15/bits/stl_algo.h" 3
     
     

     

     

     

      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
   
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
   
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 1961 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2017 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2048 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
   
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2121 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

     

      ;
      ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2158 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     

     
                    ;
     
                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2192 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val)
    {

     
     

      ;
      ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2226 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;
     
                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 return std::rotate(__first, __middle, __last);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Compare __comp)
    {
      if (__len1 <= __len2)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
    }

  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive_resize(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __buffer_size || __len2 <= __buffer_size)
 std::__merge_adaptive(__first, __middle, __last,
         __len1, __len2, __buffer, __comp);
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         _Distance(__len1 - __len11), __len22,
         __buffer, __buffer_size);
   std::__merge_adaptive_resize(__first, __first_cut, __new_middle,
           __len11, __len22,
           __buffer, __buffer_size, __comp);
   std::__merge_adaptive_resize(__new_middle, __second_cut, __last,
           _Distance(__len1 - __len11),
           _Distance(__len2 - __len22),
           __buffer, __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
   
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      _BidirectionalIterator __new_middle
 = std::rotate(__first_cut, __middle, __second_cut);
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
   
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
   _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);
# 2510 "/usr/include/c++/15/bits/stl_algo.h" 3
      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;


      _TmpBuf __buf(__first, std::min(__len1, __len2));

      if (__builtin_expect(__buf.size() == __buf.requested_size(), true))
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(), __comp);
      else if (__builtin_expect(__buf.begin() == 0, false))
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive_resize
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);




    }
# 2549 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2591 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
   
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
        _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Compare __comp)
    {
      std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
      std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);

      std::__merge_adaptive(__first, __middle, __last,
       __middle - __first, __last - __middle,
       __buffer, __comp);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive_resize(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Distance __buffer_size,
      _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive_resize(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive_resize(__middle, __last, __buffer,
          __buffer_size, __comp);
   std::__merge_adaptive_resize(__first, __middle, __last,
           _Distance(__middle - __first),
           _Distance(__last - __middle),
           __buffer, __buffer_size,
           __comp);
 }
      else
 std::__stable_sort_adaptive(__first, __middle, __last,
        __buffer, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2779 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
   
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     return false;
   if (!__comp(__first1, __first2))
     ++__first2;
   ++__first1;
 }

      return __first2 == __last2;
    }
# 2817 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    [[__nodiscard__]]
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2862 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    [[__nodiscard__]]
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2898 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2948 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2981 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
   
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3051 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
   
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, (void)++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3136 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
   
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3171 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
   
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }
# 3200 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3215 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]]
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, (void)++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3246 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3271 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]]
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {

     
     


      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3297 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {

     

      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3318 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3398 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]] constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3426 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]] constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {

     
     


      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      ;
      pair<const _Tp*, const _Tp*> __p =
 std::__minmax_element(__l.begin(), __l.end(),
         __gnu_cxx::__ops::__iter_less_iter());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      ;
      pair<const _Tp*, const _Tp*> __p =
 std::__minmax_element(__l.begin(), __l.end(),
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
      return std::make_pair(*__p.first, *__p.second);
    }
# 3482 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
       _BinaryPredicate __pred)
    {
      using _Cat1
 = typename iterator_traits<_ForwardIterator1>::iterator_category;
      using _Cat2
 = typename iterator_traits<_ForwardIterator2>::iterator_category;
      using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
      using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
      constexpr bool __ra_iters = __and_<_It1_is_RA, _It2_is_RA>::value;
      if constexpr (__ra_iters)
 {
   if ((__last1 - __first1) != (__last2 - __first2))
     return false;
 }



      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if constexpr (__ra_iters)
 {
   if (__first1 == __last1)
     return true;
 }
      else
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 == 0 && __d2 == 0)
     return true;
   if (__d1 != __d2)
     return false;
 }

      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches = std::__count_if(__first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches
       || std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
#pragma GCC diagnostic pop
# 3578 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    [[__nodiscard__]]
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
      ;
      ;

      return
 std::__is_permutation(__first1, __last1, __first2, __last2,
         __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3606 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
     _BinaryPredicate __pred)
    {
      ;
      ;

      return std::__is_permutation(__first1, __last1, __first2, __last2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3684 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _IntType, typename _UniformRandomBitGenerator>
    pair<_IntType, _IntType>
    __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
      _UniformRandomBitGenerator&& __g)
    {
      _IntType __x
 = uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
      return std::make_pair(__x / __b1, __x % __b1);
    }
# 3706 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {

     

      ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;

      typedef typename remove_reference<_UniformRandomNumberGenerator>::type
 _Gen;
      typedef typename common_type<typename _Gen::result_type, __ud_type>::type
 __uc_type;

      const __uc_type __urngrange = __g.max() - __g.min();
      const __uc_type __urange = __uc_type(__last - __first);

      if (__urngrange / __urange >= __urange)

      {
 _RandomAccessIterator __i = __first + 1;





 if ((__urange % 2) == 0)
 {
   __distr_type __d{0, 1};
   std::iter_swap(__i++, __first + __d(__g));
 }





 while (__i != __last)
 {
   const __uc_type __swap_range = __uc_type(__i - __first) + 1;

   const pair<__uc_type, __uc_type> __pospos =
     __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);

   std::iter_swap(__i++, __first + __pospos.first);
   std::iter_swap(__i++, __first + __pospos.second);
 }

 return;
      }

      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }



# 3789 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
   
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 3851 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    [[__nodiscard__]]
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last, const _Tp& __val)
    {

     
     

      ;
# 3895 "/usr/include/c++/15/bits/stl_algo.h" 3
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3909 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3941 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    [[__nodiscard__]]
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3982 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4015 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4041 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 4067 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    [[__nodiscard__]]
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 4091 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4132 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    [[__nodiscard__]]
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4166 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4200 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4250 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
   
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, (void)++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4288 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
   
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4322 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4355 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
   
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4387 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
   
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4420 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
   
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      typedef __decltype(std::__size_to_integer(__n)) _IntSize;
      for (_IntSize __niter = std::__size_to_integer(__n);
    __niter > 0; --__niter, (void) ++__first)
 *__first = __gen();
      return __first;
    }
# 4455 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
   
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4495 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4534 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first == __last)
 return;
# 4569 "/usr/include/c++/15/bits/stl_algo.h" 3
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {

   _RandomAccessIterator __j = __first
     + (std::rand() % ((__i - __first) + 1));
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4597 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
   
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4639 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4674 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4713 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4750 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4790 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {

     

     


      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4828 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4859 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4922 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4973 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      if (__first == __last)
 return;
# 5022 "/usr/include/c++/15/bits/stl_algo.h" 3
      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;


      _TmpBuf __buf(__first, (__last - __first + 1) / 2);

      if (__builtin_expect(__buf.requested_size() == __buf.size(), true))
 std::__stable_sort_adaptive(__first,
        __first + _DistanceType(__buf.size()),
        __last, __buf.begin(), __comp);
      else if (__builtin_expect(__buf.begin() == 0, false))
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive_resize(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);



    }
# 5058 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 5093 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5164 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5215 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5288 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5338 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5413 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5465 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5546 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5598 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5652 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]] constexpr
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5677 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]] constexpr
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5716 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]] constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5741 "/usr/include/c++/15/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]] constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _Tp>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l)
    {
      ;
      return *std::__min_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_less_iter());
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    {
      ;
      return *std::__min_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _Tp>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l)
    {
      ;
      return *std::__max_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_less_iter());
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    {
      ;
      return *std::__max_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _RandomAccessIterator,
           typename _Size, typename _UniformRandomBitGenerator>
    _RandomAccessIterator
    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,
      _RandomAccessIterator __out, random_access_iterator_tag,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      __distrib_type __d{};
      _Size __sample_sz = 0;
      while (__first != __last && __sample_sz != __n)
 {
   __out[__sample_sz++] = *__first;
   ++__first;
 }
      for (auto __pop_sz = __sample_sz; __first != __last;
   ++__first, (void) ++__pop_sz)
 {
   const auto __k = __d(__g, __param_type{0, __pop_sz});
   if (__k < __n)
     __out[__k] = *__first;
 }
      return __out + __sample_sz;
    }


  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,
           typename _Size, typename _UniformRandomBitGenerator>
    _OutputIterator
    __sample(_ForwardIterator __first, _ForwardIterator __last,
      forward_iterator_tag,
      _OutputIterator __out, _Cat,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      using _USize = make_unsigned_t<_Size>;
      using _Gen = remove_reference_t<_UniformRandomBitGenerator>;
      using __uc_type = common_type_t<typename _Gen::result_type, _USize>;

      if (__first == __last)
 return __out;

      __distrib_type __d{};
      _Size __unsampled_sz = std::distance(__first, __last);
      __n = std::min(__n, __unsampled_sz);




      const __uc_type __urngrange = __g.max() - __g.min();
      if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))


        {
   while (__n != 0 && __unsampled_sz >= 2)
     {
       const pair<_Size, _Size> __p =
  __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);

       --__unsampled_sz;
       if (__p.first < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;

       if (__n == 0) break;

       --__unsampled_sz;
       if (__p.second < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;
     }
        }



      for (; __n != 0; ++__first)
 if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
   {
     *__out++ = *__first;
     --__n;
   }
      return __out;
    }
# 5929 "/usr/include/c++/15/bits/stl_algo.h" 3


}

#pragma GCC diagnostic pop
# 64 "/usr/include/c++/15/algorithm" 2 3
# 80 "/usr/include/c++/15/algorithm" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 81 "/usr/include/c++/15/algorithm" 2 3
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf_fwd.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf_fwd.hpp"

# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf_fwd.hpp"
namespace asio {

template <typename Allocator = std::allocator<char> >
class basic_streambuf;

}
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp" 2

namespace asio {
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
template <typename Allocator>

class basic_streambuf
  : public std::streambuf,
    private noncopyable
{
public:







  typedef asio::const_buffers_1 const_buffers_type;
  typedef asio::mutable_buffers_1 mutable_buffers_type;







  explicit basic_streambuf(
      std::size_t maximum_size = (std::numeric_limits<std::size_t>::max)(),
      const Allocator& allocator = Allocator())
    : max_size_(maximum_size),
      buffer_(allocator)
  {
    std::size_t pend = (std::min<std::size_t>)(max_size_, buffer_delta);
    buffer_.resize((std::max<std::size_t>)(pend, 1));
    setg(&buffer_[0], &buffer_[0], &buffer_[0]);
    setp(&buffer_[0], &buffer_[0] + pend);
  }
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
  std::size_t size() const
  {
    return pptr() - gptr();
  }






  std::size_t max_size() const
  {
    return max_size_;
  }
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
  const_buffers_type data() const
  {
    return asio::buffer(asio::const_buffer(gptr(),
          (pptr() - gptr()) * sizeof(char_type)));
  }
# 204 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
  mutable_buffers_type prepare(std::size_t n)
  {
    reserve(n);
    return asio::buffer(asio::mutable_buffer(
          pptr(), n * sizeof(char_type)));
  }
# 223 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
  void commit(std::size_t n)
  {
    if (pptr() + n > epptr())
      n = epptr() - pptr();
    pbump(static_cast<int>(n));
    setg(eback(), gptr(), pptr());
  }
# 238 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
  void consume(std::size_t n)
  {
    if (egptr() < pptr())
      setg(&buffer_[0], gptr(), pptr());
    if (gptr() + n > pptr())
      n = pptr() - gptr();
    gbump(static_cast<int>(n));
  }

protected:
  enum { buffer_delta = 128 };





  int_type underflow()
  {
    if (gptr() < pptr())
    {
      setg(&buffer_[0], gptr(), pptr());
      return traits_type::to_int_type(*gptr());
    }
    else
    {
      return traits_type::eof();
    }
  }
# 274 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp"
  int_type overflow(int_type c)
  {
    if (!traits_type::eq_int_type(c, traits_type::eof()))
    {
      if (pptr() == epptr())
      {
        std::size_t buffer_size = pptr() - gptr();
        if (buffer_size < max_size_ && max_size_ - buffer_size < buffer_delta)
        {
          reserve(max_size_ - buffer_size);
        }
        else
        {
          reserve(buffer_delta);
        }
      }

      *pptr() = traits_type::to_char_type(c);
      pbump(1);
      return c;
    }

    return traits_type::not_eof(c);
  }

  void reserve(std::size_t n)
  {

    std::size_t gnext = gptr() - &buffer_[0];
    std::size_t pnext = pptr() - &buffer_[0];
    std::size_t pend = epptr() - &buffer_[0];


    if (n <= pend - pnext)
    {
      return;
    }


    if (gnext > 0)
    {
      pnext -= gnext;
      std::memmove(&buffer_[0], &buffer_[0] + gnext, pnext);
    }


    if (n > pend - pnext)
    {
      if (n <= max_size_ && pnext <= max_size_ - n)
      {
        pend = pnext + n;
        buffer_.resize((std::max<std::size_t>)(pend, 1));
      }
      else
      {
        std::length_error ex("asio::streambuf too long");
        asio::detail::throw_exception(ex);
      }
    }


    setg(&buffer_[0], &buffer_[0], &buffer_[0] + pnext);
    setp(&buffer_[0] + pnext, &buffer_[0] + pend);
  }

private:
  std::size_t max_size_;
  std::vector<char_type, Allocator> buffer_;


  friend std::size_t read_size_helper(
      basic_streambuf& sb, std::size_t max_size)
  {
    return std::min<std::size_t>(
        std::max<std::size_t>(512, sb.buffer_.capacity() - sb.size()),
        std::min<std::size_t>(max_size, sb.max_size() - sb.size()));
  }
};



template <typename Allocator>
inline std::size_t read_size_helper(
    basic_streambuf<Allocator>& sb, std::size_t max_size)
{
  return std::min<std::size_t>(512,
      std::min<std::size_t>(max_size, sb.max_size() - sb.size()));
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 366 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp" 2
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_waitable_timer.hpp" 1
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffer.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream_fwd.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream_fwd.hpp"
namespace asio {

template <typename Stream>
class buffered_read_stream;

}
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream_fwd.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_resize_guard.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_resize_guard.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_resize_guard.hpp" 2

namespace asio {
namespace detail {


template <typename Buffer>
class buffer_resize_guard
{
public:

  buffer_resize_guard(Buffer& buffer)
    : buffer_(buffer),
      old_size_(buffer.size())
  {
  }


  ~buffer_resize_guard()
  {
    if (old_size_ != (std::numeric_limits<size_t>::max)())
    {
      buffer_.resize(old_size_);
    }
  }


  void commit()
  {
    old_size_ = (std::numeric_limits<size_t>::max)();
  }

private:

  Buffer& buffer_;


  size_t old_size_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffer_resize_guard.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp" 2

namespace asio {
namespace detail {

class buffered_stream_storage
{
public:

  typedef unsigned char byte_type;


  typedef std::size_t size_type;


  explicit buffered_stream_storage(std::size_t buffer_capacity)
    : begin_offset_(0),
      end_offset_(0),
      buffer_(buffer_capacity)
  {
  }


  void clear()
  {
    begin_offset_ = 0;
    end_offset_ = 0;
  }


  mutable_buffer data()
  {
    return asio::buffer(buffer_) + begin_offset_;
  }


  const_buffer data() const
  {
    return asio::buffer(buffer_) + begin_offset_;
  }


  bool empty() const
  {
    return begin_offset_ == end_offset_;
  }


  size_type size() const
  {
    return end_offset_ - begin_offset_;
  }


  void resize(size_type length)
  {
    
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp" 3 4
   (static_cast<void> (0))
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp"
                                    ;
    if (begin_offset_ + length <= capacity())
    {
      end_offset_ = begin_offset_ + length;
    }
    else
    {
      using namespace std;
      memmove(&buffer_[0], &buffer_[0] + begin_offset_, size());
      end_offset_ = length;
      begin_offset_ = 0;
    }
  }


  size_type capacity() const
  {
    return buffer_.size();
  }


  void consume(size_type count)
  {
    
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp" 3 4
   (static_cast<void> (0))
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp"
                                                    ;
    begin_offset_ += count;
    if (empty())
      clear();
  }

private:

  size_type begin_offset_;


  size_type end_offset_;


  std::vector<byte_type> buffer_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/buffered_stream_storage.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 2

namespace asio {
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp"
template <typename Stream>
class buffered_read_stream
  : private noncopyable
{
public:

  typedef typename remove_reference<Stream>::type next_layer_type;


  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;





  static const std::size_t default_buffer_size = 1024;



  template <typename Arg>
  explicit buffered_read_stream(Arg& a)
    : next_layer_(a),
      storage_(default_buffer_size)
  {
  }


  template <typename Arg>
  buffered_read_stream(Arg& a, std::size_t buffer_size)
    : next_layer_(a),
      storage_(buffer_size)
  {
  }


  next_layer_type& next_layer()
  {
    return next_layer_;
  }


  lowest_layer_type& lowest_layer()
  {
    return next_layer_.lowest_layer();
  }


  const lowest_layer_type& lowest_layer() const
  {
    return next_layer_.lowest_layer();
  }


  asio::io_service& get_io_service()
  {
    return next_layer_.get_io_service();
  }


  void close()
  {
    next_layer_.close();
  }


  asio::error_code close(asio::error_code& ec)
  {
    return next_layer_.close(ec);
  }



  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers)
  {
    return next_layer_.write_some(buffers);
  }



  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers,
      asio::error_code& ec)
  {
    return next_layer_.write_some(buffers, ec);
  }



  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {
    detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    next_layer_.async_write_some(buffers,
        static_cast<typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type&&>
                                                  (init.handler));

    return init.result.get();
  }



  std::size_t fill();



  std::size_t fill(asio::error_code& ec);


  template <typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_fill(ReadHandler&& handler);



  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers);



  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers,
      asio::error_code& ec);



  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(const MutableBufferSequence& buffers,
      ReadHandler&& handler);



  template <typename MutableBufferSequence>
  std::size_t peek(const MutableBufferSequence& buffers);



  template <typename MutableBufferSequence>
  std::size_t peek(const MutableBufferSequence& buffers,
      asio::error_code& ec);


  std::size_t in_avail()
  {
    return storage_.size();
  }


  std::size_t in_avail(asio::error_code& ec)
  {
    ec = asio::error_code();
    return storage_.size();
  }

private:


  template <typename MutableBufferSequence>
  std::size_t copy(const MutableBufferSequence& buffers)
  {
    std::size_t bytes_copied = asio::buffer_copy(
        buffers, storage_.data(), storage_.size());
    storage_.consume(bytes_copied);
    return bytes_copied;
  }




  template <typename MutableBufferSequence>
  std::size_t peek_copy(const MutableBufferSequence& buffers)
  {
    return asio::buffer_copy(buffers, storage_.data(), storage_.size());
  }


  Stream next_layer_;


  detail::buffered_stream_storage storage_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 241 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_read_stream.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_read_stream.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_read_stream.hpp" 2

namespace asio {

template <typename Stream>
std::size_t buffered_read_stream<Stream>::fill()
{
  detail::buffer_resize_guard<detail::buffered_stream_storage>
    resize_guard(storage_);
  std::size_t previous_size = storage_.size();
  storage_.resize(storage_.capacity());
  storage_.resize(previous_size + next_layer_.read_some(buffer(
          storage_.data() + previous_size,
          storage_.size() - previous_size)));
  resize_guard.commit();
  return storage_.size() - previous_size;
}

template <typename Stream>
std::size_t buffered_read_stream<Stream>::fill(asio::error_code& ec)
{
  detail::buffer_resize_guard<detail::buffered_stream_storage>
    resize_guard(storage_);
  std::size_t previous_size = storage_.size();
  storage_.resize(storage_.capacity());
  storage_.resize(previous_size + next_layer_.read_some(buffer(
          storage_.data() + previous_size,
          storage_.size() - previous_size),
        ec));
  resize_guard.commit();
  return storage_.size() - previous_size;
}

namespace detail
{
  template <typename ReadHandler>
  class buffered_fill_handler
  {
  public:
    buffered_fill_handler(detail::buffered_stream_storage& storage,
        std::size_t previous_size, ReadHandler& handler)
      : storage_(storage),
        previous_size_(previous_size),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    buffered_fill_handler(const buffered_fill_handler& other)
      : storage_(other.storage_),
        previous_size_(other.previous_size_),
        handler_(other.handler_)
    {
    }

    buffered_fill_handler(buffered_fill_handler&& other)
      : storage_(other.storage_),
        previous_size_(other.previous_size_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        const std::size_t bytes_transferred)
    {
      storage_.resize(previous_size_ + bytes_transferred);
      handler_(ec, bytes_transferred);
    }


    detail::buffered_stream_storage& storage_;
    std::size_t previous_size_;
    ReadHandler handler_;
  };

  template <typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      buffered_fill_handler<ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      buffered_fill_handler<ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename ReadHandler>
  inline bool asio_handler_is_continuation(
      buffered_fill_handler<ReadHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      buffered_fill_handler<ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      buffered_fill_handler<ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename Stream>
template <typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

buffered_read_stream<Stream>::async_fill(
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  std::size_t previous_size = storage_.size();
  storage_.resize(storage_.capacity());
  next_layer_.async_read_some(
      buffer(
        storage_.data() + previous_size,
        storage_.size() - previous_size),
      detail::buffered_fill_handler<typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                          >(
        storage_, previous_size, init.handler));

  return init.result.get();
}

template <typename Stream>
template <typename MutableBufferSequence>
std::size_t buffered_read_stream<Stream>::read_some(
    const MutableBufferSequence& buffers)
{
  if (asio::buffer_size(buffers) == 0)
    return 0;

  if (storage_.empty())
    this->fill();

  return this->copy(buffers);
}

template <typename Stream>
template <typename MutableBufferSequence>
std::size_t buffered_read_stream<Stream>::read_some(
    const MutableBufferSequence& buffers, asio::error_code& ec)
{
  ec = asio::error_code();

  if (asio::buffer_size(buffers) == 0)
    return 0;

  if (storage_.empty() && !this->fill(ec))
    return 0;

  return this->copy(buffers);
}

namespace detail
{
  template <typename MutableBufferSequence, typename ReadHandler>
  class buffered_read_some_handler
  {
  public:
    buffered_read_some_handler(detail::buffered_stream_storage& storage,
        const MutableBufferSequence& buffers, ReadHandler& handler)
      : storage_(storage),
        buffers_(buffers),
        handler_(handler)
    {
    }


      buffered_read_some_handler(const buffered_read_some_handler& other)
        : storage_(other.storage_),
          buffers_(other.buffers_),
          handler_(other.handler_)
      {
      }

      buffered_read_some_handler(buffered_read_some_handler&& other)
        : storage_(other.storage_),
          buffers_(other.buffers_),
          handler_(static_cast<ReadHandler&&>(other.handler_))
      {
      }


    void operator()(const asio::error_code& ec, std::size_t)
    {
      if (ec || storage_.empty())
      {
        const std::size_t length = 0;
        handler_(ec, length);
      }
      else
      {
        const std::size_t bytes_copied = asio::buffer_copy(
            buffers_, storage_.data(), storage_.size());
        storage_.consume(bytes_copied);
        handler_(ec, bytes_copied);
      }
    }


    detail::buffered_stream_storage& storage_;
    MutableBufferSequence buffers_;
    ReadHandler handler_;
  };

  template <typename MutableBufferSequence, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      buffered_read_some_handler<
        MutableBufferSequence, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename MutableBufferSequence, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      buffered_read_some_handler<
        MutableBufferSequence, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename MutableBufferSequence, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      buffered_read_some_handler<
        MutableBufferSequence, ReadHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename MutableBufferSequence,
      typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      buffered_read_some_handler<
        MutableBufferSequence, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename MutableBufferSequence,
      typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      buffered_read_some_handler<
        MutableBufferSequence, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename Stream>
template <typename MutableBufferSequence, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

buffered_read_stream<Stream>::async_read_some(
    const MutableBufferSequence& buffers,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  if (asio::buffer_size(buffers) == 0 || !storage_.empty())
  {
    next_layer_.async_read_some(asio::mutable_buffers_1(0, 0),
        detail::buffered_read_some_handler<
          MutableBufferSequence, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                              >(
            storage_, buffers, init.handler));
  }
  else
  {
    this->async_fill(detail::buffered_read_some_handler<
          MutableBufferSequence, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                              >(
            storage_, buffers, init.handler));
  }

  return init.result.get();
}

template <typename Stream>
template <typename MutableBufferSequence>
std::size_t buffered_read_stream<Stream>::peek(
    const MutableBufferSequence& buffers)
{
  if (storage_.empty())
    this->fill();
  return this->peek_copy(buffers);
}

template <typename Stream>
template <typename MutableBufferSequence>
std::size_t buffered_read_stream<Stream>::peek(
    const MutableBufferSequence& buffers, asio::error_code& ec)
{
  ec = asio::error_code();
  if (storage_.empty() && !this->fill(ec))
    return 0;
  return this->peek_copy(buffers);
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 357 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_read_stream.hpp" 2
# 243 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 2
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream_fwd.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream_fwd.hpp"
namespace asio {

template <typename Stream>
class buffered_stream;

}
# 36 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_read_stream.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream_fwd.hpp" 1
# 18 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream_fwd.hpp"
namespace asio {

template <typename Stream>
class buffered_write_stream;

}
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp" 2

namespace asio {

namespace detail {


enum default_max_transfer_size_t { default_max_transfer_size = 65536 };



inline std::size_t adapt_completion_condition_result(bool result)
{
  return result ? 0 : default_max_transfer_size;
}




inline std::size_t adapt_completion_condition_result(std::size_t result)
{
  return result;
}

class transfer_all_t
{
public:
  typedef std::size_t result_type;

  template <typename Error>
  std::size_t operator()(const Error& err, std::size_t)
  {
    return !!err ? 0 : default_max_transfer_size;
  }
};

class transfer_at_least_t
{
public:
  typedef std::size_t result_type;

  explicit transfer_at_least_t(std::size_t minimum)
    : minimum_(minimum)
  {
  }

  template <typename Error>
  std::size_t operator()(const Error& err, std::size_t bytes_transferred)
  {
    return (!!err || bytes_transferred >= minimum_)
      ? 0 : default_max_transfer_size;
  }

private:
  std::size_t minimum_;
};

class transfer_exactly_t
{
public:
  typedef std::size_t result_type;

  explicit transfer_exactly_t(std::size_t size)
    : size_(size)
  {
  }

  template <typename Error>
  std::size_t operator()(const Error& err, std::size_t bytes_transferred)
  {
    return (!!err || bytes_transferred >= size_) ? 0 :
      (size_ - bytes_transferred < default_max_transfer_size
        ? size_ - bytes_transferred : std::size_t(default_max_transfer_size));
  }

private:
  std::size_t size_;
};

}
# 138 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp"
inline detail::transfer_all_t transfer_all()
{
  return detail::transfer_all_t();
}
# 172 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp"
inline detail::transfer_at_least_t transfer_at_least(std::size_t minimum)
{
  return detail::transfer_at_least_t(minimum);
}
# 206 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp"
inline detail::transfer_exactly_t transfer_exactly(std::size_t size)
{
  return detail::transfer_exactly_t(size);
}




}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 217 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp" 2
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp" 2

namespace asio {
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename ConstBufferSequence>
std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers);
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename ConstBufferSequence>
std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
    asio::error_code& ec);
# 160 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename ConstBufferSequence,
    typename CompletionCondition>
std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition);
# 204 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename ConstBufferSequence,
    typename CompletionCondition>
std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec);
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename Allocator>
std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b);
# 266 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename Allocator>
std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,
    asio::error_code& ec);
# 305 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename Allocator,
    typename CompletionCondition>
std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition);
# 346 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename SyncWriteStream, typename Allocator,
    typename CompletionCondition>
std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec);
# 414 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename AsyncWriteStream, typename ConstBufferSequence,
    typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,
    WriteHandler&& handler);
# 488 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename AsyncWriteStream, typename ConstBufferSequence,
    typename CompletionCondition, typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition,
    WriteHandler&& handler);
# 539 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename AsyncWriteStream, typename Allocator, typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,
    WriteHandler&& handler);
# 600 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp"
template <typename AsyncWriteStream, typename Allocator,
    typename CompletionCondition, typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    WriteHandler&& handler);





}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 615 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/base_from_completion_cond.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/base_from_completion_cond.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/base_from_completion_cond.hpp" 2

namespace asio {
namespace detail {

template <typename CompletionCondition>
class base_from_completion_cond
{
protected:
  explicit base_from_completion_cond(CompletionCondition completion_condition)
    : completion_condition_(completion_condition)
  {
  }

  std::size_t check_for_completion(
      const asio::error_code& ec,
      std::size_t total_transferred)
  {
    return detail::adapt_completion_condition_result(
        completion_condition_(ec, total_transferred));
  }

private:
  CompletionCondition completion_condition_;
};

template <>
class base_from_completion_cond<transfer_all_t>
{
protected:
  explicit base_from_completion_cond(transfer_all_t)
  {
  }

  static std::size_t check_for_completion(
      const asio::error_code& ec,
      std::size_t total_transferred)
  {
    return transfer_all_t()(ec, total_transferred);
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/base_from_completion_cond.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/consuming_buffers.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/consuming_buffers.hpp"
# 1 "/usr/include/c++/15/iterator" 1 3
# 67 "/usr/include/c++/15/iterator" 3
# 1 "/usr/include/c++/15/bits/stream_iterator.h" 1 3
# 42 "/usr/include/c++/15/bits/stream_iterator.h" 3

# 42 "/usr/include/c++/15/bits/stream_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








 
# 52 "/usr/include/c++/15/bits/stream_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;



      bool _M_ok;

    public:

      constexpr istream_iterator()
      noexcept(is_nothrow_default_constructible<_Tp>::value)
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(std::__addressof(__s)), _M_ok(true)
      { _M_read(); }

      constexpr
      istream_iterator(const istream_iterator& __obj)
      noexcept(is_nothrow_copy_constructible<_Tp>::value)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }
# 100 "/usr/include/c++/15/bits/stream_iterator.h" 3
      istream_iterator& operator=(const istream_iterator&) = default;
      ~istream_iterator() = default;


      [[__nodiscard__]]
      const _Tp&
      operator*() const noexcept
      {


                        ;
 return _M_value;
      }

      [[__nodiscard__]]
      const _Tp*
      operator->() const noexcept
      { return std::__addressof((operator*())); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

    private:
      bool
      _M_equal(const istream_iterator& __x) const noexcept
      {


 return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);
      }

      void
      _M_read()
      {
        if (_M_stream && !(*_M_stream >> _M_value))
          {
            _M_stream = 0;
            _M_ok = false;
          }
      }



      [[__nodiscard__]]
      friend bool
      operator==(const istream_iterator& __x, const istream_iterator& __y)
      noexcept
      { return __x._M_equal(__y); }




      [[__nodiscard__]]
      friend bool
      operator!=(const istream_iterator& __x, const istream_iterator& __y)
      noexcept
      { return !__x._M_equal(__y); }
# 183 "/usr/include/c++/15/bits/stream_iterator.h" 3
    };
# 196 "/usr/include/c++/15/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:





      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) noexcept
      : _M_stream(std::__addressof(__s)), _M_string(0) {}
# 231 "/usr/include/c++/15/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c) noexcept
      : _M_stream(std::__addressof(__s)), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj) noexcept
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }


      ostream_iterator& operator=(const ostream_iterator&) = default;




      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string)
          *_M_stream << _M_string;
 return *this;
      }

      [[__nodiscard__]]
      ostream_iterator&
      operator*() noexcept
      { return *this; }

      ostream_iterator&
      operator++() noexcept
      { return *this; }

      ostream_iterator&
      operator++(int) noexcept
      { return *this; }
    };
#pragma GCC diagnostic pop




}
# 68 "/usr/include/c++/15/iterator" 2 3
# 80 "/usr/include/c++/15/iterator" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 81 "/usr/include/c++/15/iterator" 2 3
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/consuming_buffers.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/consuming_buffers.hpp" 2


# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/consuming_buffers.hpp"
namespace asio {
namespace detail {


template <typename Buffer, typename Buffer_Iterator>
class consuming_buffers_iterator
{
public:

  typedef std::ptrdiff_t difference_type;


  typedef Buffer value_type;


  typedef const Buffer* pointer;


  typedef const Buffer& reference;


  typedef std::forward_iterator_tag iterator_category;


  consuming_buffers_iterator()
    : at_end_(true)
  {
  }



  consuming_buffers_iterator(bool at_end, const Buffer& first,
      Buffer_Iterator begin_remainder, Buffer_Iterator end_remainder,
      std::size_t max_size)
    : at_end_(max_size > 0 ? at_end : true),
      first_(buffer(first, max_size)),
      begin_remainder_(begin_remainder),
      end_remainder_(end_remainder),
      offset_(0),
      max_size_(max_size)
  {
  }


  const Buffer& operator*() const
  {
    return dereference();
  }


  const Buffer* operator->() const
  {
    return &dereference();
  }


  consuming_buffers_iterator& operator++()
  {
    increment();
    return *this;
  }


  consuming_buffers_iterator operator++(int)
  {
    consuming_buffers_iterator tmp(*this);
    ++*this;
    return tmp;
  }


  friend bool operator==(const consuming_buffers_iterator& a,
      const consuming_buffers_iterator& b)
  {
    return a.equal(b);
  }


  friend bool operator!=(const consuming_buffers_iterator& a,
      const consuming_buffers_iterator& b)
  {
    return !a.equal(b);
  }

private:
  void increment()
  {
    if (!at_end_)
    {
      if (begin_remainder_ == end_remainder_
          || offset_ + buffer_size(first_) >= max_size_)
      {
        at_end_ = true;
      }
      else
      {
        offset_ += buffer_size(first_);
        first_ = buffer(*begin_remainder_++, max_size_ - offset_);
      }
    }
  }

  bool equal(const consuming_buffers_iterator& other) const
  {
    if (at_end_ && other.at_end_)
      return true;
    return !at_end_ && !other.at_end_
      && buffer_cast<const void*>(first_)
        == buffer_cast<const void*>(other.first_)
      && buffer_size(first_) == buffer_size(other.first_)
      && begin_remainder_ == other.begin_remainder_
      && end_remainder_ == other.end_remainder_;
  }

  const Buffer& dereference() const
  {
    return first_;
  }

  bool at_end_;
  Buffer first_;
  Buffer_Iterator begin_remainder_;
  Buffer_Iterator end_remainder_;
  std::size_t offset_;
  std::size_t max_size_;
};


template <typename Buffer, typename Buffers>
class consuming_buffers
{
public:

  typedef Buffer value_type;


  typedef consuming_buffers_iterator<Buffer, typename Buffers::const_iterator>
    const_iterator;


  consuming_buffers(const Buffers& buffers)
    : buffers_(buffers),
      at_end_(buffers_.begin() == buffers_.end()),
      begin_remainder_(buffers_.begin()),
      max_size_((std::numeric_limits<std::size_t>::max)())
  {
    if (!at_end_)
    {
      first_ = *buffers_.begin();
      ++begin_remainder_;
    }
  }


  consuming_buffers(const consuming_buffers& other)
    : buffers_(other.buffers_),
      at_end_(other.at_end_),
      first_(other.first_),
      begin_remainder_(buffers_.begin()),
      max_size_(other.max_size_)
  {
    typename Buffers::const_iterator first = other.buffers_.begin();
    typename Buffers::const_iterator second = other.begin_remainder_;
    std::advance(begin_remainder_, std::distance(first, second));
  }


  consuming_buffers& operator=(const consuming_buffers& other)
  {
    buffers_ = other.buffers_;
    at_end_ = other.at_end_;
    first_ = other.first_;
    begin_remainder_ = buffers_.begin();
    typename Buffers::const_iterator first = other.buffers_.begin();
    typename Buffers::const_iterator second = other.begin_remainder_;
    std::advance(begin_remainder_, std::distance(first, second));
    max_size_ = other.max_size_;
    return *this;
  }


  const_iterator begin() const
  {
    return const_iterator(at_end_, first_,
        begin_remainder_, buffers_.end(), max_size_);
  }


  const_iterator end() const
  {
    return const_iterator();
  }


  void prepare(std::size_t max_size)
  {
    max_size_ = max_size;
  }


  void consume(std::size_t size)
  {

    while (size > 0 && !at_end_)
    {
      if (buffer_size(first_) <= size)
      {
        size -= buffer_size(first_);
        if (begin_remainder_ == buffers_.end())
          at_end_ = true;
        else
          first_ = *begin_remainder_++;
      }
      else
      {
        first_ = first_ + size;
        size = 0;
      }
    }


    while (!at_end_ && buffer_size(first_) == 0)
    {
      if (begin_remainder_ == buffers_.end())
        at_end_ = true;
      else
        first_ = *begin_remainder_++;
    }
  }

private:
  Buffers buffers_;
  bool at_end_;
  Buffer first_;
  typename Buffers::const_iterator begin_remainder_;
  std::size_t max_size_;
};



template <typename Buffer>
class consuming_buffers<Buffer, asio::null_buffers>
  : public asio::null_buffers
{
public:
  consuming_buffers(const asio::null_buffers&)
  {

  }

  void prepare(std::size_t)
  {

  }

  void consume(std::size_t)
  {

  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 291 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/consuming_buffers.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/dependent_type.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/dependent_type.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/dependent_type.hpp" 2

namespace asio {
namespace detail {

template <typename DependsOn, typename T>
struct dependent_type
{
  typedef T type;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/dependent_type.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp" 2

namespace asio {

template <typename SyncWriteStream, typename ConstBufferSequence,
    typename CompletionCondition>
std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  ec = asio::error_code();
  asio::detail::consuming_buffers<
    const_buffer, ConstBufferSequence> tmp(buffers);
  std::size_t total_transferred = 0;
  tmp.prepare(detail::adapt_completion_condition_result(
        completion_condition(ec, total_transferred)));
  while (tmp.begin() != tmp.end())
  {
    std::size_t bytes_transferred = s.write_some(tmp, ec);
    tmp.consume(bytes_transferred);
    total_transferred += bytes_transferred;
    tmp.prepare(detail::adapt_completion_condition_result(
          completion_condition(ec, total_transferred)));
  }
  return total_transferred;
}

template <typename SyncWriteStream, typename ConstBufferSequence>
inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write(s, buffers, transfer_all(), ec);
  asio::detail::throw_error(ec, "write");
  return bytes_transferred;
}

template <typename SyncWriteStream, typename ConstBufferSequence>
inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
    asio::error_code& ec)
{
  return write(s, buffers, transfer_all(), ec);
}

template <typename SyncWriteStream, typename ConstBufferSequence,
    typename CompletionCondition>
inline std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write(s, buffers, completion_condition, ec);
  asio::detail::throw_error(ec, "write");
  return bytes_transferred;
}



template <typename SyncWriteStream, typename Allocator,
    typename CompletionCondition>
std::size_t write(SyncWriteStream& s,
    asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  std::size_t bytes_transferred = write(s, b.data(), completion_condition, ec);
  b.consume(bytes_transferred);
  return bytes_transferred;
}

template <typename SyncWriteStream, typename Allocator>
inline std::size_t write(SyncWriteStream& s,
    asio::basic_streambuf<Allocator>& b)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write(s, b, transfer_all(), ec);
  asio::detail::throw_error(ec, "write");
  return bytes_transferred;
}

template <typename SyncWriteStream, typename Allocator>
inline std::size_t write(SyncWriteStream& s,
    asio::basic_streambuf<Allocator>& b,
    asio::error_code& ec)
{
  return write(s, b, transfer_all(), ec);
}

template <typename SyncWriteStream, typename Allocator,
    typename CompletionCondition>
inline std::size_t write(SyncWriteStream& s,
    asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write(s, b, completion_condition, ec);
  asio::detail::throw_error(ec, "write");
  return bytes_transferred;
}



namespace detail
{
  template <typename AsyncWriteStream, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  class write_op
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_op(AsyncWriteStream& stream, const ConstBufferSequence& buffers,
        CompletionCondition completion_condition, WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_op(const write_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_op(write_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      switch (start_ = start)
      {
        case 1:
        buffers_.prepare(this->check_for_completion(ec, total_transferred_));
        for (;;)
        {
          stream_.async_write_some(buffers_,
              static_cast<write_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          buffers_.consume(bytes_transferred);
          buffers_.prepare(this->check_for_completion(ec, total_transferred_));
          if ((!ec && bytes_transferred == 0)
              || buffers_.begin() == buffers_.end())
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncWriteStream& stream_;
    asio::detail::consuming_buffers<
      const_buffer, ConstBufferSequence> buffers_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };

  template <typename AsyncWriteStream,
      typename CompletionCondition, typename WriteHandler>
  class write_op<AsyncWriteStream, asio::mutable_buffers_1,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_op(AsyncWriteStream& stream,
        const asio::mutable_buffers_1& buffers,
        CompletionCondition completion_condition,
        WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffer_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_op(const write_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_op(write_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          stream_.async_write_some(
              asio::buffer(buffer_ + total_transferred_, n),
              static_cast<write_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == asio::buffer_size(buffer_))
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncWriteStream& stream_;
    asio::mutable_buffer buffer_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };

  template <typename AsyncWriteStream,
      typename CompletionCondition, typename WriteHandler>
  class write_op<AsyncWriteStream, asio::const_buffers_1,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_op(AsyncWriteStream& stream,
        const asio::const_buffers_1& buffers,
        CompletionCondition completion_condition,
        WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffer_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_op(const write_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_op(write_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          stream_.async_write_some(
              asio::buffer(buffer_ + total_transferred_, n),
              static_cast<write_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == asio::buffer_size(buffer_))
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncWriteStream& stream_;
    asio::const_buffer buffer_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };

  template <typename AsyncWriteStream, typename Elem,
      typename CompletionCondition, typename WriteHandler>
  class write_op<AsyncWriteStream, boost::array<Elem, 2>,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_op(AsyncWriteStream& stream, const boost::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_op(const write_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_op(write_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          boost::array<asio::const_buffer, 2> >::type bufs = {{
        asio::const_buffer(buffers_[0]),
        asio::const_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          stream_.async_write_some(bufs, static_cast<write_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncWriteStream& stream_;
    boost::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };



  template <typename AsyncWriteStream, typename Elem,
      typename CompletionCondition, typename WriteHandler>
  class write_op<AsyncWriteStream, std::array<Elem, 2>,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_op(AsyncWriteStream& stream, const std::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_op(const write_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_op(write_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          std::array<asio::const_buffer, 2> >::type bufs = {{
        asio::const_buffer(buffers_[0]),
        asio::const_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          stream_.async_write_some(bufs, static_cast<write_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncWriteStream& stream_;
    std::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };



  template <typename AsyncWriteStream, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline void* asio_handler_allocate(std::size_t size,
      write_op<AsyncWriteStream, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncWriteStream, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      write_op<AsyncWriteStream, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncWriteStream, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline bool asio_handler_is_continuation(
      write_op<AsyncWriteStream, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncWriteStream,
      typename ConstBufferSequence, typename CompletionCondition,
      typename WriteHandler>
  inline void asio_handler_invoke(Function& function,
      write_op<AsyncWriteStream, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncWriteStream,
      typename ConstBufferSequence, typename CompletionCondition,
      typename WriteHandler>
  inline void asio_handler_invoke(const Function& function,
      write_op<AsyncWriteStream, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncWriteStream, typename ConstBufferSequence,
  typename CompletionCondition, typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  detail::write_op<AsyncWriteStream, ConstBufferSequence,
    CompletionCondition, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        s, buffers, completion_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

template <typename AsyncWriteStream, typename ConstBufferSequence,
    typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  detail::write_op<AsyncWriteStream, ConstBufferSequence,
    detail::transfer_all_t, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        s, buffers, transfer_all(), init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}



namespace detail
{
  template <typename Allocator, typename WriteHandler>
  class write_streambuf_handler
  {
  public:
    write_streambuf_handler(asio::basic_streambuf<Allocator>& streambuf,
        WriteHandler& handler)
      : streambuf_(streambuf),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_streambuf_handler(const write_streambuf_handler& other)
      : streambuf_(other.streambuf_),
        handler_(other.handler_)
    {
    }

    write_streambuf_handler(write_streambuf_handler&& other)
      : streambuf_(other.streambuf_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        const std::size_t bytes_transferred)
    {
      streambuf_.consume(bytes_transferred);
      handler_(ec, bytes_transferred);
    }


    asio::basic_streambuf<Allocator>& streambuf_;
    WriteHandler handler_;
  };

  template <typename Allocator, typename WriteHandler>
  inline void* asio_handler_allocate(std::size_t size,
      write_streambuf_handler<Allocator, WriteHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename Allocator, typename WriteHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      write_streambuf_handler<Allocator, WriteHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename Allocator, typename WriteHandler>
  inline bool asio_handler_is_continuation(
      write_streambuf_handler<Allocator, WriteHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
        this_handler->handler_);
  }

  template <typename Function, typename Allocator, typename WriteHandler>
  inline void asio_handler_invoke(Function& function,
      write_streambuf_handler<Allocator, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename Allocator, typename WriteHandler>
  inline void asio_handler_invoke(const Function& function,
      write_streambuf_handler<Allocator, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncWriteStream, typename Allocator,
    typename CompletionCondition, typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s,
    asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  async_write(s, b.data(), completion_condition,
    detail::write_streambuf_handler<Allocator, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        b, init.handler));

  return init.result.get();
}

template <typename AsyncWriteStream, typename Allocator, typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write(AsyncWriteStream& s,
    asio::basic_streambuf<Allocator>& b,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  async_write(s, b.data(), transfer_all(),
    detail::write_streambuf_handler<Allocator, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        b, init.handler));

  return init.result.get();
}



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 764 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write.hpp" 2
# 617 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 2

namespace asio {
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp"
template <typename Stream>
class buffered_write_stream
  : private noncopyable
{
public:

  typedef typename remove_reference<Stream>::type next_layer_type;


  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;





  static const std::size_t default_buffer_size = 1024;



  template <typename Arg>
  explicit buffered_write_stream(Arg& a)
    : next_layer_(a),
      storage_(default_buffer_size)
  {
  }


  template <typename Arg>
  buffered_write_stream(Arg& a, std::size_t buffer_size)
    : next_layer_(a),
      storage_(buffer_size)
  {
  }


  next_layer_type& next_layer()
  {
    return next_layer_;
  }


  lowest_layer_type& lowest_layer()
  {
    return next_layer_.lowest_layer();
  }


  const lowest_layer_type& lowest_layer() const
  {
    return next_layer_.lowest_layer();
  }


  asio::io_service& get_io_service()
  {
    return next_layer_.get_io_service();
  }


  void close()
  {
    next_layer_.close();
  }


  asio::error_code close(asio::error_code& ec)
  {
    return next_layer_.close(ec);
  }




  std::size_t flush();




  std::size_t flush(asio::error_code& ec);


  template <typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_flush(WriteHandler&& handler);



  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers);



  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers,
      asio::error_code& ec);



  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(const ConstBufferSequence& buffers,
      WriteHandler&& handler);



  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers)
  {
    return next_layer_.read_some(buffers);
  }



  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return next_layer_.read_some(buffers, ec);
  }



  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {
    detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    next_layer_.async_read_some(buffers,
        static_cast<typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type&&>
                                                  (init.handler));

    return init.result.get();
  }



  template <typename MutableBufferSequence>
  std::size_t peek(const MutableBufferSequence& buffers)
  {
    return next_layer_.peek(buffers);
  }



  template <typename MutableBufferSequence>
  std::size_t peek(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return next_layer_.peek(buffers, ec);
  }


  std::size_t in_avail()
  {
    return next_layer_.in_avail();
  }


  std::size_t in_avail(asio::error_code& ec)
  {
    return next_layer_.in_avail(ec);
  }

private:


  template <typename ConstBufferSequence>
  std::size_t copy(const ConstBufferSequence& buffers);


  Stream next_layer_;


  detail::buffered_stream_storage storage_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 233 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_write_stream.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_write_stream.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_write_stream.hpp" 2

namespace asio {

template <typename Stream>
std::size_t buffered_write_stream<Stream>::flush()
{
  std::size_t bytes_written = write(next_layer_,
      buffer(storage_.data(), storage_.size()));
  storage_.consume(bytes_written);
  return bytes_written;
}

template <typename Stream>
std::size_t buffered_write_stream<Stream>::flush(asio::error_code& ec)
{
  std::size_t bytes_written = write(next_layer_,
      buffer(storage_.data(), storage_.size()),
      transfer_all(), ec);
  storage_.consume(bytes_written);
  return bytes_written;
}

namespace detail
{
  template <typename WriteHandler>
  class buffered_flush_handler
  {
  public:
    buffered_flush_handler(detail::buffered_stream_storage& storage,
        WriteHandler& handler)
      : storage_(storage),
        handler_(handler)
    {
    }


    buffered_flush_handler(const buffered_flush_handler& other)
      : storage_(other.storage_),
        handler_(other.handler_)
    {
    }

    buffered_flush_handler(buffered_flush_handler&& other)
      : storage_(other.storage_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        const std::size_t bytes_written)
    {
      storage_.consume(bytes_written);
      handler_(ec, bytes_written);
    }


    detail::buffered_stream_storage& storage_;
    WriteHandler handler_;
  };

  template <typename WriteHandler>
  inline void* asio_handler_allocate(std::size_t size,
      buffered_flush_handler<WriteHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename WriteHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      buffered_flush_handler<WriteHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename WriteHandler>
  inline bool asio_handler_is_continuation(
      buffered_flush_handler<WriteHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename WriteHandler>
  inline void asio_handler_invoke(Function& function,
      buffered_flush_handler<WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename WriteHandler>
  inline void asio_handler_invoke(const Function& function,
      buffered_flush_handler<WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename Stream>
template <typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

buffered_write_stream<Stream>::async_flush(
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  async_write(next_layer_, buffer(storage_.data(), storage_.size()),
      detail::buffered_flush_handler<typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                           >(
        storage_, init.handler));

  return init.result.get();
}

template <typename Stream>
template <typename ConstBufferSequence>
std::size_t buffered_write_stream<Stream>::write_some(
    const ConstBufferSequence& buffers)
{
  if (asio::buffer_size(buffers) == 0)
    return 0;

  if (storage_.size() == storage_.capacity())
    this->flush();

  return this->copy(buffers);
}

template <typename Stream>
template <typename ConstBufferSequence>
std::size_t buffered_write_stream<Stream>::write_some(
    const ConstBufferSequence& buffers, asio::error_code& ec)
{
  ec = asio::error_code();

  if (asio::buffer_size(buffers) == 0)
    return 0;

  if (storage_.size() == storage_.capacity() && !flush(ec))
    return 0;

  return this->copy(buffers);
}

namespace detail
{
  template <typename ConstBufferSequence, typename WriteHandler>
  class buffered_write_some_handler
  {
  public:
    buffered_write_some_handler(detail::buffered_stream_storage& storage,
        const ConstBufferSequence& buffers, WriteHandler& handler)
      : storage_(storage),
        buffers_(buffers),
        handler_(handler)
    {
    }


      buffered_write_some_handler(const buffered_write_some_handler& other)
        : storage_(other.storage_),
          buffers_(other.buffers_),
          handler_(other.handler_)
      {
      }

      buffered_write_some_handler(buffered_write_some_handler&& other)
        : storage_(other.storage_),
          buffers_(other.buffers_),
          handler_(static_cast<WriteHandler&&>(other.handler_))
      {
      }


    void operator()(const asio::error_code& ec, std::size_t)
    {
      if (ec)
      {
        const std::size_t length = 0;
        handler_(ec, length);
      }
      else
      {
        std::size_t orig_size = storage_.size();
        std::size_t space_avail = storage_.capacity() - orig_size;
        std::size_t bytes_avail = asio::buffer_size(buffers_);
        std::size_t length = bytes_avail < space_avail
          ? bytes_avail : space_avail;
        storage_.resize(orig_size + length);
        const std::size_t bytes_copied = asio::buffer_copy(
            storage_.data() + orig_size, buffers_, length);
        handler_(ec, bytes_copied);
      }
    }


    detail::buffered_stream_storage& storage_;
    ConstBufferSequence buffers_;
    WriteHandler handler_;
  };

  template <typename ConstBufferSequence, typename WriteHandler>
  inline void* asio_handler_allocate(std::size_t size,
      buffered_write_some_handler<
        ConstBufferSequence, WriteHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename ConstBufferSequence, typename WriteHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      buffered_write_some_handler<
        ConstBufferSequence, WriteHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename ConstBufferSequence, typename WriteHandler>
  inline bool asio_handler_is_continuation(
      buffered_write_some_handler<
        ConstBufferSequence, WriteHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename ConstBufferSequence,
      typename WriteHandler>
  inline void asio_handler_invoke(Function& function,
      buffered_write_some_handler<
        ConstBufferSequence, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename ConstBufferSequence,
      typename WriteHandler>
  inline void asio_handler_invoke(const Function& function,
      buffered_write_some_handler<
        ConstBufferSequence, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename Stream>
template <typename ConstBufferSequence, typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

buffered_write_stream<Stream>::async_write_some(
    const ConstBufferSequence& buffers,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  if (asio::buffer_size(buffers) == 0
      || storage_.size() < storage_.capacity())
  {
    next_layer_.async_write_some(asio::const_buffers_1(0, 0),
        detail::buffered_write_some_handler<
          ConstBufferSequence, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                               >(
            storage_, buffers, init.handler));
  }
  else
  {
    this->async_flush(detail::buffered_write_some_handler<
          ConstBufferSequence, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                               >(
            storage_, buffers, init.handler));
  }

  return init.result.get();
}

template <typename Stream>
template <typename ConstBufferSequence>
std::size_t buffered_write_stream<Stream>::copy(
    const ConstBufferSequence& buffers)
{
  std::size_t orig_size = storage_.size();
  std::size_t space_avail = storage_.capacity() - orig_size;
  std::size_t bytes_avail = asio::buffer_size(buffers);
  std::size_t length = bytes_avail < space_avail ? bytes_avail : space_avail;
  storage_.resize(orig_size + length);
  return asio::buffer_copy(
      storage_.data() + orig_size, buffers, length);
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 337 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/buffered_write_stream.hpp" 2
# 235 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 2
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream_fwd.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp" 2

namespace asio {
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp"
template <typename Stream>
class buffered_stream
  : private noncopyable
{
public:

  typedef typename remove_reference<Stream>::type next_layer_type;


  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;


  template <typename Arg>
  explicit buffered_stream(Arg& a)
    : inner_stream_impl_(a),
      stream_impl_(inner_stream_impl_)
  {
  }


  template <typename Arg>
  explicit buffered_stream(Arg& a, std::size_t read_buffer_size,
      std::size_t write_buffer_size)
    : inner_stream_impl_(a, write_buffer_size),
      stream_impl_(inner_stream_impl_, read_buffer_size)
  {
  }


  next_layer_type& next_layer()
  {
    return stream_impl_.next_layer().next_layer();
  }


  lowest_layer_type& lowest_layer()
  {
    return stream_impl_.lowest_layer();
  }


  const lowest_layer_type& lowest_layer() const
  {
    return stream_impl_.lowest_layer();
  }


  asio::io_service& get_io_service()
  {
    return stream_impl_.get_io_service();
  }


  void close()
  {
    stream_impl_.close();
  }


  asio::error_code close(asio::error_code& ec)
  {
    return stream_impl_.close(ec);
  }




  std::size_t flush()
  {
    return stream_impl_.next_layer().flush();
  }




  std::size_t flush(asio::error_code& ec)
  {
    return stream_impl_.next_layer().flush(ec);
  }


  template <typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_flush(WriteHandler&& handler)
  {
    return stream_impl_.next_layer().async_flush(
        static_cast<WriteHandler&&>(handler));
  }



  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers)
  {
    return stream_impl_.write_some(buffers);
  }



  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers,
      asio::error_code& ec)
  {
    return stream_impl_.write_some(buffers, ec);
  }



  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {
    return stream_impl_.async_write_some(buffers,
        static_cast<WriteHandler&&>(handler));
  }



  std::size_t fill()
  {
    return stream_impl_.fill();
  }



  std::size_t fill(asio::error_code& ec)
  {
    return stream_impl_.fill(ec);
  }


  template <typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_fill(ReadHandler&& handler)
  {
    return stream_impl_.async_fill(static_cast<ReadHandler&&>(handler));
  }



  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers)
  {
    return stream_impl_.read_some(buffers);
  }



  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return stream_impl_.read_some(buffers, ec);
  }



  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {
    return stream_impl_.async_read_some(buffers,
        static_cast<ReadHandler&&>(handler));
  }



  template <typename MutableBufferSequence>
  std::size_t peek(const MutableBufferSequence& buffers)
  {
    return stream_impl_.peek(buffers);
  }



  template <typename MutableBufferSequence>
  std::size_t peek(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return stream_impl_.peek(buffers, ec);
  }


  std::size_t in_avail()
  {
    return stream_impl_.in_avail();
  }


  std::size_t in_avail(asio::error_code& ec)
  {
    return stream_impl_.in_avail(ec);
  }

private:

  typedef buffered_write_stream<Stream> write_stream_type;
  write_stream_type inner_stream_impl_;


  typedef buffered_read_stream<write_stream_type&> read_stream_type;
  read_stream_type stream_impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 257 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_stream.hpp" 2
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream_fwd.hpp" 1
# 38 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffered_write_stream.hpp" 1
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 2

namespace asio {

namespace detail
{
  template <bool IsMutable>
  struct buffers_iterator_types_helper;

  template <>
  struct buffers_iterator_types_helper<false>
  {
    typedef const_buffer buffer_type;
    template <typename ByteType>
    struct byte_type
    {
      typedef typename add_const<ByteType>::type type;
    };
  };

  template <>
  struct buffers_iterator_types_helper<true>
  {
    typedef mutable_buffer buffer_type;
    template <typename ByteType>
    struct byte_type
    {
      typedef ByteType type;
    };
  };

  template <typename BufferSequence, typename ByteType>
  struct buffers_iterator_types
  {
    enum
    {
      is_mutable = is_convertible<
          typename BufferSequence::value_type,
          mutable_buffer>::value
    };
    typedef buffers_iterator_types_helper<is_mutable> helper;
    typedef typename helper::buffer_type buffer_type;
    typedef typename helper::template byte_type<ByteType>::type byte_type;
  };
}


template <typename BufferSequence, typename ByteType = char>
class buffers_iterator
{
private:
  typedef typename detail::buffers_iterator_types<
      BufferSequence, ByteType>::buffer_type buffer_type;

public:

  typedef std::ptrdiff_t difference_type;


  typedef ByteType value_type;
# 95 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
  typedef typename detail::buffers_iterator_types<
      BufferSequence, ByteType>::byte_type* pointer;
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
  typedef typename detail::buffers_iterator_types<
      BufferSequence, ByteType>::byte_type& reference;



  typedef std::random_access_iterator_tag iterator_category;


  buffers_iterator()
    : current_buffer_(),
      current_buffer_position_(0),
      begin_(),
      current_(),
      end_(),
      position_(0)
  {
  }


  static buffers_iterator begin(const BufferSequence& buffers)



  {
    buffers_iterator new_iter;
    new_iter.begin_ = buffers.begin();
    new_iter.current_ = buffers.begin();
    new_iter.end_ = buffers.end();
    while (new_iter.current_ != new_iter.end_)
    {
      new_iter.current_buffer_ = *new_iter.current_;
      if (asio::buffer_size(new_iter.current_buffer_) > 0)
        break;
      ++new_iter.current_;
    }
    return new_iter;
  }


  static buffers_iterator end(const BufferSequence& buffers)



  {
    buffers_iterator new_iter;
    new_iter.begin_ = buffers.begin();
    new_iter.current_ = buffers.begin();
    new_iter.end_ = buffers.end();
    while (new_iter.current_ != new_iter.end_)
    {
      buffer_type buffer = *new_iter.current_;
      new_iter.position_ += asio::buffer_size(buffer);
      ++new_iter.current_;
    }
    return new_iter;
  }


  reference operator*() const
  {
    return dereference();
  }


  pointer operator->() const
  {
    return &dereference();
  }


  reference operator[](std::ptrdiff_t difference) const
  {
    buffers_iterator tmp(*this);
    tmp.advance(difference);
    return *tmp;
  }


  buffers_iterator& operator++()
  {
    increment();
    return *this;
  }


  buffers_iterator operator++(int)
  {
    buffers_iterator tmp(*this);
    ++*this;
    return tmp;
  }


  buffers_iterator& operator--()
  {
    decrement();
    return *this;
  }


  buffers_iterator operator--(int)
  {
    buffers_iterator tmp(*this);
    --*this;
    return tmp;
  }


  buffers_iterator& operator+=(std::ptrdiff_t difference)
  {
    advance(difference);
    return *this;
  }


  buffers_iterator& operator-=(std::ptrdiff_t difference)
  {
    advance(-difference);
    return *this;
  }


  friend buffers_iterator operator+(const buffers_iterator& iter,
      std::ptrdiff_t difference)
  {
    buffers_iterator tmp(iter);
    tmp.advance(difference);
    return tmp;
  }


  friend buffers_iterator operator+(std::ptrdiff_t difference,
      const buffers_iterator& iter)
  {
    buffers_iterator tmp(iter);
    tmp.advance(difference);
    return tmp;
  }


  friend buffers_iterator operator-(const buffers_iterator& iter,
      std::ptrdiff_t difference)
  {
    buffers_iterator tmp(iter);
    tmp.advance(-difference);
    return tmp;
  }


  friend std::ptrdiff_t operator-(const buffers_iterator& a,
      const buffers_iterator& b)
  {
    return b.distance_to(a);
  }


  friend bool operator==(const buffers_iterator& a, const buffers_iterator& b)
  {
    return a.equal(b);
  }


  friend bool operator!=(const buffers_iterator& a, const buffers_iterator& b)
  {
    return !a.equal(b);
  }


  friend bool operator<(const buffers_iterator& a, const buffers_iterator& b)
  {
    return a.distance_to(b) > 0;
  }


  friend bool operator<=(const buffers_iterator& a, const buffers_iterator& b)
  {
    return !(b < a);
  }


  friend bool operator>(const buffers_iterator& a, const buffers_iterator& b)
  {
    return b < a;
  }


  friend bool operator>=(const buffers_iterator& a, const buffers_iterator& b)
  {
    return !(a < b);
  }

private:

  reference dereference() const
  {
    return buffer_cast<pointer>(current_buffer_)[current_buffer_position_];
  }


  bool equal(const buffers_iterator& other) const
  {
    return position_ == other.position_;
  }


  void increment()
  {
    
# 315 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 3 4
   (static_cast<void> (0))
# 315 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
                                                            ;
    ++position_;


    ++current_buffer_position_;
    if (current_buffer_position_ != asio::buffer_size(current_buffer_))
      return;


    ++current_;
    current_buffer_position_ = 0;
    while (current_ != end_)
    {
      current_buffer_ = *current_;
      if (asio::buffer_size(current_buffer_) > 0)
        return;
      ++current_;
    }
  }


  void decrement()
  {
    
# 338 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 3 4
   (static_cast<void> (0))
# 338 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
                                                         ;
    --position_;


    if (current_buffer_position_ != 0)
    {
      --current_buffer_position_;
      return;
    }


    typename BufferSequence::const_iterator iter = current_;
    while (iter != begin_)
    {
      --iter;
      buffer_type buffer = *iter;
      std::size_t buffer_size = asio::buffer_size(buffer);
      if (buffer_size > 0)
      {
        current_ = iter;
        current_buffer_ = buffer;
        current_buffer_position_ = buffer_size - 1;
        return;
      }
    }
  }


  void advance(std::ptrdiff_t n)
  {
    if (n > 0)
    {
      
# 370 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 3 4
     (static_cast<void> (0))
# 370 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
                                                              ;
      for (;;)
      {
        std::ptrdiff_t current_buffer_balance
          = asio::buffer_size(current_buffer_)
          - current_buffer_position_;


        if (current_buffer_balance > n)
        {
          position_ += n;
          current_buffer_position_ += n;
          return;
        }


        n -= current_buffer_balance;
        position_ += current_buffer_balance;



        if (++current_ == end_)
        {
          
# 393 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 3 4
         (static_cast<void> (0))
# 393 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
                                                        ;
          current_buffer_ = buffer_type();
          current_buffer_position_ = 0;
          return;
        }
        current_buffer_ = *current_;
        current_buffer_position_ = 0;
      }
    }
    else if (n < 0)
    {
      std::size_t abs_n = -n;
      
# 405 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 3 4
     (static_cast<void> (0))
# 405 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
                                                                ;
      for (;;)
      {

        if (current_buffer_position_ >= abs_n)
        {
          position_ -= abs_n;
          current_buffer_position_ -= abs_n;
          return;
        }


        abs_n -= current_buffer_position_;
        position_ -= current_buffer_position_;


        if (current_ == begin_)
        {
          
# 423 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 3 4
         (static_cast<void> (0))
# 423 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp"
                                                            ;
          current_buffer_position_ = 0;
          return;
        }


        typename BufferSequence::const_iterator iter = current_;
        while (iter != begin_)
        {
          --iter;
          buffer_type buffer = *iter;
          std::size_t buffer_size = asio::buffer_size(buffer);
          if (buffer_size > 0)
          {
            current_ = iter;
            current_buffer_ = buffer;
            current_buffer_position_ = buffer_size;
            break;
          }
        }
      }
    }
  }


  std::ptrdiff_t distance_to(const buffers_iterator& other) const
  {
    return other.position_ - position_;
  }

  buffer_type current_buffer_;
  std::size_t current_buffer_position_;
  typename BufferSequence::const_iterator begin_;
  typename BufferSequence::const_iterator current_;
  typename BufferSequence::const_iterator end_;
  std::size_t position_;
};


template <typename BufferSequence>
inline buffers_iterator<BufferSequence> buffers_begin(
    const BufferSequence& buffers)
{
  return buffers_iterator<BufferSequence>::begin(buffers);
}


template <typename BufferSequence>
inline buffers_iterator<BufferSequence> buffers_end(
    const BufferSequence& buffers)
{
  return buffers_iterator<BufferSequence>::end(buffers);
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 480 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 2
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/completion_condition.hpp" 1
# 41 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp" 2

namespace asio {
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService, typename Iterator>
Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin);
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService, typename Iterator>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, asio::error_code& ec);
# 132 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService, typename Iterator>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end);
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService, typename Iterator>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, asio::error_code& ec);
# 232 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, ConnectCondition connect_condition);
# 304 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin,
    ConnectCondition connect_condition, asio::error_code& ec);
# 366 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin,
    Iterator end, ConnectCondition connect_condition);
# 436 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, ConnectCondition connect_condition,
    asio::error_code& ec);
# 517 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService,
    typename Iterator, typename ComposedConnectHandler>
typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, ComposedConnectHandler&& handler);
# 588 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService,
    typename Iterator, typename ComposedConnectHandler>
typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end,
    ComposedConnectHandler&& handler);
# 698 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService, typename Iterator,
    typename ConnectCondition, typename ComposedConnectHandler>
typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s, Iterator begin,
    ConnectCondition connect_condition,
    ComposedConnectHandler&& handler);
# 807 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp"
template <typename Protocol, typename SocketService, typename Iterator,
    typename ConnectCondition, typename ComposedConnectHandler>
typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, ConnectCondition connect_condition,
    ComposedConnectHandler&& handler);



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 820 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/connect.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/connect.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/connect.hpp" 2

namespace asio {

namespace detail
{
  struct default_connect_condition
  {
    template <typename Iterator>
    Iterator operator()(const asio::error_code&, Iterator next)
    {
      return next;
    }
  };
}

template <typename Protocol, typename SocketService, typename Iterator>
Iterator connect(basic_socket<Protocol, SocketService>& s, Iterator begin)
{
  asio::error_code ec;
  Iterator result = connect(s, begin, ec);
  asio::detail::throw_error(ec, "connect");
  return result;
}

template <typename Protocol, typename SocketService, typename Iterator>
inline Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, asio::error_code& ec)
{
  return connect(s, begin, Iterator(), detail::default_connect_condition(), ec);
}

template <typename Protocol, typename SocketService, typename Iterator>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end)
{
  asio::error_code ec;
  Iterator result = connect(s, begin, end, ec);
  asio::detail::throw_error(ec, "connect");
  return result;
}

template <typename Protocol, typename SocketService, typename Iterator>
inline Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, asio::error_code& ec)
{
  return connect(s, begin, end, detail::default_connect_condition(), ec);
}

template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, ConnectCondition connect_condition)
{
  asio::error_code ec;
  Iterator result = connect(s, begin, connect_condition, ec);
  asio::detail::throw_error(ec, "connect");
  return result;
}

template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
inline Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, ConnectCondition connect_condition,
    asio::error_code& ec)
{
  return connect(s, begin, Iterator(), connect_condition, ec);
}

template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, ConnectCondition connect_condition)
{
  asio::error_code ec;
  Iterator result = connect(s, begin, end, connect_condition, ec);
  asio::detail::throw_error(ec, "connect");
  return result;
}

template <typename Protocol, typename SocketService,
    typename Iterator, typename ConnectCondition>
Iterator connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, ConnectCondition connect_condition,
    asio::error_code& ec)
{
  ec = asio::error_code();

  for (Iterator iter = begin; iter != end; ++iter)
  {
    iter = connect_condition(ec, iter);
    if (iter != end)
    {
      s.close(ec);
      s.connect(*iter, ec);
      if (!ec)
        return iter;
    }
    else
      break;
  }

  if (!ec)
    ec = asio::error::not_found;

  return end;
}

namespace detail
{

  template <typename ConnectCondition>
  class base_from_connect_condition
  {
  protected:
    explicit base_from_connect_condition(
        const ConnectCondition& connect_condition)
      : connect_condition_(connect_condition)
    {
    }

    template <typename Iterator>
    void check_condition(const asio::error_code& ec,
        Iterator& iter, Iterator& end)
    {
      if (iter != end)
        iter = connect_condition_(ec, static_cast<const Iterator&>(iter));
    }

  private:
    ConnectCondition connect_condition_;
  };



  template <>
  class base_from_connect_condition<default_connect_condition>
  {
  protected:
    explicit base_from_connect_condition(const default_connect_condition&)
    {
    }

    template <typename Iterator>
    void check_condition(const asio::error_code&, Iterator&, Iterator&)
    {
    }
  };

  template <typename Protocol, typename SocketService, typename Iterator,
      typename ConnectCondition, typename ComposedConnectHandler>
  class connect_op : base_from_connect_condition<ConnectCondition>
  {
  public:
    connect_op(basic_socket<Protocol, SocketService>& sock,
        const Iterator& begin, const Iterator& end,
        const ConnectCondition& connect_condition,
        ComposedConnectHandler& handler)
      : base_from_connect_condition<ConnectCondition>(connect_condition),
        socket_(sock),
        iter_(begin),
        end_(end),
        start_(0),
        handler_(static_cast<ComposedConnectHandler&&>(handler))
    {
    }


    connect_op(const connect_op& other)
      : base_from_connect_condition<ConnectCondition>(other),
        socket_(other.socket_),
        iter_(other.iter_),
        end_(other.end_),
        start_(other.start_),
        handler_(other.handler_)
    {
    }

    connect_op(connect_op&& other)
      : base_from_connect_condition<ConnectCondition>(other),
        socket_(other.socket_),
        iter_(other.iter_),
        end_(other.end_),
        start_(other.start_),
        handler_(static_cast<ComposedConnectHandler&&>(other.handler_))
    {
    }


    void operator()(asio::error_code ec, int start = 0)
    {
      switch (start_ = start)
      {
        case 1:
        for (;;)
        {
          this->check_condition(ec, iter_, end_);

          if (iter_ != end_)
          {
            socket_.close(ec);
            socket_.async_connect(*iter_,
                static_cast<connect_op&&>(*this));
            return;
          }

          if (start)
          {
            ec = asio::error::not_found;
            socket_.get_io_service().post(detail::bind_handler(*this, ec));
            return;
          }

          default:

          if (iter_ == end_)
            break;

          if (!socket_.is_open())
          {
            ec = asio::error::operation_aborted;
            break;
          }

          if (!ec)
            break;

          ++iter_;
        }

        handler_(static_cast<const asio::error_code&>(ec),
            static_cast<const Iterator&>(iter_));
      }
    }


    basic_socket<Protocol, SocketService>& socket_;
    Iterator iter_;
    Iterator end_;
    int start_;
    ComposedConnectHandler handler_;
  };

  template <typename Protocol, typename SocketService, typename Iterator,
      typename ConnectCondition, typename ComposedConnectHandler>
  inline void* asio_handler_allocate(std::size_t size,
      connect_op<Protocol, SocketService, Iterator,
        ConnectCondition, ComposedConnectHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename Protocol, typename SocketService, typename Iterator,
      typename ConnectCondition, typename ComposedConnectHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      connect_op<Protocol, SocketService, Iterator,
        ConnectCondition, ComposedConnectHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename Protocol, typename SocketService, typename Iterator,
      typename ConnectCondition, typename ComposedConnectHandler>
  inline bool asio_handler_is_continuation(
      connect_op<Protocol, SocketService, Iterator,
        ConnectCondition, ComposedConnectHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
        this_handler->handler_);
  }

  template <typename Function, typename Protocol,
      typename SocketService, typename Iterator,
      typename ConnectCondition, typename ComposedConnectHandler>
  inline void asio_handler_invoke(Function& function,
      connect_op<Protocol, SocketService, Iterator,
        ConnectCondition, ComposedConnectHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename Protocol,
      typename SocketService, typename Iterator,
      typename ConnectCondition, typename ComposedConnectHandler>
  inline void asio_handler_invoke(const Function& function,
      connect_op<Protocol, SocketService, Iterator,
        ConnectCondition, ComposedConnectHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename Protocol, typename SocketService,
    typename Iterator, typename ComposedConnectHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, ComposedConnectHandler&& handler)
{


  typedef typename handler_type<ComposedConnectHandler, void(asio::error_code, Iterator)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const Iterator*>(0))) == 1, "ComposedConnectHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const Iterator>()), char(0))> __attribute__((__unused__))
                                                 type_check;

  detail::async_result_init<ComposedConnectHandler,
    void (asio::error_code, Iterator)> init(
      static_cast<ComposedConnectHandler&&>(handler));

  detail::connect_op<Protocol, SocketService, Iterator,
    detail::default_connect_condition, typename handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type
                                                                >(s,
        begin, Iterator(), detail::default_connect_condition(), init.handler)(
          asio::error_code(), 1);

  return init.result.get();
}

template <typename Protocol, typename SocketService,
    typename Iterator, typename ComposedConnectHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end,
    ComposedConnectHandler&& handler)
{


  typedef typename handler_type<ComposedConnectHandler, void(asio::error_code, Iterator)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const Iterator*>(0))) == 1, "ComposedConnectHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const Iterator>()), char(0))> __attribute__((__unused__))
                                                 type_check;

  detail::async_result_init<ComposedConnectHandler,
    void (asio::error_code, Iterator)> init(
      static_cast<ComposedConnectHandler&&>(handler));

  detail::connect_op<Protocol, SocketService, Iterator,
    detail::default_connect_condition, typename handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type
                                                                >(s,
        begin, end, detail::default_connect_condition(), init.handler)(
          asio::error_code(), 1);

  return init.result.get();
}

template <typename Protocol, typename SocketService, typename Iterator,
    typename ConnectCondition, typename ComposedConnectHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, ConnectCondition connect_condition,
    ComposedConnectHandler&& handler)
{


  typedef typename handler_type<ComposedConnectHandler, void(asio::error_code, Iterator)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const Iterator*>(0))) == 1, "ComposedConnectHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const Iterator>()), char(0))> __attribute__((__unused__))
                                                 type_check;

  detail::async_result_init<ComposedConnectHandler,
    void (asio::error_code, Iterator)> init(
      static_cast<ComposedConnectHandler&&>(handler));

  detail::connect_op<Protocol, SocketService, Iterator,
    ConnectCondition, typename handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type
                                                                >(s,
        begin, Iterator(), connect_condition, init.handler)(
          asio::error_code(), 1);

  return init.result.get();
}

template <typename Protocol, typename SocketService, typename Iterator,
    typename ConnectCondition, typename ComposedConnectHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type>::type

async_connect(basic_socket<Protocol, SocketService>& s,
    Iterator begin, Iterator end, ConnectCondition connect_condition,
    ComposedConnectHandler&& handler)
{


  typedef typename handler_type<ComposedConnectHandler, void(asio::error_code, Iterator)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const Iterator*>(0))) == 1, "ComposedConnectHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const Iterator>()), char(0))> __attribute__((__unused__))
                                                 type_check;

  detail::async_result_init<ComposedConnectHandler,
    void (asio::error_code, Iterator)> init(
      static_cast<ComposedConnectHandler&&>(handler));

  detail::connect_op<Protocol, SocketService, Iterator,
    ConnectCondition, typename handler_type<ComposedConnectHandler, void (asio::error_code, Iterator)>::type
                                                                >(s,
        begin, end, connect_condition, init.handler)(
          asio::error_code(), 1);

  return init.result.get();
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 429 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/connect.hpp" 2
# 822 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/connect.hpp" 2
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/coroutine.hpp" 1
# 14 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/coroutine.hpp"
namespace asio {
namespace detail {

class coroutine_ref;

}
# 241 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/coroutine.hpp"
class coroutine
{
public:

  coroutine() : value_(0) {}


  bool is_child() const { return value_ < 0; }


  bool is_parent() const { return !is_child(); }


  bool is_complete() const { return value_ == -1; }

private:
  friend class detail::coroutine_ref;
  int value_;
};


namespace detail {

class coroutine_ref
{
public:
  coroutine_ref(coroutine& c) : value_(c.value_), modified_(false) {}
  coroutine_ref(coroutine* c) : value_(c->value_), modified_(false) {}
  ~coroutine_ref() { if (!modified_) value_ = -1; }
  operator int() const { return value_; }
  int& operator=(int v) { modified_ = true; return value_ = v; }
private:
  void operator=(const coroutine_ref&);
  int& value_;
  bool modified_;
};

}
}
# 43 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/datagram_socket_service.hpp" 1
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/deadline_timer_service.hpp" 1
# 45 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/deadline_timer.hpp" 1
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error.hpp" 1
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/error_code.hpp" 1
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/endpoint.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/endpoint.hpp" 2

namespace asio {
namespace generic {
namespace detail {


class endpoint
{
public:

  inline endpoint();


  inline endpoint(const void* sock_addr,
      std::size_t sock_addr_size, int sock_protocol);


  endpoint(const endpoint& other)
    : data_(other.data_),
      size_(other.size_),
      protocol_(other.protocol_)
  {
  }


  endpoint& operator=(const endpoint& other)
  {
    data_ = other.data_;
    size_ = other.size_;
    protocol_ = other.protocol_;
    return *this;
  }


  int family() const
  {
    return data_.base.sa_family;
  }


  int protocol() const
  {
    return protocol_;
  }


  asio::detail::socket_addr_type* data()
  {
    return &data_.base;
  }


  const asio::detail::socket_addr_type* data() const
  {
    return &data_.base;
  }


  std::size_t size() const
  {
    return size_;
  }


  inline void resize(std::size_t size);


  std::size_t capacity() const
  {
    return sizeof(asio::detail::sockaddr_storage_type);
  }


  inline friend bool operator==(
      const endpoint& e1, const endpoint& e2);


  inline friend bool operator<(
      const endpoint& e1, const endpoint& e2);

private:

  union data_union
  {
    asio::detail::socket_addr_type base;
    asio::detail::sockaddr_storage_type generic;
  } data_;


  std::size_t size_;


  int protocol_;


  inline void init(const void* sock_addr,
      std::size_t sock_addr_size, int sock_protocol);
};

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 128 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/endpoint.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/impl/endpoint.ipp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/impl/endpoint.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/endpoint.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/impl/endpoint.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/impl/endpoint.ipp" 2

namespace asio {
namespace generic {
namespace detail {

endpoint::endpoint()
{
  init(0, 0, 0);
}

endpoint::endpoint(const void* sock_addr,
    std::size_t sock_addr_size, int sock_protocol)
{
  init(sock_addr, sock_addr_size, sock_protocol);
}

void endpoint::resize(std::size_t new_size)
{
  if (new_size > sizeof(asio::detail::sockaddr_storage_type))
  {
    asio::error_code ec(asio::error::invalid_argument);
    asio::detail::throw_error(ec);
  }
  else
  {
    size_ = new_size;
    protocol_ = 0;
  }
}

bool operator==(const endpoint& e1, const endpoint& e2)
{
  using namespace std;
  return e1.size() == e2.size() && memcmp(e1.data(), e2.data(), e1.size()) == 0;
}

bool operator<(const endpoint& e1, const endpoint& e2)
{
  if (e1.protocol() < e2.protocol())
    return true;

  if (e1.protocol() > e2.protocol())
    return false;

  using namespace std;
  std::size_t compare_size = e1.size() < e2.size() ? e1.size() : e2.size();
  int compare_result = memcmp(e1.data(), e2.data(), compare_size);

  if (compare_result < 0)
    return true;

  if (compare_result > 0)
    return false;

  return e1.size() < e2.size();
}

void endpoint::init(const void* sock_addr,
    std::size_t sock_addr_size, int sock_protocol)
{
  if (sock_addr_size > sizeof(asio::detail::sockaddr_storage_type))
  {
    asio::error_code ec(asio::error::invalid_argument);
    asio::detail::throw_error(ec);
  }

  using namespace std;
  memset(&data_.generic, 0, sizeof(asio::detail::sockaddr_storage_type));
  memcpy(&data_.generic, sock_addr, sock_addr_size);

  size_ = sock_addr_size;
  protocol_ = sock_protocol;
}

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/impl/endpoint.ipp" 2
# 131 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/detail/endpoint.hpp" 2
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp" 2

namespace asio {
namespace generic {
# 41 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp"
template <typename Protocol>
class basic_endpoint
{
public:

  typedef Protocol protocol_type;






  typedef asio::detail::socket_addr_type data_type;



  basic_endpoint()
  {
  }


  basic_endpoint(const void* socket_address,
      std::size_t socket_address_size, int socket_protocol = 0)
    : impl_(socket_address, socket_address_size, socket_protocol)
  {
  }


  template <typename Endpoint>
  basic_endpoint(const Endpoint& endpoint)
    : impl_(endpoint.data(), endpoint.size(), endpoint.protocol().protocol())
  {
  }


  basic_endpoint(const basic_endpoint& other)
    : impl_(other.impl_)
  {
  }



  basic_endpoint(basic_endpoint&& other)
    : impl_(other.impl_)
  {
  }



  basic_endpoint& operator=(const basic_endpoint& other)
  {
    impl_ = other.impl_;
    return *this;
  }



  basic_endpoint& operator=(basic_endpoint&& other)
  {
    impl_ = other.impl_;
    return *this;
  }



  protocol_type protocol() const
  {
    return protocol_type(impl_.family(), impl_.protocol());
  }


  data_type* data()
  {
    return impl_.data();
  }


  const data_type* data() const
  {
    return impl_.data();
  }


  std::size_t size() const
  {
    return impl_.size();
  }


  void resize(std::size_t new_size)
  {
    impl_.resize(new_size);
  }


  std::size_t capacity() const
  {
    return impl_.capacity();
  }


  friend bool operator==(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return e1.impl_ == e2.impl_;
  }


  friend bool operator!=(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return !(e1.impl_ == e2.impl_);
  }


  friend bool operator<(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return e1.impl_ < e2.impl_;
  }


  friend bool operator>(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return e2.impl_ < e1.impl_;
  }


  friend bool operator<=(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return !(e2 < e1);
  }


  friend bool operator>=(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return !(e1 < e2);
  }

private:

  asio::generic::detail::endpoint impl_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 192 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp" 2
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_datagram_socket.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/basic_endpoint.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp" 2

namespace asio {
namespace generic {
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp"
class datagram_protocol
{
public:

  datagram_protocol(int address_family, int socket_protocol)
    : family_(address_family),
      protocol_(socket_protocol)
  {
  }





  template <typename Protocol>
  datagram_protocol(const Protocol& source_protocol)
    : family_(source_protocol.family()),
      protocol_(source_protocol.protocol())
  {
    if (source_protocol.type() != type())
    {
      std::bad_cast ex;
      asio::detail::throw_exception(ex);
    }
  }


  int type() const
  {
    return 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp" 3 4
          SOCK_DGRAM
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp"
                                 ;
  }


  int protocol() const
  {
    return protocol_;
  }


  int family() const
  {
    return family_;
  }


  friend bool operator==(const datagram_protocol& p1,
      const datagram_protocol& p2)
  {
    return p1.family_ == p2.family_ && p1.protocol_ == p2.protocol_;
  }


  friend bool operator!=(const datagram_protocol& p1,
      const datagram_protocol& p2)
  {
    return !(p1 == p2);
  }


  typedef basic_endpoint<datagram_protocol> endpoint;


  typedef basic_datagram_socket<datagram_protocol> socket;

private:
  int family_;
  int protocol_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/datagram_protocol.hpp" 2
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_raw_socket.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp" 2

namespace asio {
namespace generic {
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp"
class raw_protocol
{
public:

  raw_protocol(int address_family, int socket_protocol)
    : family_(address_family),
      protocol_(socket_protocol)
  {
  }





  template <typename Protocol>
  raw_protocol(const Protocol& source_protocol)
    : family_(source_protocol.family()),
      protocol_(source_protocol.protocol())
  {
    if (source_protocol.type() != type())
    {
      std::bad_cast ex;
      asio::detail::throw_exception(ex);
    }
  }


  int type() const
  {
    return 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp" 3 4
          SOCK_RAW
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp"
                               ;
  }


  int protocol() const
  {
    return protocol_;
  }


  int family() const
  {
    return family_;
  }


  friend bool operator==(const raw_protocol& p1, const raw_protocol& p2)
  {
    return p1.family_ == p2.family_ && p1.protocol_ == p2.protocol_;
  }


  friend bool operator!=(const raw_protocol& p1, const raw_protocol& p2)
  {
    return !(p1 == p2);
  }


  typedef basic_endpoint<raw_protocol> endpoint;


  typedef basic_raw_socket<raw_protocol> socket;

private:
  int family_;
  int protocol_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 120 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/raw_protocol.hpp" 2
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_seq_packet_socket.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp" 2

namespace asio {
namespace generic {
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp"
class seq_packet_protocol
{
public:

  seq_packet_protocol(int address_family, int socket_protocol)
    : family_(address_family),
      protocol_(socket_protocol)
  {
  }






  template <typename Protocol>
  seq_packet_protocol(const Protocol& source_protocol)
    : family_(source_protocol.family()),
      protocol_(source_protocol.protocol())
  {
    if (source_protocol.type() != type())
    {
      std::bad_cast ex;
      asio::detail::throw_exception(ex);
    }
  }


  int type() const
  {
    return 
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp" 3 4
          SOCK_SEQPACKET
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp"
                                     ;
  }


  int protocol() const
  {
    return protocol_;
  }


  int family() const
  {
    return family_;
  }


  friend bool operator==(const seq_packet_protocol& p1,
      const seq_packet_protocol& p2)
  {
    return p1.family_ == p2.family_ && p1.protocol_ == p2.protocol_;
  }


  friend bool operator!=(const seq_packet_protocol& p1,
      const seq_packet_protocol& p2)
  {
    return !(p1 == p2);
  }


  typedef basic_endpoint<seq_packet_protocol> endpoint;


  typedef basic_seq_packet_socket<seq_packet_protocol> socket;

private:
  int family_;
  int protocol_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 121 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/seq_packet_protocol.hpp" 2
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_iostream.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_stream_socket.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp" 2

namespace asio {
namespace generic {
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp"
class stream_protocol
{
public:

  stream_protocol(int address_family, int socket_protocol)
    : family_(address_family),
      protocol_(socket_protocol)
  {
  }





  template <typename Protocol>
  stream_protocol(const Protocol& source_protocol)
    : family_(source_protocol.family()),
      protocol_(source_protocol.protocol())
  {
    if (source_protocol.type() != type())
    {
      std::bad_cast ex;
      asio::detail::throw_exception(ex);
    }
  }


  int type() const
  {
    return 
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp" 3 4
          SOCK_STREAM
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp"
                                  ;
  }


  int protocol() const
  {
    return protocol_;
  }


  int family() const
  {
    return family_;
  }


  friend bool operator==(const stream_protocol& p1, const stream_protocol& p2)
  {
    return p1.family_ == p2.family_ && p1.protocol_ == p2.protocol_;
  }


  friend bool operator!=(const stream_protocol& p1, const stream_protocol& p2)
  {
    return !(p1 == p2);
  }


  typedef basic_endpoint<stream_protocol> endpoint;


  typedef basic_stream_socket<stream_protocol> socket;



  typedef basic_socket_iostream<stream_protocol> iostream;


private:
  int family_;
  int protocol_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 126 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/generic/stream_protocol.hpp" 2
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_alloc_hook.hpp" 1
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_continuation_hook.hpp" 1
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_invoke_hook.hpp" 1
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/handler_type.hpp" 1
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/io_service.hpp" 1
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/winsock_init.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 2






# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 2

namespace asio {
namespace ip {
# 43 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp"
class address_v4
{
public:
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp"
  typedef asio::detail::array<unsigned char, 4> bytes_type;



  address_v4()
  {
    addr_.s_addr = 0;
  }


  inline explicit address_v4(const bytes_type& bytes);


  inline explicit address_v4(unsigned long addr);


  address_v4(const address_v4& other)
    : addr_(other.addr_)
  {
  }



  address_v4(address_v4&& other)
    : addr_(other.addr_)
  {
  }



  address_v4& operator=(const address_v4& other)
  {
    addr_ = other.addr_;
    return *this;
  }



  address_v4& operator=(address_v4&& other)
  {
    addr_ = other.addr_;
    return *this;
  }



  inline bytes_type to_bytes() const;


  inline unsigned long to_ulong() const;


  inline std::string to_string() const;


  inline std::string to_string(asio::error_code& ec) const;


  inline static address_v4 from_string(const char* str);


  inline static address_v4 from_string(
      const char* str, asio::error_code& ec);


  inline static address_v4 from_string(const std::string& str);


  inline static address_v4 from_string(
      const std::string& str, asio::error_code& ec);


  inline bool is_loopback() const;


  inline bool is_unspecified() const;


  inline bool is_class_a() const;


  inline bool is_class_b() const;


  inline bool is_class_c() const;


  inline bool is_multicast() const;


  friend bool operator==(const address_v4& a1, const address_v4& a2)
  {
    return a1.addr_.s_addr == a2.addr_.s_addr;
  }


  friend bool operator!=(const address_v4& a1, const address_v4& a2)
  {
    return a1.addr_.s_addr != a2.addr_.s_addr;
  }


  friend bool operator<(const address_v4& a1, const address_v4& a2)
  {
    return a1.to_ulong() < a2.to_ulong();
  }


  friend bool operator>(const address_v4& a1, const address_v4& a2)
  {
    return a1.to_ulong() > a2.to_ulong();
  }


  friend bool operator<=(const address_v4& a1, const address_v4& a2)
  {
    return a1.to_ulong() <= a2.to_ulong();
  }


  friend bool operator>=(const address_v4& a1, const address_v4& a2)
  {
    return a1.to_ulong() >= a2.to_ulong();
  }


  static address_v4 any()
  {
    return address_v4();
  }


  static address_v4 loopback()
  {
    return address_v4(0x7F000001);
  }


  static address_v4 broadcast()
  {
    return address_v4(0xFFFFFFFF);
  }



  inline static address_v4 broadcast(
      const address_v4& addr, const address_v4& mask);



  inline static address_v4 netmask(const address_v4& addr);

private:

  asio::detail::in4_addr_type addr_;
};
# 225 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp"
template <typename Elem, typename Traits>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os, const address_v4& addr);



}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 235 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.hpp" 2

namespace asio {
namespace ip {

template <typename Elem, typename Traits>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
{
  asio::error_code ec;
  std::string s = addr.to_string(ec);
  if (ec)
  {
    if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
      asio::detail::throw_error(ec);
    else
      os.setstate(std::basic_ostream<Elem, Traits>::failbit);
  }
  else
    for (std::string::iterator i = s.begin(); i != s.end(); ++i)
      os << os.widen(*i);
  return os;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.hpp" 2
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp" 2

namespace asio {
namespace ip {

address_v4::address_v4(const address_v4::bytes_type& bytes)
{
# 43 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp"
  using namespace std;
  memcpy(&addr_.s_addr, bytes.data(), 4);
}

address_v4::address_v4(unsigned long addr)
{

  if (addr > 0xFFFFFFFF)
  {
    std::out_of_range ex("address_v4 from unsigned long");
    asio::detail::throw_exception(ex);
  }


  addr_.s_addr = asio::detail::socket_ops::host_to_network_long(
      static_cast<asio::detail::u_long_type>(addr));
}

address_v4::bytes_type address_v4::to_bytes() const
{
  using namespace std;
  bytes_type bytes;

  memcpy(bytes.data(), &addr_.s_addr, 4);



  return bytes;
}

unsigned long address_v4::to_ulong() const
{
  return asio::detail::socket_ops::network_to_host_long(addr_.s_addr);
}

std::string address_v4::to_string() const
{
  asio::error_code ec;
  std::string addr = to_string(ec);
  asio::detail::throw_error(ec);
  return addr;
}

std::string address_v4::to_string(asio::error_code& ec) const
{
  char addr_str[asio::detail::max_addr_v4_str_len];
  const char* addr =
    asio::detail::socket_ops::inet_ntop(
        
# 91 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp" 3 4
       2
# 91 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp"
                           , &addr_, addr_str,
        asio::detail::max_addr_v4_str_len, 0, ec);
  if (addr == 0)
    return std::string();
  return addr;
}

address_v4 address_v4::from_string(const char* str)
{
  asio::error_code ec;
  address_v4 addr = from_string(str, ec);
  asio::detail::throw_error(ec);
  return addr;
}

address_v4 address_v4::from_string(
    const char* str, asio::error_code& ec)
{
  address_v4 tmp;
  if (asio::detail::socket_ops::inet_pton(
        
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp" 3 4
       2
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp"
                           , str, &tmp.addr_, 0, ec) <= 0)
    return address_v4();
  return tmp;
}

address_v4 address_v4::from_string(const std::string& str)
{
  return from_string(str.c_str());
}

address_v4 address_v4::from_string(
    const std::string& str, asio::error_code& ec)
{
  return from_string(str.c_str(), ec);
}

bool address_v4::is_loopback() const
{
  return (to_ulong() & 0xFF000000) == 0x7F000000;
}

bool address_v4::is_unspecified() const
{
  return to_ulong() == 0;
}

bool address_v4::is_class_a() const
{
  return (to_ulong() & 0x80000000) == 0;
}

bool address_v4::is_class_b() const
{
  return (to_ulong() & 0xC0000000) == 0x80000000;
}

bool address_v4::is_class_c() const
{
  return (to_ulong() & 0xE0000000) == 0xC0000000;
}

bool address_v4::is_multicast() const
{
  return (to_ulong() & 0xF0000000) == 0xE0000000;
}

address_v4 address_v4::broadcast(const address_v4& addr, const address_v4& mask)
{
  return address_v4(addr.to_ulong() | (mask.to_ulong() ^ 0xFFFFFFFF));
}

address_v4 address_v4::netmask(const address_v4& addr)
{
  if (addr.is_class_a())
    return address_v4(0xFF000000);
  if (addr.is_class_b())
    return address_v4(0xFFFF0000);
  if (addr.is_class_c())
    return address_v4(0xFFFFFF00);
  return address_v4(0xFFFFFFFF);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v4.ipp" 2
# 239 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 2

namespace asio {
namespace ip {
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp"
class address_v6
{
public:
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp"
  typedef asio::detail::array<unsigned char, 16> bytes_type;



  inline address_v6();


  inline explicit address_v6(const bytes_type& bytes,
      unsigned long scope_id = 0);


  inline address_v6(const address_v6& other);



  inline address_v6(address_v6&& other);



  inline address_v6& operator=(const address_v6& other);



  inline address_v6& operator=(address_v6&& other);






  unsigned long scope_id() const
  {
    return scope_id_;
  }





  void scope_id(unsigned long id)
  {
    scope_id_ = id;
  }


  inline bytes_type to_bytes() const;


  inline std::string to_string() const;


  inline std::string to_string(asio::error_code& ec) const;


  inline static address_v6 from_string(const char* str);


  inline static address_v6 from_string(
      const char* str, asio::error_code& ec);


  inline static address_v6 from_string(const std::string& str);


  inline static address_v6 from_string(
      const std::string& str, asio::error_code& ec);


  inline address_v4 to_v4() const;


  inline bool is_loopback() const;


  inline bool is_unspecified() const;


  inline bool is_link_local() const;


  inline bool is_site_local() const;


  inline bool is_v4_mapped() const;


  inline bool is_v4_compatible() const;


  inline bool is_multicast() const;


  inline bool is_multicast_global() const;


  inline bool is_multicast_link_local() const;


  inline bool is_multicast_node_local() const;


  inline bool is_multicast_org_local() const;


  inline bool is_multicast_site_local() const;


  inline friend bool operator==(
      const address_v6& a1, const address_v6& a2);


  friend bool operator!=(const address_v6& a1, const address_v6& a2)
  {
    return !(a1 == a2);
  }


  inline friend bool operator<(
      const address_v6& a1, const address_v6& a2);


  friend bool operator>(const address_v6& a1, const address_v6& a2)
  {
    return a2 < a1;
  }


  friend bool operator<=(const address_v6& a1, const address_v6& a2)
  {
    return !(a2 < a1);
  }


  friend bool operator>=(const address_v6& a1, const address_v6& a2)
  {
    return !(a1 < a2);
  }


  static address_v6 any()
  {
    return address_v6();
  }


  inline static address_v6 loopback();


  inline static address_v6 v4_mapped(const address_v4& addr);


  inline static address_v6 v4_compatible(const address_v4& addr);

private:

  asio::detail::in6_addr_type addr_;


  unsigned long scope_id_;
};
# 230 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp"
template <typename Elem, typename Traits>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os, const address_v6& addr);



}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 240 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.hpp" 2

namespace asio {
namespace ip {

template <typename Elem, typename Traits>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
{
  asio::error_code ec;
  std::string s = addr.to_string(ec);
  if (ec)
  {
    if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
      asio::detail::throw_error(ec);
    else
      os.setstate(std::basic_ostream<Elem, Traits>::failbit);
  }
  else
    for (std::string::iterator i = s.begin(); i != s.end(); ++i)
      os << os.widen(*i);
  return os;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.hpp" 2
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 2

namespace asio {
namespace ip {

address_v6::address_v6()
  : addr_(),
    scope_id_(0)
{
}

address_v6::address_v6(const address_v6::bytes_type& bytes,
    unsigned long scope)
  : scope_id_(scope)
{
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
  using namespace std;
  memcpy(addr_.
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
              __in6_u.__u6_addr8
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                     , bytes.data(), 16);
}

address_v6::address_v6(const address_v6& other)
  : addr_(other.addr_),
    scope_id_(other.scope_id_)
{
}


address_v6::address_v6(address_v6&& other)
  : addr_(other.addr_),
    scope_id_(other.scope_id_)
{
}


address_v6& address_v6::operator=(const address_v6& other)
{
  addr_ = other.addr_;
  scope_id_ = other.scope_id_;
  return *this;
}


address_v6& address_v6::operator=(address_v6&& other)
{
  addr_ = other.addr_;
  scope_id_ = other.scope_id_;
  return *this;
}


address_v6::bytes_type address_v6::to_bytes() const
{
  using namespace std;
  bytes_type bytes;

  memcpy(bytes.data(), addr_.
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                            __in6_u.__u6_addr8
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                   , 16);



  return bytes;
}

std::string address_v6::to_string() const
{
  asio::error_code ec;
  std::string addr = to_string(ec);
  asio::detail::throw_error(ec);
  return addr;
}

std::string address_v6::to_string(asio::error_code& ec) const
{
  char addr_str[asio::detail::max_addr_v6_str_len];
  const char* addr =
    asio::detail::socket_ops::inet_ntop(
        
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
       10
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                            , &addr_, addr_str,
        asio::detail::max_addr_v6_str_len, scope_id_, ec);
  if (addr == 0)
    return std::string();
  return addr;
}

address_v6 address_v6::from_string(const char* str)
{
  asio::error_code ec;
  address_v6 addr = from_string(str, ec);
  asio::detail::throw_error(ec);
  return addr;
}

address_v6 address_v6::from_string(
    const char* str, asio::error_code& ec)
{
  address_v6 tmp;
  if (asio::detail::socket_ops::inet_pton(
        
# 133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
       10
# 133 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                            , str, &tmp.addr_, &tmp.scope_id_, ec) <= 0)
    return address_v6();
  return tmp;
}

address_v6 address_v6::from_string(const std::string& str)
{
  return from_string(str.c_str());
}

address_v6 address_v6::from_string(
    const std::string& str, asio::error_code& ec)
{
  return from_string(str.c_str(), ec);
}

address_v4 address_v6::to_v4() const
{
  if (!is_v4_mapped() && !is_v4_compatible())
  {
    std::bad_cast ex;
    asio::detail::throw_exception(ex);
  }

  address_v4::bytes_type v4_bytes = { { addr_.
# 157 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                             __in6_u.__u6_addr8
# 157 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                    [12],
    addr_.
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
         __in6_u.__u6_addr8
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                [13], addr_.
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                            __in6_u.__u6_addr8
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                   [14], addr_.
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 158 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [15] } };
  return address_v4(v4_bytes);
}

bool address_v6::is_loopback() const
{
  return ((addr_.
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0) && (addr_.
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 164 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [1] == 0)
      && (addr_.
# 165 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 165 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [2] == 0) && (addr_.
# 165 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 165 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [3] == 0)
      && (addr_.
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [4] == 0) && (addr_.
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 166 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [5] == 0)
      && (addr_.
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [6] == 0) && (addr_.
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 167 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [7] == 0)
      && (addr_.
# 168 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 168 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [8] == 0) && (addr_.
# 168 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 168 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [9] == 0)
      && (addr_.
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [10] == 0) && (addr_.
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 169 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [11] == 0)
      && (addr_.
# 170 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 170 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [12] == 0) && (addr_.
# 170 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 170 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [13] == 0)
      && (addr_.
# 171 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 171 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [14] == 0) && (addr_.
# 171 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 171 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [15] == 1));
}

bool address_v6::is_unspecified() const
{
  return ((addr_.
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0) && (addr_.
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 176 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [1] == 0)
      && (addr_.
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [2] == 0) && (addr_.
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [3] == 0)
      && (addr_.
# 178 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 178 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [4] == 0) && (addr_.
# 178 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 178 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [5] == 0)
      && (addr_.
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [6] == 0) && (addr_.
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [7] == 0)
      && (addr_.
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [8] == 0) && (addr_.
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [9] == 0)
      && (addr_.
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [10] == 0) && (addr_.
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [11] == 0)
      && (addr_.
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [12] == 0) && (addr_.
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [13] == 0)
      && (addr_.
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [14] == 0) && (addr_.
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [15] == 0));
}

bool address_v6::is_link_local() const
{
  return ((addr_.
# 188 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 188 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xfe) && ((addr_.
# 188 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 188 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0xc0) == 0x80));
}

bool address_v6::is_site_local() const
{
  return ((addr_.
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xfe) && ((addr_.
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 193 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0xc0) == 0xc0));
}

bool address_v6::is_v4_mapped() const
{
  return ((addr_.
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0) && (addr_.
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [1] == 0)
      && (addr_.
# 199 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 199 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [2] == 0) && (addr_.
# 199 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 199 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [3] == 0)
      && (addr_.
# 200 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 200 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [4] == 0) && (addr_.
# 200 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 200 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [5] == 0)
      && (addr_.
# 201 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 201 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [6] == 0) && (addr_.
# 201 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 201 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [7] == 0)
      && (addr_.
# 202 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 202 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [8] == 0) && (addr_.
# 202 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 202 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [9] == 0)
      && (addr_.
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [10] == 0xff) && (addr_.
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                              __in6_u.__u6_addr8
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                     [11] == 0xff));
}

bool address_v6::is_v4_compatible() const
{
  return ((addr_.
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0) && (addr_.
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 208 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [1] == 0)
      && (addr_.
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [2] == 0) && (addr_.
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [3] == 0)
      && (addr_.
# 210 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 210 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [4] == 0) && (addr_.
# 210 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 210 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [5] == 0)
      && (addr_.
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [6] == 0) && (addr_.
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 211 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [7] == 0)
      && (addr_.
# 212 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 212 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [8] == 0) && (addr_.
# 212 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                          __in6_u.__u6_addr8
# 212 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                 [9] == 0)
      && (addr_.
# 213 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 213 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [10] == 0) && (addr_.
# 213 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                           __in6_u.__u6_addr8
# 213 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                  [11] == 0)
      && !((addr_.
# 214 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                 __in6_u.__u6_addr8
# 214 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                        [12] == 0)
        && (addr_.
# 215 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                 __in6_u.__u6_addr8
# 215 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                        [13] == 0)
        && (addr_.
# 216 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                 __in6_u.__u6_addr8
# 216 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                        [14] == 0)
        && ((addr_.
# 217 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                  __in6_u.__u6_addr8
# 217 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                         [15] == 0) || (addr_.
# 217 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                              __in6_u.__u6_addr8
# 217 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                     [15] == 1))));
}

bool address_v6::is_multicast() const
{
  return (addr_.
# 222 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
               __in6_u.__u6_addr8
# 222 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                      [0] == 0xff);
}

bool address_v6::is_multicast_global() const
{
  return ((addr_.
# 227 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 227 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xff) && ((addr_.
# 227 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 227 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0x0f) == 0x0e));
}

bool address_v6::is_multicast_link_local() const
{
  return ((addr_.
# 232 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 232 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xff) && ((addr_.
# 232 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 232 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0x0f) == 0x02));
}

bool address_v6::is_multicast_node_local() const
{
  return ((addr_.
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xff) && ((addr_.
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 237 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0x0f) == 0x01));
}

bool address_v6::is_multicast_org_local() const
{
  return ((addr_.
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xff) && ((addr_.
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 242 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0x0f) == 0x08));
}

bool address_v6::is_multicast_site_local() const
{
  return ((addr_.
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                __in6_u.__u6_addr8
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                       [0] == 0xff) && ((addr_.
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
                                               __in6_u.__u6_addr8
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                                                      [1] & 0x0f) == 0x05));
}

bool operator==(const address_v6& a1, const address_v6& a2)
{
  using namespace std;
  return memcmp(&a1.addr_, &a2.addr_,
      sizeof(asio::detail::in6_addr_type)) == 0
    && a1.scope_id_ == a2.scope_id_;
}

bool operator<(const address_v6& a1, const address_v6& a2)
{
  using namespace std;
  int memcmp_result = memcmp(&a1.addr_, &a2.addr_,
      sizeof(asio::detail::in6_addr_type));
  if (memcmp_result < 0)
    return true;
  if (memcmp_result > 0)
    return false;
  return a1.scope_id_ < a2.scope_id_;
}

address_v6 address_v6::loopback()
{
  address_v6 tmp;
  tmp.addr_.
# 273 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 3 4
           __in6_u.__u6_addr8
# 273 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp"
                  [15] = 1;
  return tmp;
}

address_v6 address_v6::v4_mapped(const address_v4& addr)
{
  address_v4::bytes_type v4_bytes = addr.to_bytes();
  bytes_type v6_bytes = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF,
    v4_bytes[0], v4_bytes[1], v4_bytes[2], v4_bytes[3] } };
  return address_v6(v6_bytes);
}

address_v6 address_v6::v4_compatible(const address_v4& addr)
{
  address_v4::bytes_type v4_bytes = addr.to_bytes();
  bytes_type v6_bytes = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    v4_bytes[0], v4_bytes[1], v4_bytes[2], v4_bytes[3] } };
  return address_v6(v6_bytes);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 297 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address_v6.ipp" 2
# 244 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 2
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 2

namespace asio {
namespace ip {
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp"
class address
{
public:

  inline address();


  inline address(const asio::ip::address_v4& ipv4_address);


  inline address(const asio::ip::address_v6& ipv6_address);


  inline address(const address& other);



  inline address(address&& other);



  inline address& operator=(const address& other);



  inline address& operator=(address&& other);



  inline address& operator=(
      const asio::ip::address_v4& ipv4_address);


  inline address& operator=(
      const asio::ip::address_v6& ipv6_address);


  bool is_v4() const
  {
    return type_ == ipv4;
  }


  bool is_v6() const
  {
    return type_ == ipv6;
  }


  inline asio::ip::address_v4 to_v4() const;


  inline asio::ip::address_v6 to_v6() const;


  inline std::string to_string() const;


  inline std::string to_string(asio::error_code& ec) const;



  inline static address from_string(const char* str);



  inline static address from_string(
      const char* str, asio::error_code& ec);



  inline static address from_string(const std::string& str);



  inline static address from_string(
      const std::string& str, asio::error_code& ec);


  inline bool is_loopback() const;


  inline bool is_unspecified() const;


  inline bool is_multicast() const;


  inline friend bool operator==(const address& a1, const address& a2);


  friend bool operator!=(const address& a1, const address& a2)
  {
    return !(a1 == a2);
  }


  inline friend bool operator<(const address& a1, const address& a2);


  friend bool operator>(const address& a1, const address& a2)
  {
    return a2 < a1;
  }


  friend bool operator<=(const address& a1, const address& a2)
  {
    return !(a2 < a1);
  }


  friend bool operator>=(const address& a1, const address& a2)
  {
    return !(a1 < a2);
  }

private:

  enum { ipv4, ipv6 } type_;


  asio::ip::address_v4 ipv4_address_;


  asio::ip::address_v6 ipv6_address_;
};
# 184 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp"
template <typename Elem, typename Traits>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os, const address& addr);



}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 194 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.hpp" 2

namespace asio {
namespace ip {

template <typename Elem, typename Traits>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os, const address& addr)
{
  asio::error_code ec;
  std::string s = addr.to_string(ec);
  if (ec)
  {
    if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
      asio::detail::throw_error(ec);
    else
      os.setstate(std::basic_ostream<Elem, Traits>::failbit);
  }
  else
    for (std::string::iterator i = s.begin(); i != s.end(); ++i)
      os << os.widen(*i);
  return os;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.hpp" 2
# 196 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.ipp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.ipp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.ipp" 2

namespace asio {
namespace ip {

address::address()
  : type_(ipv4),
    ipv4_address_(),
    ipv6_address_()
{
}

address::address(const asio::ip::address_v4& ipv4_address)
  : type_(ipv4),
    ipv4_address_(ipv4_address),
    ipv6_address_()
{
}

address::address(const asio::ip::address_v6& ipv6_address)
  : type_(ipv6),
    ipv4_address_(),
    ipv6_address_(ipv6_address)
{
}

address::address(const address& other)
  : type_(other.type_),
    ipv4_address_(other.ipv4_address_),
    ipv6_address_(other.ipv6_address_)
{
}


address::address(address&& other)
  : type_(other.type_),
    ipv4_address_(other.ipv4_address_),
    ipv6_address_(other.ipv6_address_)
{
}


address& address::operator=(const address& other)
{
  type_ = other.type_;
  ipv4_address_ = other.ipv4_address_;
  ipv6_address_ = other.ipv6_address_;
  return *this;
}


address& address::operator=(address&& other)
{
  type_ = other.type_;
  ipv4_address_ = other.ipv4_address_;
  ipv6_address_ = other.ipv6_address_;
  return *this;
}


address& address::operator=(const asio::ip::address_v4& ipv4_address)
{
  type_ = ipv4;
  ipv4_address_ = ipv4_address;
  ipv6_address_ = asio::ip::address_v6();
  return *this;
}

address& address::operator=(const asio::ip::address_v6& ipv6_address)
{
  type_ = ipv6;
  ipv4_address_ = asio::ip::address_v4();
  ipv6_address_ = ipv6_address;
  return *this;
}

asio::ip::address_v4 address::to_v4() const
{
  if (type_ != ipv4)
  {
    std::bad_cast ex;
    asio::detail::throw_exception(ex);
  }
  return ipv4_address_;
}

asio::ip::address_v6 address::to_v6() const
{
  if (type_ != ipv6)
  {
    std::bad_cast ex;
    asio::detail::throw_exception(ex);
  }
  return ipv6_address_;
}

std::string address::to_string() const
{
  if (type_ == ipv6)
    return ipv6_address_.to_string();
  return ipv4_address_.to_string();
}

std::string address::to_string(asio::error_code& ec) const
{
  if (type_ == ipv6)
    return ipv6_address_.to_string(ec);
  return ipv4_address_.to_string(ec);
}

address address::from_string(const char* str)
{
  asio::error_code ec;
  address addr = from_string(str, ec);
  asio::detail::throw_error(ec);
  return addr;
}

address address::from_string(const char* str, asio::error_code& ec)
{
  asio::ip::address_v6 ipv6_address =
    asio::ip::address_v6::from_string(str, ec);
  if (!ec)
  {
    address tmp;
    tmp.type_ = ipv6;
    tmp.ipv6_address_ = ipv6_address;
    return tmp;
  }

  asio::ip::address_v4 ipv4_address =
    asio::ip::address_v4::from_string(str, ec);
  if (!ec)
  {
    address tmp;
    tmp.type_ = ipv4;
    tmp.ipv4_address_ = ipv4_address;
    return tmp;
  }

  return address();
}

address address::from_string(const std::string& str)
{
  return from_string(str.c_str());
}

address address::from_string(const std::string& str,
    asio::error_code& ec)
{
  return from_string(str.c_str(), ec);
}

bool address::is_loopback() const
{
  return (type_ == ipv4)
    ? ipv4_address_.is_loopback()
    : ipv6_address_.is_loopback();
}

bool address::is_unspecified() const
{
  return (type_ == ipv4)
    ? ipv4_address_.is_unspecified()
    : ipv6_address_.is_unspecified();
}

bool address::is_multicast() const
{
  return (type_ == ipv4)
    ? ipv4_address_.is_multicast()
    : ipv6_address_.is_multicast();
}

bool operator==(const address& a1, const address& a2)
{
  if (a1.type_ != a2.type_)
    return false;
  if (a1.type_ == address::ipv6)
    return a1.ipv6_address_ == a2.ipv6_address_;
  return a1.ipv4_address_ == a2.ipv4_address_;
}

bool operator<(const address& a1, const address& a2)
{
  if (a1.type_ < a2.type_)
    return true;
  if (a1.type_ > a2.type_)
    return false;
  if (a1.type_ == address::ipv6)
    return a1.ipv6_address_ < a2.ipv6_address_;
  return a1.ipv4_address_ < a2.ipv4_address_;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 225 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/address.ipp" 2
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address.hpp" 2
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v4.hpp" 1
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/address_v6.hpp" 1
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp" 2

namespace asio {
namespace ip {
namespace detail {


class endpoint
{
public:

  inline endpoint();


  inline endpoint(int family, unsigned short port_num);


  inline endpoint(const asio::ip::address& addr,
      unsigned short port_num);


  endpoint(const endpoint& other)
    : data_(other.data_)
  {
  }


  endpoint& operator=(const endpoint& other)
  {
    data_ = other.data_;
    return *this;
  }


  asio::detail::socket_addr_type* data()
  {
    return &data_.base;
  }


  const asio::detail::socket_addr_type* data() const
  {
    return &data_.base;
  }


  std::size_t size() const
  {
    if (is_v4())
      return sizeof(asio::detail::sockaddr_in4_type);
    else
      return sizeof(asio::detail::sockaddr_in6_type);
  }


  inline void resize(std::size_t new_size);


  std::size_t capacity() const
  {
    return sizeof(data_);
  }


  inline unsigned short port() const;


  inline void port(unsigned short port_num);


  inline asio::ip::address address() const;


  inline void address(const asio::ip::address& addr);


  inline friend bool operator==(
      const endpoint& e1, const endpoint& e2);


  inline friend bool operator<(
      const endpoint& e1, const endpoint& e2);


  bool is_v4() const
  {
    return data_.base.sa_family == 
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp" 3 4
                                  2
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp"
                                                      ;
  }



  inline std::string to_string(asio::error_code& ec) const;


private:

  union data_union
  {
    asio::detail::socket_addr_type base;
    asio::detail::sockaddr_in4_type v4;
    asio::detail::sockaddr_in6_type v6;
  } data_;
};

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 134 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
# 1 "/usr/include/c++/15/sstream" 1 3
# 57 "/usr/include/c++/15/sstream" 3

# 57 "/usr/include/c++/15/sstream" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {
# 80 "/usr/include/c++/15/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
      struct __xfer_bufptrs;


      using allocator_traits = std::allocator_traits<_Alloc>;
      using _Noexcept_swap
 = __or_<typename allocator_traits::propagate_on_container_swap,
  typename allocator_traits::is_always_equal>;


    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 123 "/usr/include/c++/15/sstream" 3
      basic_stringbuf()
      : __streambuf_type(), _M_mode(ios_base::in | ios_base::out), _M_string()
      { }
# 134 "/usr/include/c++/15/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 147 "/usr/include/c++/15/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(),
 _M_string(__str.data(), __str.size(), __str.get_allocator())
      { _M_stringbuf_init(__mode); }


      basic_stringbuf(const basic_stringbuf&) = delete;

      basic_stringbuf(basic_stringbuf&& __rhs)
      : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }
# 211 "/usr/include/c++/15/sstream" 3
      basic_stringbuf&
      operator=(const basic_stringbuf&) = delete;

      basic_stringbuf&
      operator=(basic_stringbuf&& __rhs)
      {
 __xfer_bufptrs __st{__rhs, this};
 const __streambuf_type& __base = __rhs;
 __streambuf_type::operator=(__base);
 this->pubimbue(__rhs.getloc());
 _M_mode = __rhs._M_mode;
 _M_string = std::move(__rhs._M_string);
 __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 return *this;
      }

      void
      swap(basic_stringbuf& __rhs) noexcept(_Noexcept_swap::value)
      {
 __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 __xfer_bufptrs __r_st{__rhs, this};
 __streambuf_type& __base = __rhs;
 __streambuf_type::swap(__base);
 __rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 std::swap(_M_mode, __rhs._M_mode);
 std::swap(_M_string, __rhs._M_string);
      }
# 250 "/usr/include/c++/15/sstream" 3
      [[__nodiscard__]]
      __string_type
      str() const
      {
 __string_type __ret(_M_string.get_allocator());
 if (char_type* __hi = _M_high_mark())
   __ret.assign(this->pbase(), __hi);
 else
   __ret = _M_string;
 return __ret;
      }
# 309 "/usr/include/c++/15/sstream" 3
      void
      str(const __string_type& __s)
      {


 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }
# 338 "/usr/include/c++/15/sstream" 3
    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 382 "/usr/include/c++/15/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 if (char_type* __pptr = this->pptr())
   {
     char_type* __egptr = this->egptr();
     if (!__egptr || __pptr > __egptr)
       {
  if (_M_mode & ios_base::in)
    this->setg(this->eback(), this->gptr(), __pptr);
  else
    this->setg(__pptr, __pptr, __pptr);
       }
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);

    private:




      __attribute__((__always_inline__))
      char_type*
      _M_high_mark() const noexcept
      {
 if (char_type* __pptr = this->pptr())
   {
     char_type* __egptr = this->egptr();
     if (!__egptr || __pptr > __egptr)
       return __pptr;
     else
       return __egptr;
   }
 return 0;
      }





      struct __xfer_bufptrs
      {
 __xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 : _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 {
   const _CharT* const __str = __from._M_string.data();
   const _CharT* __end = nullptr;
   if (__from.eback())
     {
       _M_goff[0] = __from.eback() - __str;
       _M_goff[1] = __from.gptr() - __str;
       _M_goff[2] = __from.egptr() - __str;
       __end = __from.egptr();
     }
   if (__from.pbase())
     {
       _M_poff[0] = __from.pbase() - __str;
       _M_poff[1] = __from.pptr() - __from.pbase();
       _M_poff[2] = __from.epptr() - __str;
       if (!__end || __from.pptr() > __end)
  __end = __from.pptr();
     }


   if (__end)
     {


       auto& __mut_from = const_cast<basic_stringbuf&>(__from);
       __mut_from._M_string._M_length(__end - __str);
     }
 }

 ~__xfer_bufptrs()
 {
   char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
   if (_M_goff[0] != -1)
     _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
   if (_M_poff[0] != -1)
     _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 }

 basic_stringbuf* _M_to;
 off_type _M_goff[3];
 off_type _M_poff[3];
      };
# 518 "/usr/include/c++/15/sstream" 3
      basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
      { }
# 533 "/usr/include/c++/15/sstream" 3
    };
# 551 "/usr/include/c++/15/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 585 "/usr/include/c++/15/sstream" 3
      basic_istringstream()
      : __istream_type(), _M_stringbuf(ios_base::in)
      { this->init(&_M_stringbuf); }
# 601 "/usr/include/c++/15/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 619 "/usr/include/c++/15/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }


      basic_istringstream(const basic_istringstream&) = delete;

      basic_istringstream(basic_istringstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __istream_type::set_rdbuf(&_M_stringbuf); }
# 676 "/usr/include/c++/15/sstream" 3
      basic_istringstream&
      operator=(const basic_istringstream&) = delete;

      basic_istringstream&
      operator=(basic_istringstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_istringstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 702 "/usr/include/c++/15/sstream" 3
      [[__nodiscard__]]
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      [[__nodiscard__]]
      __string_type
      str() const
      { return _M_stringbuf.str(); }
# 744 "/usr/include/c++/15/sstream" 3
      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
# 761 "/usr/include/c++/15/sstream" 3
    };
# 779 "/usr/include/c++/15/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 813 "/usr/include/c++/15/sstream" 3
      basic_ostringstream()
      : __ostream_type(), _M_stringbuf(ios_base::out)
      { this->init(&_M_stringbuf); }
# 829 "/usr/include/c++/15/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 847 "/usr/include/c++/15/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }


      basic_ostringstream(const basic_ostringstream&) = delete;

      basic_ostringstream(basic_ostringstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __ostream_type::set_rdbuf(&_M_stringbuf); }
# 904 "/usr/include/c++/15/sstream" 3
      basic_ostringstream&
      operator=(const basic_ostringstream&) = delete;

      basic_ostringstream&
      operator=(basic_ostringstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_ostringstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 930 "/usr/include/c++/15/sstream" 3
      [[__nodiscard__]]
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      [[__nodiscard__]]
      __string_type
      str() const
      { return _M_stringbuf.str(); }
# 972 "/usr/include/c++/15/sstream" 3
      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
# 989 "/usr/include/c++/15/sstream" 3
    };
# 1007 "/usr/include/c++/15/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 1041 "/usr/include/c++/15/sstream" 3
      basic_stringstream()
      : __iostream_type(), _M_stringbuf(ios_base::out | ios_base::in)
      { this->init(&_M_stringbuf); }
# 1055 "/usr/include/c++/15/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 1071 "/usr/include/c++/15/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }


      basic_stringstream(const basic_stringstream&) = delete;

      basic_stringstream(basic_stringstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __iostream_type::set_rdbuf(&_M_stringbuf); }
# 1130 "/usr/include/c++/15/sstream" 3
      basic_stringstream&
      operator=(const basic_stringstream&) = delete;

      basic_stringstream&
      operator=(basic_stringstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_stringstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 1156 "/usr/include/c++/15/sstream" 3
      [[__nodiscard__]]
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      [[__nodiscard__]]
      __string_type
      str() const
      { return _M_stringbuf.str(); }
# 1198 "/usr/include/c++/15/sstream" 3
      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
# 1215 "/usr/include/c++/15/sstream" 3
    };



  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,
  basic_stringbuf<_CharT, _Traits, _Allocator>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,
  basic_istringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,
  basic_ostringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,
  basic_stringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


}

}




# 1 "/usr/include/c++/15/bits/sstream.tcc" 1 3
# 40 "/usr/include/c++/15/bits/sstream.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();


      if (size_t(this->epptr() - this->pbase()) < __capacity)
 {

   char_type* __base = const_cast<char_type*>(_M_string.data());
   _M_pbump(__base, __base + __capacity, this->pptr() - this->pbase());
   if (_M_mode & ios_base::in)
     {
       const __size_type __nget = this->gptr() - this->eback();
       const __size_type __eget = this->egptr() - this->eback();
       this->setg(__base, __base + __nget, __base + __eget + 1);
     }
   *this->pptr() = traits_type::to_char_type(__c);
   this->pbump(1);
   return __c;
 }


      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 133 "/usr/include/c++/15/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp(_M_string.get_allocator());
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}

#pragma GCC diagnostic pop
# 1256 "/usr/include/c++/15/sstream" 2 3
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 2




# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 2


# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
namespace asio {
namespace ip {
namespace detail {

endpoint::endpoint()
  : data_()
{
  data_.v4.sin_family = 
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                       2
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                           ;
  data_.v4.sin_port = 0;
  data_.v4.sin_addr.s_addr = 
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                            ((in_addr_t) 0x00000000)
# 39 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                   ;
}

endpoint::endpoint(int family, unsigned short port_num)
  : data_()
{
  using namespace std;
  if (family == 
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
               2
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                   )
  {
    data_.v4.sin_family = 
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                         2
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                             ;
    data_.v4.sin_port =
      asio::detail::socket_ops::host_to_network_short(port_num);
    data_.v4.sin_addr.s_addr = 
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                              ((in_addr_t) 0x00000000)
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                     ;
  }
  else
  {
    data_.v6.sin6_family = 
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                          10
# 55 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                               ;
    data_.v6.sin6_port =
      asio::detail::socket_ops::host_to_network_short(port_num);
    data_.v6.sin6_flowinfo = 0;
    data_.v6.sin6_addr.
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [0] = 0; data_.v6.sin6_addr.
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                         __in6_u.__u6_addr8
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                [1] = 0;
    data_.v6.sin6_addr.
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [2] = 0, data_.v6.sin6_addr.
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                         __in6_u.__u6_addr8
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                [3] = 0;
    data_.v6.sin6_addr.
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [4] = 0, data_.v6.sin6_addr.
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                         __in6_u.__u6_addr8
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                [5] = 0;
    data_.v6.sin6_addr.
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [6] = 0, data_.v6.sin6_addr.
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                         __in6_u.__u6_addr8
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                [7] = 0;
    data_.v6.sin6_addr.
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [8] = 0, data_.v6.sin6_addr.
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                         __in6_u.__u6_addr8
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                [9] = 0;
    data_.v6.sin6_addr.
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [10] = 0, data_.v6.sin6_addr.
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                          __in6_u.__u6_addr8
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                 [11] = 0;
    data_.v6.sin6_addr.
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [12] = 0, data_.v6.sin6_addr.
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                          __in6_u.__u6_addr8
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                 [13] = 0;
    data_.v6.sin6_addr.
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                      __in6_u.__u6_addr8
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                             [14] = 0, data_.v6.sin6_addr.
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                                          __in6_u.__u6_addr8
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                                 [15] = 0;
    data_.v6.sin6_scope_id = 0;
  }
}

endpoint::endpoint(const asio::ip::address& addr,
    unsigned short port_num)
  : data_()
{
  using namespace std;
  if (addr.is_v4())
  {
    data_.v4.sin_family = 
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                         2
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                             ;
    data_.v4.sin_port =
      asio::detail::socket_ops::host_to_network_short(port_num);
    data_.v4.sin_addr.s_addr =
      asio::detail::socket_ops::host_to_network_long(
          static_cast<asio::detail::u_long_type>(
            addr.to_v4().to_ulong()));
  }
  else
  {
    data_.v6.sin6_family = 
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                          10
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                               ;
    data_.v6.sin6_port =
      asio::detail::socket_ops::host_to_network_short(port_num);
    data_.v6.sin6_flowinfo = 0;
    asio::ip::address_v6 v6_addr = addr.to_v6();
    asio::ip::address_v6::bytes_type bytes = v6_addr.to_bytes();
    memcpy(data_.v6.sin6_addr.
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                             __in6_u.__u6_addr8
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                    , bytes.data(), 16);
    data_.v6.sin6_scope_id =
      static_cast<asio::detail::u_long_type>(
        v6_addr.scope_id());
  }
}

void endpoint::resize(std::size_t new_size)
{
  if (new_size > sizeof(asio::detail::sockaddr_storage_type))
  {
    asio::error_code ec(asio::error::invalid_argument);
    asio::detail::throw_error(ec);
  }
}

unsigned short endpoint::port() const
{
  if (is_v4())
  {
    return asio::detail::socket_ops::network_to_host_short(
        data_.v4.sin_port);
  }
  else
  {
    return asio::detail::socket_ops::network_to_host_short(
        data_.v6.sin6_port);
  }
}

void endpoint::port(unsigned short port_num)
{
  if (is_v4())
  {
    data_.v4.sin_port
      = asio::detail::socket_ops::host_to_network_short(port_num);
  }
  else
  {
    data_.v6.sin6_port
      = asio::detail::socket_ops::host_to_network_short(port_num);
  }
}

asio::ip::address endpoint::address() const
{
  using namespace std;
  if (is_v4())
  {
    return asio::ip::address_v4(
        asio::detail::socket_ops::network_to_host_long(
          data_.v4.sin_addr.s_addr));
  }
  else
  {
    asio::ip::address_v6::bytes_type bytes;

    memcpy(bytes.data(), data_.v6.sin6_addr.
# 151 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 3 4
                                           __in6_u.__u6_addr8
# 151 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp"
                                                  , 16);



    return asio::ip::address_v6(bytes, data_.v6.sin6_scope_id);
  }
}

void endpoint::address(const asio::ip::address& addr)
{
  endpoint tmp_endpoint(addr, port());
  data_ = tmp_endpoint.data_;
}

bool operator==(const endpoint& e1, const endpoint& e2)
{
  return e1.address() == e2.address() && e1.port() == e2.port();
}

bool operator<(const endpoint& e1, const endpoint& e2)
{
  if (e1.address() < e2.address())
    return true;
  if (e1.address() != e2.address())
    return false;
  return e1.port() < e2.port();
}


std::string endpoint::to_string(asio::error_code& ec) const
{
  std::string a = address().to_string(ec);
  if (ec)
    return std::string();

  std::ostringstream tmp_os;
  tmp_os.imbue(std::locale::classic());
  if (is_v4())
    tmp_os << a;
  else
    tmp_os << '[' << a << ']';
  tmp_os << ':' << port();

  return tmp_os.str();
}


}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/impl/endpoint.ipp" 2
# 137 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/endpoint.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp" 2

namespace asio {
namespace ip {
# 43 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp"
template <typename InternetProtocol>
class basic_endpoint
{
public:

  typedef InternetProtocol protocol_type;






  typedef asio::detail::socket_addr_type data_type;



  basic_endpoint()
    : impl_()
  {
  }
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp"
  basic_endpoint(const InternetProtocol& internet_protocol,
      unsigned short port_num)
    : impl_(internet_protocol.family(), port_num)
  {
  }




  basic_endpoint(const asio::ip::address& addr, unsigned short port_num)
    : impl_(addr, port_num)
  {
  }


  basic_endpoint(const basic_endpoint& other)
    : impl_(other.impl_)
  {
  }



  basic_endpoint(basic_endpoint&& other)
    : impl_(other.impl_)
  {
  }



  basic_endpoint& operator=(const basic_endpoint& other)
  {
    impl_ = other.impl_;
    return *this;
  }



  basic_endpoint& operator=(basic_endpoint&& other)
  {
    impl_ = other.impl_;
    return *this;
  }



  protocol_type protocol() const
  {
    if (impl_.is_v4())
      return InternetProtocol::v4();
    return InternetProtocol::v6();
  }


  data_type* data()
  {
    return impl_.data();
  }


  const data_type* data() const
  {
    return impl_.data();
  }


  std::size_t size() const
  {
    return impl_.size();
  }


  void resize(std::size_t new_size)
  {
    impl_.resize(new_size);
  }


  std::size_t capacity() const
  {
    return impl_.capacity();
  }



  unsigned short port() const
  {
    return impl_.port();
  }



  void port(unsigned short port_num)
  {
    impl_.port(port_num);
  }


  asio::ip::address address() const
  {
    return impl_.address();
  }


  void address(const asio::ip::address& addr)
  {
    impl_.address(addr);
  }


  friend bool operator==(const basic_endpoint<InternetProtocol>& e1,
      const basic_endpoint<InternetProtocol>& e2)
  {
    return e1.impl_ == e2.impl_;
  }


  friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,
      const basic_endpoint<InternetProtocol>& e2)
  {
    return !(e1 == e2);
  }


  friend bool operator<(const basic_endpoint<InternetProtocol>& e1,
      const basic_endpoint<InternetProtocol>& e2)
  {
    return e1.impl_ < e2.impl_;
  }


  friend bool operator>(const basic_endpoint<InternetProtocol>& e1,
      const basic_endpoint<InternetProtocol>& e2)
  {
    return e2.impl_ < e1.impl_;
  }


  friend bool operator<=(const basic_endpoint<InternetProtocol>& e1,
      const basic_endpoint<InternetProtocol>& e2)
  {
    return !(e2 < e1);
  }


  friend bool operator>=(const basic_endpoint<InternetProtocol>& e1,
      const basic_endpoint<InternetProtocol>& e2)
  {
    return !(e1 < e2);
  }

private:

  asio::ip::detail::endpoint impl_;
};
# 249 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp"
template <typename Elem, typename Traits, typename InternetProtocol>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os,
    const basic_endpoint<InternetProtocol>& endpoint);



}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 260 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/basic_endpoint.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/basic_endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/basic_endpoint.hpp" 2

namespace asio {
namespace ip {

template <typename Elem, typename Traits, typename InternetProtocol>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os,
    const basic_endpoint<InternetProtocol>& endpoint)
{
  asio::ip::detail::endpoint tmp_ep(endpoint.address(), endpoint.port());
  asio::error_code ec;
  std::string s = tmp_ep.to_string(ec);
  if (ec)
  {
    if (os.exceptions() & std::basic_ostream<Elem, Traits>::failbit)
      asio::detail::throw_error(ec);
    else
      os.setstate(std::basic_ostream<Elem, Traits>::failbit);
  }
  else
    for (std::string::iterator i = s.begin(); i != s.end(); ++i)
      os << os.widen(*i);
  return os;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/basic_endpoint.hpp" 2
# 262 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp" 2
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_entry.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_entry.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_entry.hpp" 2

namespace asio {
namespace ip {
# 35 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_entry.hpp"
template <typename InternetProtocol>
class basic_resolver_entry
{
public:

  typedef InternetProtocol protocol_type;


  typedef typename InternetProtocol::endpoint endpoint_type;


  basic_resolver_entry()
  {
  }


  basic_resolver_entry(const endpoint_type& ep,
      const std::string& host, const std::string& service)
    : endpoint_(ep),
      host_name_(host),
      service_name_(service)
  {
  }


  endpoint_type endpoint() const
  {
    return endpoint_;
  }


  operator endpoint_type() const
  {
    return endpoint_;
  }


  std::string host_name() const
  {
    return host_name_;
  }


  std::string service_name() const
  {
    return service_name_;
  }

private:
  endpoint_type endpoint_;
  std::string host_name_;
  std::string service_name_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_entry.hpp" 2
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 2

namespace asio {
namespace ip {
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp"
template <typename InternetProtocol>
class basic_resolver_iterator
{
public:

  typedef std::ptrdiff_t difference_type;


  typedef basic_resolver_entry<InternetProtocol> value_type;


  typedef const basic_resolver_entry<InternetProtocol>* pointer;


  typedef const basic_resolver_entry<InternetProtocol>& reference;


  typedef std::forward_iterator_tag iterator_category;


  basic_resolver_iterator()
    : index_(0)
  {
  }


  static basic_resolver_iterator create(
      asio::detail::addrinfo_type* address_info,
      const std::string& host_name, const std::string& service_name)
  {
    basic_resolver_iterator iter;
    if (!address_info)
      return iter;

    std::string actual_host_name = host_name;
    if (address_info->ai_canonname)
      actual_host_name = address_info->ai_canonname;

    iter.values_.reset(new values_type);

    while (address_info)
    {
      if (address_info->ai_family == 
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 3 4
                                    2
          
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp"
         || address_info->ai_family == 
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 3 4
                                       10
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp"
                                                            )
      {
        using namespace std;
        typename InternetProtocol::endpoint endpoint;
        endpoint.resize(static_cast<std::size_t>(address_info->ai_addrlen));
        memcpy(endpoint.data(), address_info->ai_addr,
            address_info->ai_addrlen);
        iter.values_->push_back(
            basic_resolver_entry<InternetProtocol>(endpoint,
              actual_host_name, service_name));
      }
      address_info = address_info->ai_next;
    }

    return iter;
  }


  static basic_resolver_iterator create(
      const typename InternetProtocol::endpoint& endpoint,
      const std::string& host_name, const std::string& service_name)
  {
    basic_resolver_iterator iter;
    iter.values_.reset(new values_type);
    iter.values_->push_back(
        basic_resolver_entry<InternetProtocol>(
          endpoint, host_name, service_name));
    return iter;
  }


  template <typename EndpointIterator>
  static basic_resolver_iterator create(
      EndpointIterator begin, EndpointIterator end,
      const std::string& host_name, const std::string& service_name)
  {
    basic_resolver_iterator iter;
    if (begin != end)
    {
      iter.values_.reset(new values_type);
      for (EndpointIterator ep_iter = begin; ep_iter != end; ++ep_iter)
      {
        iter.values_->push_back(
            basic_resolver_entry<InternetProtocol>(
              *ep_iter, host_name, service_name));
      }
    }
    return iter;
  }
# 185 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp"
  const basic_resolver_entry<InternetProtocol>& operator*() const
  {
    return dereference();
  }


  const basic_resolver_entry<InternetProtocol>* operator->() const
  {
    return &dereference();
  }


  basic_resolver_iterator& operator++()
  {
    increment();
    return *this;
  }


  basic_resolver_iterator operator++(int)
  {
    basic_resolver_iterator tmp(*this);
    ++*this;
    return tmp;
  }


  friend bool operator==(const basic_resolver_iterator& a,
      const basic_resolver_iterator& b)
  {
    return a.equal(b);
  }


  friend bool operator!=(const basic_resolver_iterator& a,
      const basic_resolver_iterator& b)
  {
    return !a.equal(b);
  }

private:
  void increment()
  {
    if (++index_ == values_->size())
    {

      values_.reset();
      index_ = 0;
    }
  }

  bool equal(const basic_resolver_iterator& other) const
  {
    if (!values_ && !other.values_)
      return true;
    if (values_ != other.values_)
      return false;
    return index_ == other.index_;
  }

  const basic_resolver_entry<InternetProtocol>& dereference() const
  {
    return (*values_)[index_];
  }

  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;
  asio::detail::shared_ptr<values_type> values_;
  std::size_t index_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 259 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 2
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 2

namespace asio {
namespace ip {




class resolver_query_base
{
public:
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
  enum flags
  {
    canonical_name = 
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
                    0x0002
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
                                             ,
    passive = 
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
             0x0001
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
                                    ,
    numeric_host = 
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
                  0x0004
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
                                             ,
    numeric_service = 
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
                     0x0400
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
                                                ,
    v4_mapped = 
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
               0x0008
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
                                       ,
    all_matching = 
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
                  0x0010
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
                                     ,
    address_configured = 
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 3 4
                        0x0020
  
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp"
 };



  friend flags operator&(flags x, flags y)
  {
    return static_cast<flags>(
        static_cast<unsigned int>(x) & static_cast<unsigned int>(y));
  }

  friend flags operator|(flags x, flags y)
  {
    return static_cast<flags>(
        static_cast<unsigned int>(x) | static_cast<unsigned int>(y));
  }

  friend flags operator^(flags x, flags y)
  {
    return static_cast<flags>(
        static_cast<unsigned int>(x) ^ static_cast<unsigned int>(y));
  }

  friend flags operator~(flags x)
  {
    return static_cast<flags>(~static_cast<unsigned int>(x));
  }

  friend flags& operator&=(flags& x, flags y)
  {
    x = x & y;
    return x;
  }

  friend flags& operator|=(flags& x, flags y)
  {
    x = x | y;
    return x;
  }

  friend flags& operator^=(flags& x, flags y)
  {
    x = x ^ y;
    return x;
  }


protected:

  ~resolver_query_base()
  {
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 129 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 2

namespace asio {
namespace ip {
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
template <typename InternetProtocol>
class basic_resolver_query
  : public resolver_query_base
{
public:

  typedef InternetProtocol protocol_type;
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
  basic_resolver_query(const std::string& service,
      resolver_query_base::flags resolve_flags = passive | address_configured)
    : hints_(),
      host_name_(),
      service_name_(service)
  {
    typename InternetProtocol::endpoint endpoint;
    hints_.ai_flags = static_cast<int>(resolve_flags);
    hints_.ai_family = 
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 3 4
                      0
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
                               ;
    hints_.ai_socktype = endpoint.protocol().type();
    hints_.ai_protocol = endpoint.protocol().protocol();
    hints_.ai_addrlen = 0;
    hints_.ai_canonname = 0;
    hints_.ai_addr = 0;
    hints_.ai_next = 0;
  }
# 99 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
  basic_resolver_query(const protocol_type& protocol,
      const std::string& service,
      resolver_query_base::flags resolve_flags = passive | address_configured)
    : hints_(),
      host_name_(),
      service_name_(service)
  {
    hints_.ai_flags = static_cast<int>(resolve_flags);
    hints_.ai_family = protocol.family();
    hints_.ai_socktype = protocol.type();
    hints_.ai_protocol = protocol.protocol();
    hints_.ai_addrlen = 0;
    hints_.ai_canonname = 0;
    hints_.ai_addr = 0;
    hints_.ai_next = 0;
  }
# 147 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
  basic_resolver_query(const std::string& host, const std::string& service,
      resolver_query_base::flags resolve_flags = address_configured)
    : hints_(),
      host_name_(host),
      service_name_(service)
  {
    typename InternetProtocol::endpoint endpoint;
    hints_.ai_flags = static_cast<int>(resolve_flags);
    hints_.ai_family = 
# 155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 3 4
                      0
# 155 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
                                            ;
    hints_.ai_socktype = endpoint.protocol().type();
    hints_.ai_protocol = endpoint.protocol().protocol();
    hints_.ai_addrlen = 0;
    hints_.ai_canonname = 0;
    hints_.ai_addr = 0;
    hints_.ai_next = 0;
  }
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp"
  basic_resolver_query(const protocol_type& protocol,
      const std::string& host, const std::string& service,
      resolver_query_base::flags resolve_flags = address_configured)
    : hints_(),
      host_name_(host),
      service_name_(service)
  {
    hints_.ai_flags = static_cast<int>(resolve_flags);
    hints_.ai_family = protocol.family();
    hints_.ai_socktype = protocol.type();
    hints_.ai_protocol = protocol.protocol();
    hints_.ai_addrlen = 0;
    hints_.ai_canonname = 0;
    hints_.ai_addr = 0;
    hints_.ai_next = 0;
  }


  const asio::detail::addrinfo_type& hints() const
  {
    return hints_;
  }


  std::string host_name() const
  {
    return host_name_;
  }


  std::string service_name() const
  {
    return service_name_;
  }

private:
  asio::detail::addrinfo_type hints_;
  std::string host_name_;
  std::string service_name_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 243 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_service.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 2

namespace asio {
namespace detail {

template <typename Protocol, typename Handler>
class resolve_endpoint_op : public operation
{
public:
  struct ptr { Handler* h; void* v; resolve_endpoint_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~resolve_endpoint_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(resolve_endpoint_op), *h); v = 0; } } };

  typedef typename Protocol::endpoint endpoint_type;
  typedef asio::ip::basic_resolver_iterator<Protocol> iterator_type;

  resolve_endpoint_op(socket_ops::weak_cancel_token_type cancel_token,
      const endpoint_type& endpoint, io_service_impl& ios, Handler& handler)
    : operation(&resolve_endpoint_op::do_complete),
      cancel_token_(cancel_token),
      endpoint_(endpoint),
      io_service_impl_(ios),
      handler_(static_cast<Handler&&>(handler))
  {
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    resolve_endpoint_op* o(static_cast<resolve_endpoint_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    if (owner && owner != &o->io_service_impl_)
    {




      char host_name[
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 3 4
                    1025
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp"
                              ];
      char service_name[
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 3 4
                       32
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp"
                                 ];
      socket_ops::background_getnameinfo(o->cancel_token_, o->endpoint_.data(),
          o->endpoint_.size(), host_name, 
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 3 4
                                         1025
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp"
                                                   , service_name, 
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 3 4
                                                                   32
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp"
                                                                             ,
          o->endpoint_.protocol().type(), o->ec_);
      o->iter_ = iterator_type::create(o->endpoint_, host_name, service_name);


      o->io_service_impl_.post_deferred_completion(o);
      p.v = p.p = 0;
    }
    else
    {



      (void)0;







      detail::binder2<Handler, asio::error_code, iterator_type>
        handler(o->handler_, o->ec_, o->iter_);
      p.h = asio::detail::addressof(handler.handler_);
      p.reset();

      if (owner)
      {
        fenced_block b(fenced_block::half);
        (void)0;
        asio_handler_invoke_helpers::invoke(handler, handler.handler_);
        (void)0;
      }
    }
  }

private:
  socket_ops::weak_cancel_token_type cancel_token_;
  endpoint_type endpoint_;
  io_service_impl& io_service_impl_;
  Handler handler_;
  asio::error_code ec_;
  iterator_type iter_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 120 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_endpoint_op.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_op.hpp" 1
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_op.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_op.hpp" 2

namespace asio {
namespace detail {

template <typename Protocol, typename Handler>
class resolve_op : public operation
{
public:
  struct ptr { Handler* h; void* v; resolve_op* p; ~ptr() { reset(); } void reset() { if (p) { p->~resolve_op(); p = 0; } if (v) { asio_handler_alloc_helpers::deallocate(v, sizeof(resolve_op), *h); v = 0; } } };

  typedef asio::ip::basic_resolver_query<Protocol> query_type;
  typedef asio::ip::basic_resolver_iterator<Protocol> iterator_type;

  resolve_op(socket_ops::weak_cancel_token_type cancel_token,
      const query_type& query, io_service_impl& ios, Handler& handler)
    : operation(&resolve_op::do_complete),
      cancel_token_(cancel_token),
      query_(query),
      io_service_impl_(ios),
      handler_(static_cast<Handler&&>(handler)),
      addrinfo_(0)
  {
  }

  ~resolve_op()
  {
    if (addrinfo_)
      socket_ops::freeaddrinfo(addrinfo_);
  }

  static void do_complete(io_service_impl* owner, operation* base,
      const asio::error_code& ,
      std::size_t )
  {

    resolve_op* o(static_cast<resolve_op*>(base));
    ptr p = { asio::detail::addressof(o->handler_), o, o };

    if (owner && owner != &o->io_service_impl_)
    {




      socket_ops::background_getaddrinfo(o->cancel_token_,
          o->query_.host_name().c_str(), o->query_.service_name().c_str(),
          o->query_.hints(), &o->addrinfo_, o->ec_);


      o->io_service_impl_.post_deferred_completion(o);
      p.v = p.p = 0;
    }
    else
    {



      (void)0;







      detail::binder2<Handler, asio::error_code, iterator_type>
        handler(o->handler_, o->ec_, iterator_type());
      p.h = asio::detail::addressof(handler.handler_);
      if (o->addrinfo_)
      {
        handler.arg2_ = iterator_type::create(o->addrinfo_,
            o->query_.host_name(), o->query_.service_name());
      }
      p.reset();

      if (owner)
      {
        fenced_block b(fenced_block::half);
        (void)0;
        asio_handler_invoke_helpers::invoke(handler, handler.handler_);
        (void)0;
      }
    }
  }

private:
  socket_ops::weak_cancel_token_type cancel_token_;
  query_type query_;
  io_service_impl& io_service_impl_;
  Handler handler_;
  asio::error_code ec_;
  asio::detail::addrinfo_type* addrinfo_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 130 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolve_op.hpp" 2
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_thread.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_thread.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_thread.hpp" 2

namespace asio {
namespace detail {

extern "C"
{
  inline void* asio_detail_posix_thread_function(void* arg);
}

class posix_thread
  : private noncopyable
{
public:

  template <typename Function>
  posix_thread(Function f, unsigned int = 0)
    : joined_(false)
  {
    start_thread(new func<Function>(f));
  }


  inline ~posix_thread();


  inline void join();

private:
  friend void* asio_detail_posix_thread_function(void* arg);

  class func_base
  {
  public:
    virtual ~func_base() {}
    virtual void run() = 0;
  };

  struct auto_func_base_ptr
  {
    func_base* ptr;
    ~auto_func_base_ptr() { delete ptr; }
  };

  template <typename Function>
  class func
    : public func_base
  {
  public:
    func(Function f)
      : f_(f)
    {
    }

    virtual void run()
    {
      f_();
    }

  private:
    Function f_;
  };

  inline void start_thread(func_base* arg);

  ::pthread_t thread_;
  bool joined_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_thread.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_thread.ipp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_thread.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_thread.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_thread.ipp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_thread.ipp" 2

namespace asio {
namespace detail {

posix_thread::~posix_thread()
{
  if (!joined_)
    ::pthread_detach(thread_);
}

void posix_thread::join()
{
  if (!joined_)
  {
    ::pthread_join(thread_, 0);
    joined_ = true;
  }
}

void posix_thread::start_thread(func_base* arg)
{
  int error = ::pthread_create(&thread_, 0,
        asio_detail_posix_thread_function, arg);
  if (error != 0)
  {
    delete arg;
    asio::error_code ec(error,
        asio::error::get_system_category());
    asio::detail::throw_error(ec, "thread");
  }
}

void* asio_detail_posix_thread_function(void* arg)
{
  posix_thread::auto_func_base_ptr func = {
      static_cast<posix_thread::func_base*>(arg) };
  func.ptr->run();
  return 0;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/posix_thread.ipp" 2
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/posix_thread.hpp" 2
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread.hpp" 2






namespace asio {
namespace detail {
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/thread.hpp"
typedef posix_thread thread;




}
}
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp" 2

namespace asio {
namespace detail {

class resolver_service_base
{
public:


  typedef socket_ops::shared_cancel_token_type implementation_type;


  inline resolver_service_base(asio::io_service& io_service);


  inline ~resolver_service_base();


  inline void shutdown_service();


  inline void fork_service(
      asio::io_service::fork_event fork_ev);


  inline void construct(implementation_type& impl);


  inline void destroy(implementation_type&);


  inline void cancel(implementation_type& impl);

protected:

  inline void start_resolve_op(operation* op);



  class auto_addrinfo
    : private asio::detail::noncopyable
  {
  public:
    explicit auto_addrinfo(asio::detail::addrinfo_type* ai)
      : ai_(ai)
    {
    }

    ~auto_addrinfo()
    {
      if (ai_)
        socket_ops::freeaddrinfo(ai_);
    }

    operator asio::detail::addrinfo_type*()
    {
      return ai_;
    }

  private:
    asio::detail::addrinfo_type* ai_;
  };



  class work_io_service_runner;


  inline void start_work_thread();


  io_service_impl& io_service_impl_;

private:

  asio::detail::mutex mutex_;


  asio::detail::scoped_ptr<asio::io_service> work_io_service_;


  io_service_impl& work_io_service_impl_;


  asio::detail::scoped_ptr<asio::io_service::work> work_;


  asio::detail::scoped_ptr<asio::detail::thread> work_thread_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 124 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/resolver_service_base.ipp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/resolver_service_base.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/resolver_service_base.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/resolver_service_base.ipp" 2

namespace asio {
namespace detail {

class resolver_service_base::work_io_service_runner
{
public:
  work_io_service_runner(asio::io_service& io_service)
    : io_service_(io_service) {}
  void operator()() { io_service_.run(); }
private:
  asio::io_service& io_service_;
};

resolver_service_base::resolver_service_base(
    asio::io_service& io_service)
  : io_service_impl_(asio::use_service<io_service_impl>(io_service)),
    work_io_service_(new asio::io_service),
    work_io_service_impl_(asio::use_service<
        io_service_impl>(*work_io_service_)),
    work_(new asio::io_service::work(*work_io_service_)),
    work_thread_(0)
{
}

resolver_service_base::~resolver_service_base()
{
  shutdown_service();
}

void resolver_service_base::shutdown_service()
{
  work_.reset();
  if (work_io_service_.get())
  {
    work_io_service_->stop();
    if (work_thread_.get())
    {
      work_thread_->join();
      work_thread_.reset();
    }
    work_io_service_.reset();
  }
}

void resolver_service_base::fork_service(
    asio::io_service::fork_event fork_ev)
{
  if (work_thread_.get())
  {
    if (fork_ev == asio::io_service::fork_prepare)
    {
      work_io_service_->stop();
      work_thread_->join();
    }
    else
    {
      work_io_service_->reset();
      work_thread_.reset(new asio::detail::thread(
            work_io_service_runner(*work_io_service_)));
    }
  }
}

void resolver_service_base::construct(
    resolver_service_base::implementation_type& impl)
{
  impl.reset(static_cast<void*>(0), socket_ops::noop_deleter());
}

void resolver_service_base::destroy(
    resolver_service_base::implementation_type& impl)
{
  (void)0;

  impl.reset();
}

void resolver_service_base::cancel(
    resolver_service_base::implementation_type& impl)
{
  (void)0;

  impl.reset(static_cast<void*>(0), socket_ops::noop_deleter());
}

void resolver_service_base::start_resolve_op(operation* op)
{
  start_work_thread();
  io_service_impl_.work_started();
  work_io_service_impl_.post_immediate_completion(op, false);
}

void resolver_service_base::start_work_thread()
{
  asio::detail::mutex::scoped_lock lock(mutex_);
  if (!work_thread_.get())
  {
    work_thread_.reset(new asio::detail::thread(
          work_io_service_runner(*work_io_service_)));
  }
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 129 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/resolver_service_base.ipp" 2
# 127 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service_base.hpp" 2
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 2

namespace asio {
namespace detail {

template <typename Protocol>
class resolver_service : public resolver_service_base
{
public:


  typedef socket_ops::shared_cancel_token_type implementation_type;


  typedef typename Protocol::endpoint endpoint_type;


  typedef asio::ip::basic_resolver_query<Protocol> query_type;


  typedef asio::ip::basic_resolver_iterator<Protocol> iterator_type;


  resolver_service(asio::io_service& io_service)
    : resolver_service_base(io_service)
  {
  }


  iterator_type resolve(implementation_type&, const query_type& query,
      asio::error_code& ec)
  {
    asio::detail::addrinfo_type* address_info = 0;

    socket_ops::getaddrinfo(query.host_name().c_str(),
        query.service_name().c_str(), query.hints(), &address_info, ec);
    auto_addrinfo auto_address_info(address_info);

    return ec ? iterator_type() : iterator_type::create(
        address_info, query.host_name(), query.service_name());
  }


  template <typename Handler>
  void async_resolve(implementation_type& impl,
      const query_type& query, Handler& handler)
  {

    typedef resolve_op<Protocol, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl, query, io_service_impl_, handler);

    (void)0;

    start_resolve_op(p.p);
    p.v = p.p = 0;
  }


  iterator_type resolve(implementation_type&,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    char host_name[
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 3 4
                  1025
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp"
                            ];
    char service_name[
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 3 4
                     32
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp"
                               ];
    socket_ops::sync_getnameinfo(endpoint.data(), endpoint.size(),
        host_name, 
# 96 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 3 4
                  1025
# 96 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp"
                            , service_name, 
# 96 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 3 4
                                            32
# 96 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp"
                                                      ,
        endpoint.protocol().type(), ec);

    return ec ? iterator_type() : iterator_type::create(
        endpoint, host_name, service_name);
  }


  template <typename Handler>
  void async_resolve(implementation_type& impl,
      const endpoint_type& endpoint, Handler& handler)
  {

    typedef resolve_endpoint_op<Protocol, Handler> op;
    typename op::ptr p = { asio::detail::addressof(handler),
      asio_handler_alloc_helpers::allocate(
        sizeof(op), handler), 0 };
    p.p = new (p.v) op(impl, endpoint, io_service_impl_, handler);

    (void)0;

    start_resolve_op(p.p);
    p.v = p.p = 0;
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 126 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/resolver_service.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_service.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_service.hpp" 2

namespace asio {
namespace ip {


template <typename InternetProtocol>
class resolver_service



  : public asio::detail::service_base<
      resolver_service<InternetProtocol> >

{
public:






  typedef InternetProtocol protocol_type;


  typedef typename InternetProtocol::endpoint endpoint_type;


  typedef basic_resolver_query<InternetProtocol> query_type;


  typedef basic_resolver_iterator<InternetProtocol> iterator_type;

private:





  typedef asio::detail::resolver_service<InternetProtocol>
    service_impl_type;


public:




  typedef typename service_impl_type::implementation_type implementation_type;



  explicit resolver_service(asio::io_service& io_service)
    : asio::detail::service_base<
        resolver_service<InternetProtocol> >(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }


  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  void cancel(implementation_type& impl)
  {
    service_impl_.cancel(impl);
  }


  iterator_type resolve(implementation_type& impl, const query_type& query,
      asio::error_code& ec)
  {
    return service_impl_.resolve(impl, query, ec);
  }


  template <typename ResolveHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ResolveHandler, void (asio::error_code, iterator_type)>::type>::type

  async_resolve(implementation_type& impl, const query_type& query,
      ResolveHandler&& handler)
  {
    asio::detail::async_result_init<
      ResolveHandler, void (asio::error_code, iterator_type)> init(
        static_cast<ResolveHandler&&>(handler));

    service_impl_.async_resolve(impl, query, init.handler);

    return init.result.get();
  }


  iterator_type resolve(implementation_type& impl,
      const endpoint_type& endpoint, asio::error_code& ec)
  {
    return service_impl_.resolve(impl, endpoint, ec);
  }


  template <typename ResolveHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ResolveHandler, void (asio::error_code, iterator_type)>::type>::type

  async_resolve(implementation_type& impl, const endpoint_type& endpoint,
      ResolveHandler&& handler)
  {
    asio::detail::async_result_init<
      ResolveHandler, void (asio::error_code, iterator_type)> init(
        static_cast<ResolveHandler&&>(handler));

    service_impl_.async_resolve(impl, endpoint, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  void fork_service(asio::io_service::fork_event event)
  {
    service_impl_.fork_service(event);
  }


  service_impl_type service_impl_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_service.hpp" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 2

namespace asio {
namespace ip {
# 41 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
template <typename InternetProtocol,
    typename ResolverService = resolver_service<InternetProtocol> >
class basic_resolver
  : public basic_io_object<ResolverService>
{
public:

  typedef InternetProtocol protocol_type;


  typedef typename InternetProtocol::endpoint endpoint_type;


  typedef basic_resolver_query<InternetProtocol> query;


  typedef basic_resolver_iterator<InternetProtocol> iterator;
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  explicit basic_resolver(asio::io_service& io_service)
    : basic_io_object<ResolverService>(io_service)
  {
  }







  void cancel()
  {
    return this->service.cancel(this->implementation);
  }
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  iterator resolve(const query& q)
  {
    asio::error_code ec;
    iterator i = this->service.resolve(this->implementation, q, ec);
    asio::detail::throw_error(ec, "resolve");
    return i;
  }
# 123 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  iterator resolve(const query& q, asio::error_code& ec)
  {
    return this->service.resolve(this->implementation, q, ec);
  }
# 154 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  template <typename ResolveHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ResolveHandler, void (asio::error_code, iterator)>::type>::type

  async_resolve(const query& q,
      ResolveHandler&& handler)
  {


    typedef typename handler_type<ResolveHandler, void(asio::error_code, iterator)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const iterator*>(0))) == 1, "ResolveHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const iterator>()), char(0))> __attribute__((__unused__))
                                           type_check;

    return this->service.async_resolve(this->implementation, q,
        static_cast<ResolveHandler&&>(handler));
  }
# 187 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  iterator resolve(const endpoint_type& e)
  {
    asio::error_code ec;
    iterator i = this->service.resolve(this->implementation, e, ec);
    asio::detail::throw_error(ec, "resolve");
    return i;
  }
# 214 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  iterator resolve(const endpoint_type& e, asio::error_code& ec)
  {
    return this->service.resolve(this->implementation, e, ec);
  }
# 247 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp"
  template <typename ResolveHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ResolveHandler, void (asio::error_code, iterator)>::type>::type

  async_resolve(const endpoint_type& e,
      ResolveHandler&& handler)
  {


    typedef typename handler_type<ResolveHandler, void(asio::error_code, iterator)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const iterator*>(0))) == 1, "ResolveHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const iterator>()), char(0))> __attribute__((__unused__))
                                           type_check;

    return this->service.async_resolve(this->implementation, e,
        static_cast<ResolveHandler&&>(handler));
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 267 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 2
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_entry.hpp" 1
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_iterator.hpp" 1
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver_query.hpp" 1
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/host_name.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/host_name.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/host_name.hpp" 2

namespace asio {
namespace ip {


inline std::string host_name();


inline std::string host_name(asio::error_code& ec);

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 37 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/host_name.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/host_name.ipp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/host_name.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/host_name.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/host_name.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/host_name.ipp" 2

namespace asio {
namespace ip {

std::string host_name()
{
  char name[1024];
  asio::error_code ec;
  if (asio::detail::socket_ops::gethostname(name, sizeof(name), ec) != 0)
  {
    asio::detail::throw_error(ec);
    return std::string();
  }
  return std::string(name);
}

std::string host_name(asio::error_code& ec)
{
  char name[1024];
  if (asio::detail::socket_ops::gethostname(name, sizeof(name), ec) != 0)
    return std::string();
  return std::string(name);
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/impl/host_name.ipp" 2
# 40 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/host_name.hpp" 2
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_endpoint.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/basic_resolver.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 2

namespace asio {
namespace ip {
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
class icmp
{
public:

  typedef basic_endpoint<icmp> endpoint;


  static icmp v4()
  {
    return icmp(
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 3 4
               IPPROTO_ICMP
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
                                        ,
        
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 3 4
       2
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
                           );
  }


  static icmp v6()
  {
    return icmp(
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 3 4
               IPPROTO_ICMPV6
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
                                          ,
        
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 3 4
       10
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
                            );
  }


  int type() const
  {
    return 
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 3 4
          SOCK_RAW
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp"
                               ;
  }


  int protocol() const
  {
    return protocol_;
  }


  int family() const
  {
    return family_;
  }


  typedef basic_raw_socket<icmp> socket;


  typedef basic_resolver<icmp> resolver;


  friend bool operator==(const icmp& p1, const icmp& p2)
  {
    return p1.protocol_ == p2.protocol_ && p1.family_ == p2.family_;
  }


  friend bool operator!=(const icmp& p1, const icmp& p2)
  {
    return p1.protocol_ != p2.protocol_ || p1.family_ != p2.family_;
  }

private:

  explicit icmp(int protocol_id, int protocol_family)
    : protocol_(protocol_id),
      family_(protocol_family)
  {
  }

  int protocol_;
  int family_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 114 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/icmp.hpp" 2
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 2

namespace asio {
namespace ip {
namespace detail {
namespace socket_option {


template <int IPv4_Level, int IPv4_Name, int IPv6_Level, int IPv6_Name>
class multicast_enable_loopback
{
public:







  typedef int ipv4_value_type;
  typedef int ipv6_value_type;



  multicast_enable_loopback()
    : ipv4_value_(0),
      ipv6_value_(0)
  {
  }


  explicit multicast_enable_loopback(bool v)
    : ipv4_value_(v ? 1 : 0),
      ipv6_value_(v ? 1 : 0)
  {
  }


  multicast_enable_loopback& operator=(bool v)
  {
    ipv4_value_ = v ? 1 : 0;
    ipv6_value_ = v ? 1 : 0;
    return *this;
  }


  bool value() const
  {
    return !!ipv4_value_;
  }


  operator bool() const
  {
    return !!ipv4_value_;
  }


  bool operator!() const
  {
    return !ipv4_value_;
  }


  template <typename Protocol>
  int level(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Level;
    return IPv4_Level;
  }


  template <typename Protocol>
  int name(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 103 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 103 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Name;
    return IPv4_Name;
  }


  template <typename Protocol>
  void* data(const Protocol& protocol)
  {
    if (protocol.family() == 
# 112 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 112 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return &ipv6_value_;
    return &ipv4_value_;
  }


  template <typename Protocol>
  const void* data(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 121 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 121 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return &ipv6_value_;
    return &ipv4_value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 130 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 130 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return sizeof(ipv6_value_);
    return sizeof(ipv4_value_);
  }


  template <typename Protocol>
  void resize(const Protocol& protocol, std::size_t s)
  {
    if (protocol.family() == 
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 139 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
    {
      if (s != sizeof(ipv6_value_))
      {
        std::length_error ex("multicast_enable_loopback socket option resize");
        asio::detail::throw_exception(ex);
      }
      ipv4_value_ = ipv6_value_ ? 1 : 0;
    }
    else
    {
      if (s != sizeof(ipv4_value_))
      {
        std::length_error ex("multicast_enable_loopback socket option resize");
        asio::detail::throw_exception(ex);
      }
      ipv6_value_ = ipv4_value_ ? 1 : 0;
    }
  }

private:
  ipv4_value_type ipv4_value_;
  ipv6_value_type ipv6_value_;
};


template <int IPv4_Level, int IPv4_Name, int IPv6_Level, int IPv6_Name>
class unicast_hops
{
public:

  unicast_hops()
    : value_(0)
  {
  }


  explicit unicast_hops(int v)
    : value_(v)
  {
  }


  unicast_hops& operator=(int v)
  {
    value_ = v;
    return *this;
  }


  int value() const
  {
    return value_;
  }


  template <typename Protocol>
  int level(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 198 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Level;
    return IPv4_Level;
  }


  template <typename Protocol>
  int name(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 207 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 207 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Name;
    return IPv4_Name;
  }


  template <typename Protocol>
  int* data(const Protocol&)
  {
    return &value_;
  }


  template <typename Protocol>
  const int* data(const Protocol&) const
  {
    return &value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol&) const
  {
    return sizeof(value_);
  }


  template <typename Protocol>
  void resize(const Protocol&, std::size_t s)
  {
    if (s != sizeof(value_))
    {
      std::length_error ex("unicast hops socket option resize");
      asio::detail::throw_exception(ex);
    }




  }

private:
  int value_;
};


template <int IPv4_Level, int IPv4_Name, int IPv6_Level, int IPv6_Name>
class multicast_hops
{
public:



  typedef unsigned char ipv4_value_type;

  typedef int ipv6_value_type;


  multicast_hops()
    : ipv4_value_(0),
      ipv6_value_(0)
  {
  }


  explicit multicast_hops(int v)
  {
    if (v < 0 || v > 255)
    {
      std::out_of_range ex("multicast hops value out of range");
      asio::detail::throw_exception(ex);
    }
    ipv4_value_ = (ipv4_value_type)v;
    ipv6_value_ = v;
  }


  multicast_hops& operator=(int v)
  {
    if (v < 0 || v > 255)
    {
      std::out_of_range ex("multicast hops value out of range");
      asio::detail::throw_exception(ex);
    }
    ipv4_value_ = (ipv4_value_type)v;
    ipv6_value_ = v;
    return *this;
  }


  int value() const
  {
    return ipv6_value_;
  }


  template <typename Protocol>
  int level(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 306 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 306 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Level;
    return IPv4_Level;
  }


  template <typename Protocol>
  int name(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 315 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 315 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Name;
    return IPv4_Name;
  }


  template <typename Protocol>
  void* data(const Protocol& protocol)
  {
    if (protocol.family() == 
# 324 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 324 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return &ipv6_value_;
    return &ipv4_value_;
  }


  template <typename Protocol>
  const void* data(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 333 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 333 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return &ipv6_value_;
    return &ipv4_value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 342 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 342 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return sizeof(ipv6_value_);
    return sizeof(ipv4_value_);
  }


  template <typename Protocol>
  void resize(const Protocol& protocol, std::size_t s)
  {
    if (protocol.family() == 
# 351 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 351 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
    {
      if (s != sizeof(ipv6_value_))
      {
        std::length_error ex("multicast hops socket option resize");
        asio::detail::throw_exception(ex);
      }
      if (ipv6_value_ < 0)
        ipv4_value_ = 0;
      else if (ipv6_value_ > 255)
        ipv4_value_ = 255;
      else
        ipv4_value_ = (ipv4_value_type)ipv6_value_;
    }
    else
    {
      if (s != sizeof(ipv4_value_))
      {
        std::length_error ex("multicast hops socket option resize");
        asio::detail::throw_exception(ex);
      }
      ipv6_value_ = ipv4_value_;
    }
  }

private:
  ipv4_value_type ipv4_value_;
  ipv6_value_type ipv6_value_;
};


template <int IPv4_Level, int IPv4_Name, int IPv6_Level, int IPv6_Name>
class multicast_request
{
public:

  multicast_request()
    : ipv4_value_(),
      ipv6_value_()
  {
  }


  explicit multicast_request(const asio::ip::address& multicast_address)
    : ipv4_value_(),
      ipv6_value_()
  {
    if (multicast_address.is_v6())
    {
      using namespace std;
      asio::ip::address_v6 ipv6_address = multicast_address.to_v6();
      asio::ip::address_v6::bytes_type bytes = ipv6_address.to_bytes();
      memcpy(ipv6_value_.ipv6mr_multiaddr.
# 403 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                                         __in6_u.__u6_addr8
# 403 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                                , bytes.data(), 16);
      ipv6_value_.ipv6mr_interface = ipv6_address.scope_id();
    }
    else
    {
      ipv4_value_.imr_multiaddr.s_addr =
        asio::detail::socket_ops::host_to_network_long(
            multicast_address.to_v4().to_ulong());
      ipv4_value_.imr_interface.s_addr =
        asio::detail::socket_ops::host_to_network_long(
            asio::ip::address_v4::any().to_ulong());
    }
  }


  explicit multicast_request(
      const asio::ip::address_v4& multicast_address,
      const asio::ip::address_v4& network_interface
        = asio::ip::address_v4::any())
    : ipv6_value_()
  {
    ipv4_value_.imr_multiaddr.s_addr =
      asio::detail::socket_ops::host_to_network_long(
          multicast_address.to_ulong());
    ipv4_value_.imr_interface.s_addr =
      asio::detail::socket_ops::host_to_network_long(
          network_interface.to_ulong());
  }


  explicit multicast_request(
      const asio::ip::address_v6& multicast_address,
      unsigned long network_interface = 0)
    : ipv4_value_()
  {
    using namespace std;
    asio::ip::address_v6::bytes_type bytes =
      multicast_address.to_bytes();
    memcpy(ipv6_value_.ipv6mr_multiaddr.
# 441 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                                       __in6_u.__u6_addr8
# 441 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                              , bytes.data(), 16);
    if (network_interface)
      ipv6_value_.ipv6mr_interface = network_interface;
    else
      ipv6_value_.ipv6mr_interface = multicast_address.scope_id();
  }


  template <typename Protocol>
  int level(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 452 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 452 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Level;
    return IPv4_Level;
  }


  template <typename Protocol>
  int name(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 461 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 461 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Name;
    return IPv4_Name;
  }


  template <typename Protocol>
  const void* data(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 470 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 470 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return &ipv6_value_;
    return &ipv4_value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 479 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 479 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return sizeof(ipv6_value_);
    return sizeof(ipv4_value_);
  }

private:
  asio::detail::in4_mreq_type ipv4_value_;
  asio::detail::in6_mreq_type ipv6_value_;
};


template <int IPv4_Level, int IPv4_Name, int IPv6_Level, int IPv6_Name>
class network_interface
{
public:

  network_interface()
  {
    ipv4_value_.s_addr =
      asio::detail::socket_ops::host_to_network_long(
          asio::ip::address_v4::any().to_ulong());
    ipv6_value_ = 0;
  }


  explicit network_interface(const asio::ip::address_v4& ipv4_interface)
  {
    ipv4_value_.s_addr =
      asio::detail::socket_ops::host_to_network_long(
          ipv4_interface.to_ulong());
    ipv6_value_ = 0;
  }


  explicit network_interface(unsigned int ipv6_interface)
  {
    ipv4_value_.s_addr =
      asio::detail::socket_ops::host_to_network_long(
          asio::ip::address_v4::any().to_ulong());
    ipv6_value_ = ipv6_interface;
  }


  template <typename Protocol>
  int level(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 525 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 525 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Level;
    return IPv4_Level;
  }


  template <typename Protocol>
  int name(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 534 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 534 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return IPv6_Name;
    return IPv4_Name;
  }


  template <typename Protocol>
  const void* data(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 543 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 543 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return &ipv6_value_;
    return &ipv4_value_;
  }


  template <typename Protocol>
  std::size_t size(const Protocol& protocol) const
  {
    if (protocol.family() == 
# 552 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 3 4
                            10
# 552 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp"
                                    )
      return sizeof(ipv6_value_);
    return sizeof(ipv4_value_);
  }

private:
  asio::detail::in4_addr_type ipv4_value_;
  unsigned int ipv6_value_;
};

}
}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 568 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/detail/socket_option.hpp" 2
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 2

namespace asio {
namespace ip {
namespace multicast {
# 49 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
typedef asio::ip::detail::socket_option::multicast_request<
  
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IP
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                        ,
  
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 35
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                               ,
  
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IPV6
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                          ,
  
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 20
# 53 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                             > join_group;
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
typedef asio::ip::detail::socket_option::multicast_request<
  
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IP
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                        ,
  
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 36
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                                ,
  
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IPV6
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                          ,
  
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 21
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                              > leave_group;
# 105 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
typedef asio::ip::detail::socket_option::network_interface<
  
# 106 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IP
# 106 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                        ,
  
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 32
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                             ,
  
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IPV6
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                          ,
  
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 17
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                               > outbound_interface;
# 141 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
typedef asio::ip::detail::socket_option::multicast_hops<
  
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IP
# 142 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                        ,
  
# 143 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 33
# 143 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                              ,
  
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IPV6
# 144 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                          ,
  
# 145 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 18
# 145 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                                 > hops;
# 178 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
typedef asio::ip::detail::socket_option::multicast_enable_loopback<
  
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IP
# 179 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                        ,
  
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 34
# 180 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                               ,
  
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 IPPROTO_IPV6
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                          ,
  
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 3 4
 19
# 182 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp"
                                 > enable_loopback;


}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 190 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/multicast.hpp" 2
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_query_base.hpp" 1
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/resolver_service.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_socket_acceptor.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 2

namespace asio {
namespace ip {
# 45 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
class tcp
{
public:

  typedef basic_endpoint<tcp> endpoint;


  static tcp v4()
  {
    return tcp(
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 3 4
              2
# 54 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
                                  );
  }


  static tcp v6()
  {
    return tcp(
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 3 4
              10
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
                                   );
  }


  int type() const
  {
    return 
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 3 4
          SOCK_STREAM
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
                                  ;
  }


  int protocol() const
  {
    return 
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 3 4
          IPPROTO_TCP
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
                                  ;
  }


  int family() const
  {
    return family_;
  }


  typedef basic_stream_socket<tcp> socket;


  typedef basic_socket_acceptor<tcp> acceptor;


  typedef basic_resolver<tcp> resolver;



  typedef basic_socket_iostream<tcp> iostream;
# 124 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
  typedef asio::detail::socket_option::boolean<
    
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 3 4
   IPPROTO_TCP
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
                           , 
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 3 4
                             1
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp"
                                                     > no_delay;



  friend bool operator==(const tcp& p1, const tcp& p2)
  {
    return p1.family_ == p2.family_;
  }


  friend bool operator!=(const tcp& p1, const tcp& p2)
  {
    return p1.family_ != p2.family_;
  }

private:

  explicit tcp(int protocol_family)
    : family_(protocol_family)
  {
  }

  int family_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 154 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/tcp.hpp" 2
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 2

namespace asio {
namespace ip {
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp"
class udp
{
public:

  typedef basic_endpoint<udp> endpoint;


  static udp v4()
  {
    return udp(
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 3 4
              2
# 51 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp"
                                  );
  }


  static udp v6()
  {
    return udp(
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 3 4
              10
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp"
                                   );
  }


  int type() const
  {
    return 
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 3 4
          SOCK_DGRAM
# 63 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp"
                                 ;
  }


  int protocol() const
  {
    return 
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 3 4
          IPPROTO_UDP
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp"
                                  ;
  }


  int family() const
  {
    return family_;
  }


  typedef basic_datagram_socket<udp> socket;


  typedef basic_resolver<udp> resolver;


  friend bool operator==(const udp& p1, const udp& p2)
  {
    return p1.family_ == p2.family_;
  }


  friend bool operator!=(const udp& p1, const udp& p2)
  {
    return p1.family_ != p2.family_;
  }

private:

  explicit udp(int protocol_family)
    : family_(protocol_family)
  {
  }

  int family_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/udp.hpp" 2
# 73 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 2

namespace asio {
namespace ip {
namespace unicast {
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp"
typedef asio::ip::detail::socket_option::unicast_hops<
  
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 3 4
 IPPROTO_IP
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp"
                        ,
  
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 3 4
 2
# 59 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp"
                    ,
  
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 3 4
 IPPROTO_IPV6
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp"
                          ,
  
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 3 4
 16
# 61 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp"
                               > hops;


}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 69 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/unicast.hpp" 2
# 74 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp" 2

namespace asio {
namespace ip {
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp"
typedef asio::detail::socket_option::boolean<
    
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp" 3 4
   IPPROTO_IPV6
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp"
               , 
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp" 3 4
                 26
# 57 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp"
                            > v6_only;






}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 68 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/ip/v6_only.hpp" 2
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_read_buffered.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_read_buffered.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_read_buffered.hpp" 2

namespace asio {

namespace detail {

template <typename Stream>
char is_read_buffered_helper(buffered_stream<Stream>* s);

template <typename Stream>
char is_read_buffered_helper(buffered_read_stream<Stream>* s);

struct is_read_buffered_big_type { char data[10]; };
is_read_buffered_big_type is_read_buffered_helper(...);

}



template <typename Stream>
class is_read_buffered
{
public:





  static const bool value = sizeof(detail::is_read_buffered_helper((Stream*)0)) == 1
                                                                       ;

};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_read_buffered.hpp" 2
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_write_buffered.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_write_buffered.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_write_buffered.hpp" 2

namespace asio {

namespace detail {

template <typename Stream>
char is_write_buffered_helper(buffered_stream<Stream>* s);

template <typename Stream>
char is_write_buffered_helper(buffered_write_stream<Stream>* s);

struct is_write_buffered_big_type { char data[10]; };
is_write_buffered_big_type is_write_buffered_helper(...);

}



template <typename Stream>
class is_write_buffered
{
public:





  static const bool value = sizeof(detail::is_write_buffered_helper((Stream*)0)) == 1
                                                                        ;

};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 58 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/is_write_buffered.hpp" 2
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 2

namespace asio {
namespace local {
namespace detail {


class endpoint
{
public:

  inline endpoint();


  inline endpoint(const char* path_name);


  inline endpoint(const std::string& path_name);


  endpoint(const endpoint& other)
    : data_(other.data_),
      path_length_(other.path_length_)
  {
  }


  endpoint& operator=(const endpoint& other)
  {
    data_ = other.data_;
    path_length_ = other.path_length_;
    return *this;
  }


  asio::detail::socket_addr_type* data()
  {
    return &data_.base;
  }


  const asio::detail::socket_addr_type* data() const
  {
    return &data_.base;
  }


  std::size_t size() const
  {
    return path_length_
      + 
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 3 4
       __builtin_offsetof (
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp"
       asio::detail::sockaddr_un_type
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 3 4
       , 
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp"
       sun_path
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 3 4
       )
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp"
                                                         ;
  }


  inline void resize(std::size_t size);


  std::size_t capacity() const
  {
    return sizeof(asio::detail::sockaddr_un_type);
  }


  inline std::string path() const;


  inline void path(const char* p);


  inline void path(const std::string& p);


  inline friend bool operator==(
      const endpoint& e1, const endpoint& e2);


  inline friend bool operator<(
      const endpoint& e1, const endpoint& e2);

private:

  union data_union
  {
    asio::detail::socket_addr_type base;
    asio::detail::sockaddr_un_type local;
  } data_;


  std::size_t path_length_;


  inline void init(const char* path, std::size_t path_length);
};

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 126 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 2


# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 2

namespace asio {
namespace local {
namespace detail {

endpoint::endpoint()
{
  init("", 0);
}

endpoint::endpoint(const char* path_name)
{
  using namespace std;
  init(path_name, strlen(path_name));
}

endpoint::endpoint(const std::string& path_name)
{
  init(path_name.data(), path_name.length());
}

void endpoint::resize(std::size_t new_size)
{
  if (new_size > sizeof(asio::detail::sockaddr_un_type))
  {
    asio::error_code ec(asio::error::invalid_argument);
    asio::detail::throw_error(ec);
  }
  else if (new_size == 0)
  {
    path_length_ = 0;
  }
  else
  {
    path_length_ = new_size
      - 
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 3 4
       __builtin_offsetof (
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp"
       asio::detail::sockaddr_un_type
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 3 4
       , 
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp"
       sun_path
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 3 4
       )
# 65 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp"
                                                         ;


    if (path_length_ > 0 && data_.local.sun_path[path_length_ - 1] == 0)
      --path_length_;
  }
}

std::string endpoint::path() const
{
  return std::string(data_.local.sun_path, path_length_);
}

void endpoint::path(const char* p)
{
  using namespace std;
  init(p, strlen(p));
}

void endpoint::path(const std::string& p)
{
  init(p.data(), p.length());
}

bool operator==(const endpoint& e1, const endpoint& e2)
{
  return e1.path() == e2.path();
}

bool operator<(const endpoint& e1, const endpoint& e2)
{
  return e1.path() < e2.path();
}

void endpoint::init(const char* path_name, std::size_t path_length)
{
  if (path_length > sizeof(data_.local.sun_path) - 1)
  {

    asio::error_code ec(asio::error::name_too_long);
    asio::detail::throw_error(ec);
  }

  using namespace std;
  data_.local = asio::detail::sockaddr_un_type();
  data_.local.sun_family = 
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 3 4
                          1
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp"
                                 ;
  memcpy(data_.local.sun_path, path_name, path_length);
  path_length_ = path_length;



  if (path_length > 0 && data_.local.sun_path[0] == 0)
    data_.local.sun_path[path_length] = 0;
}

}
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 125 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/impl/endpoint.ipp" 2
# 129 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/detail/endpoint.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp" 2





# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp" 2

namespace asio {
namespace local {
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp"
template <typename Protocol>
class basic_endpoint
{
public:

  typedef Protocol protocol_type;






  typedef asio::detail::socket_addr_type data_type;



  basic_endpoint()
  {
  }


  basic_endpoint(const char* path_name)
    : impl_(path_name)
  {
  }


  basic_endpoint(const std::string& path_name)
    : impl_(path_name)
  {
  }


  basic_endpoint(const basic_endpoint& other)
    : impl_(other.impl_)
  {
  }



  basic_endpoint(basic_endpoint&& other)
    : impl_(other.impl_)
  {
  }



  basic_endpoint& operator=(const basic_endpoint& other)
  {
    impl_ = other.impl_;
    return *this;
  }



  basic_endpoint& operator=(basic_endpoint&& other)
  {
    impl_ = other.impl_;
    return *this;
  }



  protocol_type protocol() const
  {
    return protocol_type();
  }


  data_type* data()
  {
    return impl_.data();
  }


  const data_type* data() const
  {
    return impl_.data();
  }


  std::size_t size() const
  {
    return impl_.size();
  }


  void resize(std::size_t new_size)
  {
    impl_.resize(new_size);
  }


  std::size_t capacity() const
  {
    return impl_.capacity();
  }


  std::string path() const
  {
    return impl_.path();
  }


  void path(const char* p)
  {
    impl_.path(p);
  }


  void path(const std::string& p)
  {
    impl_.path(p);
  }


  friend bool operator==(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return e1.impl_ == e2.impl_;
  }


  friend bool operator!=(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return !(e1.impl_ == e2.impl_);
  }


  friend bool operator<(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return e1.impl_ < e2.impl_;
  }


  friend bool operator>(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return e2.impl_ < e1.impl_;
  }


  friend bool operator<=(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return !(e2 < e1);
  }


  friend bool operator>=(const basic_endpoint<Protocol>& e1,
      const basic_endpoint<Protocol>& e2)
  {
    return !(e1 < e2);
  }

private:

  asio::local::detail::endpoint impl_;
};
# 222 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp"
template <typename Elem, typename Traits, typename Protocol>
std::basic_ostream<Elem, Traits>& operator<<(
    std::basic_ostream<Elem, Traits>& os,
    const basic_endpoint<Protocol>& endpoint)
{
  os << endpoint.path();
  return os;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 235 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp" 2
# 78 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/connect_pair.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/connect_pair.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/basic_endpoint.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/connect_pair.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/connect_pair.hpp" 2

namespace asio {
namespace local {


template <typename Protocol, typename SocketService1, typename SocketService2>
void connect_pair(
    basic_socket<Protocol, SocketService1>& socket1,
    basic_socket<Protocol, SocketService2>& socket2);


template <typename Protocol, typename SocketService1, typename SocketService2>
asio::error_code connect_pair(
    basic_socket<Protocol, SocketService1>& socket1,
    basic_socket<Protocol, SocketService2>& socket2,
    asio::error_code& ec);

template <typename Protocol, typename SocketService1, typename SocketService2>
inline void connect_pair(
    basic_socket<Protocol, SocketService1>& socket1,
    basic_socket<Protocol, SocketService2>& socket2)
{
  asio::error_code ec;
  connect_pair(socket1, socket2, ec);
  asio::detail::throw_error(ec, "connect_pair");
}

template <typename Protocol, typename SocketService1, typename SocketService2>
inline asio::error_code connect_pair(
    basic_socket<Protocol, SocketService1>& socket1,
    basic_socket<Protocol, SocketService2>& socket2,
    asio::error_code& ec)
{

  asio::local::basic_endpoint<Protocol>* tmp
    = static_cast<typename Protocol::endpoint*>(0);
  (void)tmp;

  Protocol protocol;
  asio::detail::socket_type sv[2];
  if (asio::detail::socket_ops::socketpair(protocol.family(),
        protocol.type(), protocol.protocol(), sv, ec)
      == asio::detail::socket_error_retval)
    return ec;

  if (socket1.assign(protocol, sv[0], ec))
  {
    asio::error_code temp_ec;
    asio::detail::socket_ops::state_type state[2] = { 0, 0 };
    asio::detail::socket_ops::close(sv[0], state[0], true, temp_ec);
    asio::detail::socket_ops::close(sv[1], state[1], true, temp_ec);
    return ec;
  }

  if (socket2.assign(protocol, sv[1], ec))
  {
    asio::error_code temp_ec;
    socket1.close(temp_ec);
    asio::detail::socket_ops::state_type state = 0;
    asio::detail::socket_ops::close(sv[1], state, true, temp_ec);
    return ec;
  }

  return ec;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/connect_pair.hpp" 2
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp" 2

namespace asio {
namespace local {
# 44 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp"
class datagram_protocol
{
public:

  int type() const
  {
    return 
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp" 3 4
          SOCK_DGRAM
# 50 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp"
                    ;
  }


  int protocol() const
  {
    return 0;
  }


  int family() const
  {
    return 
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp" 3 4
          1
# 62 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp"
                 ;
  }


  typedef basic_endpoint<datagram_protocol> endpoint;


  typedef basic_datagram_socket<datagram_protocol> socket;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/datagram_protocol.hpp" 2
# 80 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp" 2

namespace asio {
namespace local {
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp"
class stream_protocol
{
public:

  int type() const
  {
    return 
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp" 3 4
          SOCK_STREAM
# 52 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp"
                     ;
  }


  int protocol() const
  {
    return 0;
  }


  int family() const
  {
    return 
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp" 3 4
          1
# 64 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp"
                 ;
  }


  typedef basic_endpoint<stream_protocol> endpoint;


  typedef basic_stream_socket<stream_protocol> socket;


  typedef basic_socket_acceptor<stream_protocol> acceptor;



  typedef basic_socket_iostream<stream_protocol> iostream;

};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/local/stream_protocol.hpp" 2
# 81 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/placeholders.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/placeholders.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/placeholders.hpp" 2

namespace asio {
namespace placeholders {
# 118 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/placeholders.hpp"
}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/placeholders.hpp" 2
# 82 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp" 2

namespace asio {
namespace posix {




class descriptor_base
{
public:
# 56 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp"
  typedef asio::detail::io_control::non_blocking_io non_blocking_io;
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp"
  typedef asio::detail::io_control::bytes_readable bytes_readable;


protected:

  ~descriptor_base()
  {
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp" 2
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp" 2

namespace asio {
namespace posix {
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
template <typename DescriptorService>
class basic_descriptor
  : public basic_io_object<DescriptorService>,
    public descriptor_base
{
public:


  typedef typename DescriptorService::native_handle_type native_type;


  typedef typename DescriptorService::native_handle_type native_handle_type;


  typedef basic_descriptor<DescriptorService> lowest_layer_type;
# 66 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  explicit basic_descriptor(asio::io_service& io_service)
    : basic_io_object<DescriptorService>(io_service)
  {
  }
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  basic_descriptor(asio::io_service& io_service,
      const native_handle_type& native_descriptor)
    : basic_io_object<DescriptorService>(io_service)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        native_descriptor, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 105 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  basic_descriptor(basic_descriptor&& other)
    : basic_io_object<DescriptorService>(
        static_cast<basic_descriptor&&>(other))
  {
  }
# 121 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  basic_descriptor& operator=(basic_descriptor&& other)
  {
    basic_io_object<DescriptorService>::operator=(
        static_cast<basic_descriptor&&>(other));
    return *this;
  }
# 138 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  lowest_layer_type& lowest_layer()
  {
    return *this;
  }
# 152 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  const lowest_layer_type& lowest_layer() const
  {
    return *this;
  }
# 165 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  void assign(const native_handle_type& native_descriptor)
  {
    asio::error_code ec;
    this->get_service().assign(this->get_implementation(),
        native_descriptor, ec);
    asio::detail::throw_error(ec, "assign");
  }
# 181 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  asio::error_code assign(const native_handle_type& native_descriptor,
      asio::error_code& ec)
  {
    return this->get_service().assign(
        this->get_implementation(), native_descriptor, ec);
  }


  bool is_open() const
  {
    return this->get_service().is_open(this->implementation);
  }
# 203 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  void close()
  {
    asio::error_code ec;
    this->get_service().close(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "close");
  }
# 219 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  asio::error_code close(asio::error_code& ec)
  {
    return this->get_service().close(this->get_implementation(), ec);
  }
# 231 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  native_type native()
  {
    return this->get_service().native_handle(this->implementation);
  }







  native_handle_type native_handle()
  {
    return this->get_service().native_handle(this->implementation);
  }
# 257 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  native_handle_type release()
  {
    return this->get_service().release(this->implementation);
  }
# 270 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  void cancel()
  {
    asio::error_code ec;
    this->get_service().cancel(this->get_implementation(), ec);
    asio::detail::throw_error(ec, "cancel");
  }
# 285 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  asio::error_code cancel(asio::error_code& ec)
  {
    return this->get_service().cancel(this->get_implementation(), ec);
  }
# 312 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  template <typename IoControlCommand>
  void io_control(IoControlCommand& command)
  {
    asio::error_code ec;
    this->get_service().io_control(this->get_implementation(), command, ec);
    asio::detail::throw_error(ec, "io_control");
  }
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  template <typename IoControlCommand>
  asio::error_code io_control(IoControlCommand& command,
      asio::error_code& ec)
  {
    return this->get_service().io_control(
        this->get_implementation(), command, ec);
  }
# 366 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  bool non_blocking() const
  {
    return this->get_service().non_blocking(this->implementation);
  }
# 384 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  void non_blocking(bool mode)
  {
    asio::error_code ec;
    this->get_service().non_blocking(this->get_implementation(), mode, ec);
    asio::detail::throw_error(ec, "non_blocking");
  }
# 404 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  asio::error_code non_blocking(
      bool mode, asio::error_code& ec)
  {
    return this->get_service().non_blocking(
        this->get_implementation(), mode, ec);
  }
# 425 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  bool native_non_blocking() const
  {
    return this->get_service().native_non_blocking(this->implementation);
  }
# 445 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  void native_non_blocking(bool mode)
  {
    asio::error_code ec;
    this->get_service().native_non_blocking(
        this->get_implementation(), mode, ec);
    asio::detail::throw_error(ec, "native_non_blocking");
  }
# 468 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp"
  asio::error_code native_non_blocking(
      bool mode, asio::error_code& ec)
  {
    return this->get_service().native_non_blocking(
        this->get_implementation(), mode, ec);
  }

protected:

  ~basic_descriptor()
  {
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 486 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp" 2
# 83 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_descriptor.hpp" 1
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor_service.hpp" 1
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor_service.hpp" 2

namespace asio {
namespace posix {


class stream_descriptor_service



  : public asio::detail::service_base<stream_descriptor_service>

{
public:





private:

  typedef detail::reactive_descriptor_service service_impl_type;

public:




  typedef service_impl_type::implementation_type implementation_type;






  typedef service_impl_type::native_handle_type native_type;






  typedef service_impl_type::native_handle_type native_handle_type;



  explicit stream_descriptor_service(asio::io_service& io_service)
    : asio::detail::service_base<stream_descriptor_service>(io_service),
      service_impl_(io_service)
  {
  }


  void construct(implementation_type& impl)
  {
    service_impl_.construct(impl);
  }



  void move_construct(implementation_type& impl,
      implementation_type& other_impl)
  {
    service_impl_.move_construct(impl, other_impl);
  }


  void move_assign(implementation_type& impl,
      stream_descriptor_service& other_service,
      implementation_type& other_impl)
  {
    service_impl_.move_assign(impl, other_service.service_impl_, other_impl);
  }



  void destroy(implementation_type& impl)
  {
    service_impl_.destroy(impl);
  }


  asio::error_code assign(implementation_type& impl,
      const native_handle_type& native_descriptor,
      asio::error_code& ec)
  {
    return service_impl_.assign(impl, native_descriptor, ec);
  }


  bool is_open(const implementation_type& impl) const
  {
    return service_impl_.is_open(impl);
  }


  asio::error_code close(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.close(impl, ec);
  }



  native_type native(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type native_handle(implementation_type& impl)
  {
    return service_impl_.native_handle(impl);
  }


  native_handle_type release(implementation_type& impl)
  {
    return service_impl_.release(impl);
  }


  asio::error_code cancel(implementation_type& impl,
      asio::error_code& ec)
  {
    return service_impl_.cancel(impl, ec);
  }


  template <typename IoControlCommand>
  asio::error_code io_control(implementation_type& impl,
      IoControlCommand& command, asio::error_code& ec)
  {
    return service_impl_.io_control(impl, command, ec);
  }


  bool non_blocking(const implementation_type& impl) const
  {
    return service_impl_.non_blocking(impl);
  }


  asio::error_code non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.non_blocking(impl, mode, ec);
  }


  bool native_non_blocking(const implementation_type& impl) const
  {
    return service_impl_.native_non_blocking(impl);
  }


  asio::error_code native_non_blocking(implementation_type& impl,
      bool mode, asio::error_code& ec)
  {
    return service_impl_.native_non_blocking(impl, mode, ec);
  }


  template <typename ConstBufferSequence>
  std::size_t write_some(implementation_type& impl,
      const ConstBufferSequence& buffers, asio::error_code& ec)
  {
    return service_impl_.write_some(impl, buffers, ec);
  }


  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(implementation_type& impl,
      const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {
    asio::detail::async_result_init<
      WriteHandler, void (asio::error_code, std::size_t)> init(
        static_cast<WriteHandler&&>(handler));

    service_impl_.async_write_some(impl, buffers, init.handler);

    return init.result.get();
  }


  template <typename MutableBufferSequence>
  std::size_t read_some(implementation_type& impl,
      const MutableBufferSequence& buffers, asio::error_code& ec)
  {
    return service_impl_.read_some(impl, buffers, ec);
  }


  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(implementation_type& impl,
      const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {
    asio::detail::async_result_init<
      ReadHandler, void (asio::error_code, std::size_t)> init(
        static_cast<ReadHandler&&>(handler));

    service_impl_.async_read_some(impl, buffers, init.handler);

    return init.result.get();
  }

private:

  void shutdown_service()
  {
    service_impl_.shutdown_service();
  }


  service_impl_type service_impl_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 256 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor_service.hpp" 2
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp" 2

namespace asio {
namespace posix {
# 47 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
template <typename StreamDescriptorService = stream_descriptor_service>
class basic_stream_descriptor
  : public basic_descriptor<StreamDescriptorService>
{
public:


  typedef typename StreamDescriptorService::native_handle_type native_type;


  typedef typename StreamDescriptorService::native_handle_type
    native_handle_type;
# 70 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  explicit basic_stream_descriptor(asio::io_service& io_service)
    : basic_descriptor<StreamDescriptorService>(io_service)
  {
  }
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  basic_stream_descriptor(asio::io_service& io_service,
      const native_handle_type& native_descriptor)
    : basic_descriptor<StreamDescriptorService>(io_service, native_descriptor)
  {
  }
# 105 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  basic_stream_descriptor(basic_stream_descriptor&& other)
    : basic_descriptor<StreamDescriptorService>(
        static_cast<basic_stream_descriptor&&>(other))
  {
  }
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  basic_stream_descriptor& operator=(basic_stream_descriptor&& other)
  {
    basic_descriptor<StreamDescriptorService>::operator=(
        static_cast<basic_stream_descriptor&&>(other));
    return *this;
  }
# 157 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().write_some(
        this->get_implementation(), buffers, ec);
    asio::detail::throw_error(ec, "write_some");
    return s;
  }
# 183 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  template <typename ConstBufferSequence>
  std::size_t write_some(const ConstBufferSequence& buffers,
      asio::error_code& ec)
  {
    return this->get_service().write_some(
        this->get_implementation(), buffers, ec);
  }
# 226 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  template <typename ConstBufferSequence, typename WriteHandler>
  typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

  async_write_some(const ConstBufferSequence& buffers,
      WriteHandler&& handler)
  {


    typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_write_some(this->get_implementation(),
        buffers, static_cast<WriteHandler&&>(handler));
  }
# 268 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers)
  {
    asio::error_code ec;
    std::size_t s = this->get_service().read_some(
        this->get_implementation(), buffers, ec);
    asio::detail::throw_error(ec, "read_some");
    return s;
  }
# 295 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  template <typename MutableBufferSequence>
  std::size_t read_some(const MutableBufferSequence& buffers,
      asio::error_code& ec)
  {
    return this->get_service().read_some(
        this->get_implementation(), buffers, ec);
  }
# 339 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp"
  template <typename MutableBufferSequence, typename ReadHandler>
  typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

  async_read_some(const MutableBufferSequence& buffers,
      ReadHandler&& handler)
  {


    typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

    return this->get_service().async_read_some(this->get_implementation(),
        buffers, static_cast<ReadHandler&&>(handler));
  }
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 358 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp" 2
# 84 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/descriptor_base.hpp" 1
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor.hpp" 1
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/basic_stream_descriptor.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor.hpp" 2

namespace asio {
namespace posix {


typedef basic_stream_descriptor<> stream_descriptor;

}
}
# 86 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/posix/stream_descriptor_service.hpp" 1
# 87 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/raw_socket_service.hpp" 1
# 88 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp" 2

namespace asio {
# 72 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename MutableBufferSequence>
std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers);
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename MutableBufferSequence>
std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
    asio::error_code& ec);
# 161 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename MutableBufferSequence,
  typename CompletionCondition>
std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition);
# 205 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename MutableBufferSequence,
    typename CompletionCondition>
std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec);
# 238 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename Allocator>
std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b);
# 267 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename Allocator>
std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,
    asio::error_code& ec);
# 306 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename Allocator,
    typename CompletionCondition>
std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition);
# 347 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename SyncReadStream, typename Allocator,
    typename CompletionCondition>
std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec);
# 423 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename AsyncReadStream, typename MutableBufferSequence,
    typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,
    ReadHandler&& handler);
# 493 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename AsyncReadStream, typename MutableBufferSequence,
    typename CompletionCondition, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition,
    ReadHandler&& handler);
# 551 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,
    ReadHandler&& handler);
# 613 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp"
template <typename AsyncReadStream, typename Allocator,
    typename CompletionCondition, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    ReadHandler&& handler);





}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 628 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read.hpp" 2

namespace asio {

template <typename SyncReadStream, typename MutableBufferSequence,
    typename CompletionCondition>
std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  ec = asio::error_code();
  asio::detail::consuming_buffers<
    mutable_buffer, MutableBufferSequence> tmp(buffers);
  std::size_t total_transferred = 0;
  tmp.prepare(detail::adapt_completion_condition_result(
        completion_condition(ec, total_transferred)));
  while (tmp.begin() != tmp.end())
  {
    std::size_t bytes_transferred = s.read_some(tmp, ec);
    tmp.consume(bytes_transferred);
    total_transferred += bytes_transferred;
    tmp.prepare(detail::adapt_completion_condition_result(
          completion_condition(ec, total_transferred)));
  }
  return total_transferred;
}

template <typename SyncReadStream, typename MutableBufferSequence>
inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read(s, buffers, transfer_all(), ec);
  asio::detail::throw_error(ec, "read");
  return bytes_transferred;
}

template <typename SyncReadStream, typename MutableBufferSequence>
inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
    asio::error_code& ec)
{
  return read(s, buffers, transfer_all(), ec);
}

template <typename SyncReadStream, typename MutableBufferSequence,
    typename CompletionCondition>
inline std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read(s, buffers, completion_condition, ec);
  asio::detail::throw_error(ec, "read");
  return bytes_transferred;
}



template <typename SyncReadStream, typename Allocator,
    typename CompletionCondition>
std::size_t read(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  ec = asio::error_code();
  std::size_t total_transferred = 0;
  std::size_t max_size = detail::adapt_completion_condition_result(
        completion_condition(ec, total_transferred));
  std::size_t bytes_available = read_size_helper(b, max_size);
  while (bytes_available > 0)
  {
    std::size_t bytes_transferred = s.read_some(b.prepare(bytes_available), ec);
    b.commit(bytes_transferred);
    total_transferred += bytes_transferred;
    max_size = detail::adapt_completion_condition_result(
          completion_condition(ec, total_transferred));
    bytes_available = read_size_helper(b, max_size);
  }
  return total_transferred;
}

template <typename SyncReadStream, typename Allocator>
inline std::size_t read(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read(s, b, transfer_all(), ec);
  asio::detail::throw_error(ec, "read");
  return bytes_transferred;
}

template <typename SyncReadStream, typename Allocator>
inline std::size_t read(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    asio::error_code& ec)
{
  return read(s, b, transfer_all(), ec);
}

template <typename SyncReadStream, typename Allocator,
    typename CompletionCondition>
inline std::size_t read(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read(s, b, completion_condition, ec);
  asio::detail::throw_error(ec, "read");
  return bytes_transferred;
}



namespace detail
{
  template <typename AsyncReadStream, typename MutableBufferSequence,
      typename CompletionCondition, typename ReadHandler>
  class read_op
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_op(AsyncReadStream& stream, const MutableBufferSequence& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_op(const read_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_op(read_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      switch (start_ = start)
      {
        case 1:
        buffers_.prepare(this->check_for_completion(ec, total_transferred_));
        for (;;)
        {
          stream_.async_read_some(buffers_,
              static_cast<read_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          buffers_.consume(bytes_transferred);
          buffers_.prepare(this->check_for_completion(ec, total_transferred_));
          if ((!ec && bytes_transferred == 0)
              || buffers_.begin() == buffers_.end())
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncReadStream& stream_;
    asio::detail::consuming_buffers<
      mutable_buffer, MutableBufferSequence> buffers_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };

  template <typename AsyncReadStream,
      typename CompletionCondition, typename ReadHandler>
  class read_op<AsyncReadStream, asio::mutable_buffers_1,
      CompletionCondition, ReadHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_op(AsyncReadStream& stream,
        const asio::mutable_buffers_1& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffer_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_op(const read_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_op(read_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          stream_.async_read_some(
              asio::buffer(buffer_ + total_transferred_, n),
              static_cast<read_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == asio::buffer_size(buffer_))
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncReadStream& stream_;
    asio::mutable_buffer buffer_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };

  template <typename AsyncReadStream, typename Elem,
      typename CompletionCondition, typename ReadHandler>
  class read_op<AsyncReadStream, boost::array<Elem, 2>,
      CompletionCondition, ReadHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_op(AsyncReadStream& stream, const boost::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_op(const read_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_op(read_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          boost::array<asio::mutable_buffer, 2> >::type bufs = {{
        asio::mutable_buffer(buffers_[0]),
        asio::mutable_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          stream_.async_read_some(bufs, static_cast<read_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncReadStream& stream_;
    boost::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };



  template <typename AsyncReadStream, typename Elem,
      typename CompletionCondition, typename ReadHandler>
  class read_op<AsyncReadStream, std::array<Elem, 2>,
      CompletionCondition, ReadHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_op(AsyncReadStream& stream, const std::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_op(const read_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_op(read_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          std::array<asio::mutable_buffer, 2> >::type bufs = {{
        asio::mutable_buffer(buffers_[0]),
        asio::mutable_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          stream_.async_read_some(bufs, static_cast<read_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncReadStream& stream_;
    std::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };



  template <typename AsyncReadStream, typename MutableBufferSequence,
      typename CompletionCondition, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_op<AsyncReadStream, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename MutableBufferSequence,
      typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_op<AsyncReadStream, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename MutableBufferSequence,
      typename CompletionCondition, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_op<AsyncReadStream, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_op<AsyncReadStream, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_op<AsyncReadStream, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncReadStream, typename MutableBufferSequence,
    typename CompletionCondition, typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_op<AsyncReadStream, MutableBufferSequence,
    CompletionCondition, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                        >(
        s, buffers, completion_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

template <typename AsyncReadStream, typename MutableBufferSequence,
    typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_op<AsyncReadStream, MutableBufferSequence,
    detail::transfer_all_t, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                        >(
        s, buffers, transfer_all(), init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}



namespace detail
{
  template <typename AsyncReadStream, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  class read_streambuf_op
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_streambuf_op(AsyncReadStream& stream,
        basic_streambuf<Allocator>& streambuf,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        stream_(stream),
        streambuf_(streambuf),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_streambuf_op(const read_streambuf_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        streambuf_(other.streambuf_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_streambuf_op(read_streambuf_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        stream_(other.stream_),
        streambuf_(other.streambuf_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t max_size, bytes_available;
      switch (start_ = start)
      {
        case 1:
        max_size = this->check_for_completion(ec, total_transferred_);
        bytes_available = read_size_helper(streambuf_, max_size);
        for (;;)
        {
          stream_.async_read_some(streambuf_.prepare(bytes_available),
              static_cast<read_streambuf_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          streambuf_.commit(bytes_transferred);
          max_size = this->check_for_completion(ec, total_transferred_);
          bytes_available = read_size_helper(streambuf_, max_size);
          if ((!ec && bytes_transferred == 0) || bytes_available == 0)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncReadStream& stream_;
    asio::basic_streambuf<Allocator>& streambuf_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };

  template <typename AsyncReadStream, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_streambuf_op<AsyncReadStream, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_streambuf_op<AsyncReadStream, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_streambuf_op<AsyncReadStream, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream,
      typename Allocator, typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_streambuf_op<AsyncReadStream, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream,
      typename Allocator, typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_streambuf_op<AsyncReadStream, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncReadStream, typename Allocator,
    typename CompletionCondition, typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_streambuf_op<AsyncReadStream, Allocator,
    CompletionCondition, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                        >(
        s, b, completion_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_streambuf_op<AsyncReadStream, Allocator,
    detail::transfer_all_t, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                                        >(
        s, b, transfer_all(), init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 752 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read.hpp" 2
# 630 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read.hpp" 2
# 89 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp" 2

namespace asio {
# 77 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers);
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    asio::error_code& ec);
# 177 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename CompletionCondition>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition);
# 226 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename CompletionCondition>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec);
# 262 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename Allocator>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b);
# 294 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename Allocator>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b,
    asio::error_code& ec);
# 336 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename Allocator,
    typename CompletionCondition>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition);
# 380 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename SyncRandomAccessReadDevice, typename Allocator,
    typename CompletionCondition>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec);
# 456 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename AsyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d, uint64_t offset,
    const MutableBufferSequence& buffers,
    ReadHandler&& handler);
# 529 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename AsyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename CompletionCondition, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition,
    ReadHandler&& handler);
# 585 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename AsyncRandomAccessReadDevice, typename Allocator,
    typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d, uint64_t offset,
    basic_streambuf<Allocator>& b, ReadHandler&& handler);
# 645 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp"
template <typename AsyncRandomAccessReadDevice, typename Allocator,
    typename CompletionCondition, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    ReadHandler&& handler);





}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 661 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_at.hpp" 1
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_at.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_at.hpp" 2

namespace asio {

template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename CompletionCondition>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  ec = asio::error_code();
  asio::detail::consuming_buffers<
    mutable_buffer, MutableBufferSequence> tmp(buffers);
  std::size_t total_transferred = 0;
  tmp.prepare(detail::adapt_completion_condition_result(
        completion_condition(ec, total_transferred)));
  while (tmp.begin() != tmp.end())
  {
    std::size_t bytes_transferred = d.read_some_at(
        offset + total_transferred, tmp, ec);
    tmp.consume(bytes_transferred);
    total_transferred += bytes_transferred;
    tmp.prepare(detail::adapt_completion_condition_result(
          completion_condition(ec, total_transferred)));
  }
  return total_transferred;
}

template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence>
inline std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_at(
      d, offset, buffers, transfer_all(), ec);
  asio::detail::throw_error(ec, "read_at");
  return bytes_transferred;
}

template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence>
inline std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    asio::error_code& ec)
{
  return read_at(d, offset, buffers, transfer_all(), ec);
}

template <typename SyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename CompletionCondition>
inline std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_at(
      d, offset, buffers, completion_condition, ec);
  asio::detail::throw_error(ec, "read_at");
  return bytes_transferred;
}



template <typename SyncRandomAccessReadDevice, typename Allocator,
    typename CompletionCondition>
std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  ec = asio::error_code();
  std::size_t total_transferred = 0;
  std::size_t max_size = detail::adapt_completion_condition_result(
        completion_condition(ec, total_transferred));
  std::size_t bytes_available = read_size_helper(b, max_size);
  while (bytes_available > 0)
  {
    std::size_t bytes_transferred = d.read_some_at(
        offset + total_transferred, b.prepare(bytes_available), ec);
    b.commit(bytes_transferred);
    total_transferred += bytes_transferred;
    max_size = detail::adapt_completion_condition_result(
          completion_condition(ec, total_transferred));
    bytes_available = read_size_helper(b, max_size);
  }
  return total_transferred;
}

template <typename SyncRandomAccessReadDevice, typename Allocator>
inline std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_at(
      d, offset, b, transfer_all(), ec);
  asio::detail::throw_error(ec, "read_at");
  return bytes_transferred;
}

template <typename SyncRandomAccessReadDevice, typename Allocator>
inline std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    asio::error_code& ec)
{
  return read_at(d, offset, b, transfer_all(), ec);
}

template <typename SyncRandomAccessReadDevice, typename Allocator,
    typename CompletionCondition>
inline std::size_t read_at(SyncRandomAccessReadDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_at(
      d, offset, b, completion_condition, ec);
  asio::detail::throw_error(ec, "read_at");
  return bytes_transferred;
}



namespace detail
{
  template <typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  class read_at_op
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_at_op(AsyncRandomAccessReadDevice& device,
        uint64_t offset, const MutableBufferSequence& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_at_op(const read_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_at_op(read_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      switch (start_ = start)
      {
        case 1:
        buffers_.prepare(this->check_for_completion(ec, total_transferred_));
        for (;;)
        {
          device_.async_read_some_at(offset_ + total_transferred_,
              buffers_, static_cast<read_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          buffers_.consume(bytes_transferred);
          buffers_.prepare(this->check_for_completion(ec, total_transferred_));
          if ((!ec && bytes_transferred == 0)
              || buffers_.begin() == buffers_.end())
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessReadDevice& device_;
    uint64_t offset_;
    asio::detail::consuming_buffers<
      mutable_buffer, MutableBufferSequence> buffers_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };

  template <typename AsyncRandomAccessReadDevice,
      typename CompletionCondition, typename ReadHandler>
  class read_at_op<AsyncRandomAccessReadDevice,
      asio::mutable_buffers_1, CompletionCondition, ReadHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_at_op(AsyncRandomAccessReadDevice& device,
        uint64_t offset, const asio::mutable_buffers_1& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffer_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_at_op(const read_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_at_op(read_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          device_.async_read_some_at(offset_ + total_transferred_,
              asio::buffer(buffer_ + total_transferred_, n),
              static_cast<read_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == asio::buffer_size(buffer_))
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessReadDevice& device_;
    uint64_t offset_;
    asio::mutable_buffer buffer_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };

  template <typename AsyncRandomAccessReadDevice, typename Elem,
      typename CompletionCondition, typename ReadHandler>
  class read_at_op<AsyncRandomAccessReadDevice, boost::array<Elem, 2>,
      CompletionCondition, ReadHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_at_op(AsyncRandomAccessReadDevice& device,
        uint64_t offset, const boost::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_at_op(const read_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_at_op(read_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          boost::array<asio::mutable_buffer, 2> >::type bufs = {{
        asio::mutable_buffer(buffers_[0]),
        asio::mutable_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          device_.async_read_some_at(offset_ + total_transferred_,
              bufs, static_cast<read_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessReadDevice& device_;
    uint64_t offset_;
    boost::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };



  template <typename AsyncRandomAccessReadDevice, typename Elem,
      typename CompletionCondition, typename ReadHandler>
  class read_at_op<AsyncRandomAccessReadDevice, std::array<Elem, 2>,
      CompletionCondition, ReadHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_at_op(AsyncRandomAccessReadDevice& device,
        uint64_t offset, const std::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_at_op(const read_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_at_op(read_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          std::array<asio::mutable_buffer, 2> >::type bufs = {{
        asio::mutable_buffer(buffers_[0]),
        asio::mutable_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          device_.async_read_some_at(offset_ + total_transferred_,
              bufs, static_cast<read_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessReadDevice& device_;
    uint64_t offset_;
    std::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };



  template <typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename AsyncRandomAccessReadDevice,
      typename MutableBufferSequence, typename CompletionCondition,
      typename ReadHandler>
  inline read_at_op<AsyncRandomAccessReadDevice,
      MutableBufferSequence, CompletionCondition, ReadHandler>
  make_read_at_op(AsyncRandomAccessReadDevice& d,
      uint64_t offset, const MutableBufferSequence& buffers,
      CompletionCondition completion_condition, ReadHandler handler)
  {
    return read_at_op<AsyncRandomAccessReadDevice,
      MutableBufferSequence, CompletionCondition, ReadHandler>(
        d, offset, buffers, completion_condition, handler);
  }
}

template <typename AsyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename CompletionCondition, typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    CompletionCondition completion_condition,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
    CompletionCondition, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        d, offset, buffers, completion_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

template <typename AsyncRandomAccessReadDevice, typename MutableBufferSequence,
    typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d,
    uint64_t offset, const MutableBufferSequence& buffers,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_at_op<AsyncRandomAccessReadDevice, MutableBufferSequence,
    detail::transfer_all_t, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        d, offset, buffers, transfer_all(), init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}



namespace detail
{
  template <typename AsyncRandomAccessReadDevice, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  class read_at_streambuf_op
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    read_at_streambuf_op(AsyncRandomAccessReadDevice& device,
        uint64_t offset, basic_streambuf<Allocator>& streambuf,
        CompletionCondition completion_condition, ReadHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        streambuf_(streambuf),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_at_streambuf_op(const read_at_streambuf_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        streambuf_(other.streambuf_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    read_at_streambuf_op(read_at_streambuf_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        streambuf_(other.streambuf_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t max_size, bytes_available;
      switch (start_ = start)
      {
        case 1:
        max_size = this->check_for_completion(ec, total_transferred_);
        bytes_available = read_size_helper(streambuf_, max_size);
        for (;;)
        {
          device_.async_read_some_at(offset_ + total_transferred_,
              streambuf_.prepare(bytes_available),
              static_cast<read_at_streambuf_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          streambuf_.commit(bytes_transferred);
          max_size = this->check_for_completion(ec, total_transferred_);
          bytes_available = read_size_helper(streambuf_, max_size);
          if ((!ec && bytes_transferred == 0) || bytes_available == 0)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessReadDevice& device_;
    uint64_t offset_;
    asio::basic_streambuf<Allocator>& streambuf_;
    int start_;
    std::size_t total_transferred_;
    ReadHandler handler_;
  };

  template <typename AsyncRandomAccessReadDevice, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncRandomAccessReadDevice, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncRandomAccessReadDevice, typename Allocator,
      typename CompletionCondition, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncRandomAccessReadDevice,
      typename Allocator, typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncRandomAccessReadDevice,
      typename Allocator, typename CompletionCondition, typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
        CompletionCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncRandomAccessReadDevice, typename Allocator,
    typename CompletionCondition, typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
    CompletionCondition, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        d, offset, b, completion_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

template <typename AsyncRandomAccessReadDevice, typename Allocator,
    typename ReadHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_at(AsyncRandomAccessReadDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_at_streambuf_op<AsyncRandomAccessReadDevice, Allocator,
    detail::transfer_all_t, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        d, offset, b, transfer_all(), init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 809 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_at.hpp" 2
# 663 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_at.hpp" 2
# 90 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_streambuf.hpp" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/regex_fwd.hpp" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp" 2

namespace asio {

namespace detail
{
  char (&has_result_type_helper(...))[2];

  template <typename T>
  char has_result_type_helper(T*, typename T::result_type* = 0);

  template <typename T>
  struct has_result_type
  {
    enum { value = (sizeof((has_result_type_helper)((T*)(0))) == 1) };
  };
}



template <typename T>
struct is_match_condition
{




  enum
  {
    value = asio::is_function<
        typename asio::remove_pointer<T>::type>::value
      || detail::has_result_type<T>::value
  };

};
# 122 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename SyncReadStream, typename Allocator>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, char delim);
# 156 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename SyncReadStream, typename Allocator>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, char delim,
    asio::error_code& ec);
# 209 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename SyncReadStream, typename Allocator>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, const std::string& delim);
# 243 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename SyncReadStream, typename Allocator>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, const std::string& delim,
    asio::error_code& ec);
# 445 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename SyncReadStream, typename Allocator, typename MatchCondition>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, MatchCondition match_condition,
    typename enable_if<is_match_condition<MatchCondition>::value>::type* = 0);
# 500 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename SyncReadStream, typename Allocator, typename MatchCondition>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    MatchCondition match_condition, asio::error_code& ec,
    typename enable_if<is_match_condition<MatchCondition>::value>::type* = 0);
# 594 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_until(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    char delim, ReadHandler&& handler);
# 679 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_until(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, const std::string& delim,
    ReadHandler&& handler);
# 904 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp"
template <typename AsyncReadStream, typename Allocator,
    typename MatchCondition, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_until(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    MatchCondition match_condition, ReadHandler&& handler,
    typename enable_if<is_match_condition<MatchCondition>::value>::type* = 0);



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 918 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp"
# 1 "/usr/include/c++/15/utility" 1 3
# 70 "/usr/include/c++/15/utility" 3
# 1 "/usr/include/c++/15/bits/stl_relops.h" 1 3
# 62 "/usr/include/c++/15/bits/stl_relops.h" 3

# 62 "/usr/include/c++/15/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 86 "/usr/include/c++/15/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/usr/include/c++/15/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/usr/include/c++/15/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/usr/include/c++/15/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 71 "/usr/include/c++/15/utility" 2 3
# 103 "/usr/include/c++/15/utility" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 104 "/usr/include/c++/15/utility" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
      is_nothrow_assignable<_Tp&, _Up>>::value)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
# 237 "/usr/include/c++/15/utility" 3

}
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/buffers_iterator.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp" 2
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 33 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp" 2


# 34 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp"
namespace asio {

template <typename SyncReadStream, typename Allocator>
inline std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, char delim)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_until(s, b, delim, ec);
  asio::detail::throw_error(ec, "read_until");
  return bytes_transferred;
}

template <typename SyncReadStream, typename Allocator>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, char delim,
    asio::error_code& ec)
{
  std::size_t search_position = 0;
  for (;;)
  {

    typedef typename asio::basic_streambuf<
      Allocator>::const_buffers_type const_buffers_type;
    typedef asio::buffers_iterator<const_buffers_type> iterator;
    const_buffers_type buffers = b.data();
    iterator begin = iterator::begin(buffers);
    iterator start_pos = begin + search_position;
    iterator end = iterator::end(buffers);


    iterator iter = std::find(start_pos, end, delim);
    if (iter != end)
    {

      ec = asio::error_code();
      return iter - begin + 1;
    }
    else
    {

      search_position = end - begin;
    }


    if (b.size() == b.max_size())
    {
      ec = error::not_found;
      return 0;
    }


    std::size_t bytes_to_read = read_size_helper(b, 65536);
    b.commit(s.read_some(b.prepare(bytes_to_read), ec));
    if (ec)
      return 0;
  }
}

template <typename SyncReadStream, typename Allocator>
inline std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, const std::string& delim)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_until(s, b, delim, ec);
  asio::detail::throw_error(ec, "read_until");
  return bytes_transferred;
}

namespace detail
{






  template <typename Iterator1, typename Iterator2>
  std::pair<Iterator1, bool> partial_search(
      Iterator1 first1, Iterator1 last1, Iterator2 first2, Iterator2 last2)
  {
    for (Iterator1 iter1 = first1; iter1 != last1; ++iter1)
    {
      Iterator1 test_iter1 = iter1;
      Iterator2 test_iter2 = first2;
      for (;; ++test_iter1, ++test_iter2)
      {
        if (test_iter2 == last2)
          return std::make_pair(iter1, true);
        if (test_iter1 == last1)
        {
          if (test_iter2 != first2)
            return std::make_pair(iter1, false);
          else
            break;
        }
        if (*test_iter1 != *test_iter2)
          break;
      }
    }
    return std::make_pair(last1, false);
  }
}

template <typename SyncReadStream, typename Allocator>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, const std::string& delim,
    asio::error_code& ec)
{
  std::size_t search_position = 0;
  for (;;)
  {

    typedef typename asio::basic_streambuf<
      Allocator>::const_buffers_type const_buffers_type;
    typedef asio::buffers_iterator<const_buffers_type> iterator;
    const_buffers_type buffers = b.data();
    iterator begin = iterator::begin(buffers);
    iterator start_pos = begin + search_position;
    iterator end = iterator::end(buffers);


    std::pair<iterator, bool> result = detail::partial_search(
        start_pos, end, delim.begin(), delim.end());
    if (result.first != end)
    {
      if (result.second)
      {

        ec = asio::error_code();
        return result.first - begin + delim.length();
      }
      else
      {

        search_position = result.first - begin;
      }
    }
    else
    {

      search_position = end - begin;
    }


    if (b.size() == b.max_size())
    {
      ec = error::not_found;
      return 0;
    }


    std::size_t bytes_to_read = read_size_helper(b, 65536);
    b.commit(s.read_some(b.prepare(bytes_to_read), ec));
    if (ec)
      return 0;
  }
}
# 263 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp"
template <typename SyncReadStream, typename Allocator, typename MatchCondition>
std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    MatchCondition match_condition, asio::error_code& ec,
    typename enable_if<is_match_condition<MatchCondition>::value>::type*)
{
  std::size_t search_position = 0;
  for (;;)
  {

    typedef typename asio::basic_streambuf<
      Allocator>::const_buffers_type const_buffers_type;
    typedef asio::buffers_iterator<const_buffers_type> iterator;
    const_buffers_type buffers = b.data();
    iterator begin = iterator::begin(buffers);
    iterator start_pos = begin + search_position;
    iterator end = iterator::end(buffers);


    std::pair<iterator, bool> result = match_condition(start_pos, end);
    if (result.second)
    {

      ec = asio::error_code();
      return result.first - begin;
    }
    else if (result.first != end)
    {

      search_position = result.first - begin;
    }
    else
    {

      search_position = end - begin;
    }


    if (b.size() == b.max_size())
    {
      ec = error::not_found;
      return 0;
    }


    std::size_t bytes_to_read = read_size_helper(b, 65536);
    b.commit(s.read_some(b.prepare(bytes_to_read), ec));
    if (ec)
      return 0;
  }
}

template <typename SyncReadStream, typename Allocator, typename MatchCondition>
inline std::size_t read_until(SyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, MatchCondition match_condition,
    typename enable_if<is_match_condition<MatchCondition>::value>::type*)
{
  asio::error_code ec;
  std::size_t bytes_transferred = read_until(s, b, match_condition, ec);
  asio::detail::throw_error(ec, "read_until");
  return bytes_transferred;
}

namespace detail
{
  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  class read_until_delim_op
  {
  public:
    read_until_delim_op(AsyncReadStream& stream,
        asio::basic_streambuf<Allocator>& streambuf,
        char delim, ReadHandler& handler)
      : stream_(stream),
        streambuf_(streambuf),
        delim_(delim),
        start_(0),
        search_position_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_until_delim_op(const read_until_delim_op& other)
      : stream_(other.stream_),
        streambuf_(other.streambuf_),
        delim_(other.delim_),
        start_(other.start_),
        search_position_(other.search_position_),
        handler_(other.handler_)
    {
    }

    read_until_delim_op(read_until_delim_op&& other)
      : stream_(other.stream_),
        streambuf_(other.streambuf_),
        delim_(other.delim_),
        start_(other.start_),
        search_position_(other.search_position_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      const std::size_t not_found = (std::numeric_limits<std::size_t>::max)();
      std::size_t bytes_to_read;
      switch (start_ = start)
      {
      case 1:
        for (;;)
        {
          {

            typedef typename asio::basic_streambuf<
              Allocator>::const_buffers_type const_buffers_type;
            typedef asio::buffers_iterator<const_buffers_type> iterator;
            const_buffers_type buffers = streambuf_.data();
            iterator begin = iterator::begin(buffers);
            iterator start_pos = begin + search_position_;
            iterator end = iterator::end(buffers);


            iterator iter = std::find(start_pos, end, delim_);
            if (iter != end)
            {

              search_position_ = iter - begin + 1;
              bytes_to_read = 0;
            }


            else if (streambuf_.size() == streambuf_.max_size())
            {
              search_position_ = not_found;
              bytes_to_read = 0;
            }


            else
            {

              search_position_ = end - begin;
              bytes_to_read = read_size_helper(streambuf_, 65536);
            }
          }


          if (!start && bytes_to_read == 0)
            break;


          stream_.async_read_some(streambuf_.prepare(bytes_to_read),
              static_cast<read_until_delim_op&&>(*this));
          return; default:
          streambuf_.commit(bytes_transferred);
          if (ec || bytes_transferred == 0)
            break;
        }

        const asio::error_code result_ec =
          (search_position_ == not_found)
          ? error::not_found : ec;

        const std::size_t result_n =
          (ec || search_position_ == not_found)
          ? 0 : search_position_;

        handler_(result_ec, result_n);
      }
    }


    AsyncReadStream& stream_;
    asio::basic_streambuf<Allocator>& streambuf_;
    char delim_;
    int start_;
    std::size_t search_position_;
    ReadHandler handler_;
  };

  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_until_delim_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_until_delim_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_until_delim_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream, typename Allocator,
      typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_until_delim_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream, typename Allocator,
      typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_until_delim_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_until(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, char delim,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_until_delim_op<AsyncReadStream,
    Allocator, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        s, b, delim, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

namespace detail
{
  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  class read_until_delim_string_op
  {
  public:
    read_until_delim_string_op(AsyncReadStream& stream,
        asio::basic_streambuf<Allocator>& streambuf,
        const std::string& delim, ReadHandler& handler)
      : stream_(stream),
        streambuf_(streambuf),
        delim_(delim),
        start_(0),
        search_position_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_until_delim_string_op(const read_until_delim_string_op& other)
      : stream_(other.stream_),
        streambuf_(other.streambuf_),
        delim_(other.delim_),
        start_(other.start_),
        search_position_(other.search_position_),
        handler_(other.handler_)
    {
    }

    read_until_delim_string_op(read_until_delim_string_op&& other)
      : stream_(other.stream_),
        streambuf_(other.streambuf_),
        delim_(static_cast<std::string&&>(other.delim_)),
        start_(other.start_),
        search_position_(other.search_position_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      const std::size_t not_found = (std::numeric_limits<std::size_t>::max)();
      std::size_t bytes_to_read;
      switch (start_ = start)
      {
      case 1:
        for (;;)
        {
          {

            typedef typename asio::basic_streambuf<
              Allocator>::const_buffers_type const_buffers_type;
            typedef asio::buffers_iterator<const_buffers_type> iterator;
            const_buffers_type buffers = streambuf_.data();
            iterator begin = iterator::begin(buffers);
            iterator start_pos = begin + search_position_;
            iterator end = iterator::end(buffers);


            std::pair<iterator, bool> result = detail::partial_search(
                start_pos, end, delim_.begin(), delim_.end());
            if (result.first != end && result.second)
            {

              search_position_ = result.first - begin + delim_.length();
              bytes_to_read = 0;
            }


            else if (streambuf_.size() == streambuf_.max_size())
            {
              search_position_ = not_found;
              bytes_to_read = 0;
            }


            else
            {
              if (result.first != end)
              {


                search_position_ = result.first - begin;
              }
              else
              {

                search_position_ = end - begin;
              }

              bytes_to_read = read_size_helper(streambuf_, 65536);
            }
          }


          if (!start && bytes_to_read == 0)
            break;


          stream_.async_read_some(streambuf_.prepare(bytes_to_read),
              static_cast<read_until_delim_string_op&&>(*this));
          return; default:
          streambuf_.commit(bytes_transferred);
          if (ec || bytes_transferred == 0)
            break;
        }

        const asio::error_code result_ec =
          (search_position_ == not_found)
          ? error::not_found : ec;

        const std::size_t result_n =
          (ec || search_position_ == not_found)
          ? 0 : search_position_;

        handler_(result_ec, result_n);
      }
    }


    AsyncReadStream& stream_;
    asio::basic_streambuf<Allocator>& streambuf_;
    std::string delim_;
    int start_;
    std::size_t search_position_;
    ReadHandler handler_;
  };

  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_until_delim_string_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_until_delim_string_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_until_delim_string_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream,
      typename Allocator, typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_until_delim_string_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream,
      typename Allocator, typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_until_delim_string_op<AsyncReadStream,
        Allocator, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncReadStream, typename Allocator, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_until(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b, const std::string& delim,
    ReadHandler&& handler)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_until_delim_string_op<AsyncReadStream,
    Allocator, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        s, b, delim, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}
# 935 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp"
namespace detail
{
  template <typename AsyncReadStream, typename Allocator,
      typename MatchCondition, typename ReadHandler>
  class read_until_match_op
  {
  public:
    read_until_match_op(AsyncReadStream& stream,
        asio::basic_streambuf<Allocator>& streambuf,
        MatchCondition match_condition, ReadHandler& handler)
      : stream_(stream),
        streambuf_(streambuf),
        match_condition_(match_condition),
        start_(0),
        search_position_(0),
        handler_(static_cast<ReadHandler&&>(handler))
    {
    }


    read_until_match_op(const read_until_match_op& other)
      : stream_(other.stream_),
        streambuf_(other.streambuf_),
        match_condition_(other.match_condition_),
        start_(other.start_),
        search_position_(other.search_position_),
        handler_(other.handler_)
    {
    }

    read_until_match_op(read_until_match_op&& other)
      : stream_(other.stream_),
        streambuf_(other.streambuf_),
        match_condition_(other.match_condition_),
        start_(other.start_),
        search_position_(other.search_position_),
        handler_(static_cast<ReadHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      const std::size_t not_found = (std::numeric_limits<std::size_t>::max)();
      std::size_t bytes_to_read;
      switch (start_ = start)
      {
      case 1:
        for (;;)
        {
          {

            typedef typename asio::basic_streambuf<
              Allocator>::const_buffers_type const_buffers_type;
            typedef asio::buffers_iterator<const_buffers_type> iterator;
            const_buffers_type buffers = streambuf_.data();
            iterator begin = iterator::begin(buffers);
            iterator start_pos = begin + search_position_;
            iterator end = iterator::end(buffers);


            std::pair<iterator, bool> result = match_condition_(start_pos, end);
            if (result.second)
            {

              search_position_ = result.first - begin;
              bytes_to_read = 0;
            }


            else if (streambuf_.size() == streambuf_.max_size())
            {
              search_position_ = not_found;
              bytes_to_read = 0;
            }


            else
            {
              if (result.first != end)
              {


                search_position_ = result.first - begin;
              }
              else
              {

                search_position_ = end - begin;
              }

              bytes_to_read = read_size_helper(streambuf_, 65536);
            }
          }


          if (!start && bytes_to_read == 0)
            break;


          stream_.async_read_some(streambuf_.prepare(bytes_to_read),
              static_cast<read_until_match_op&&>(*this));
          return; default:
          streambuf_.commit(bytes_transferred);
          if (ec || bytes_transferred == 0)
            break;
        }

        const asio::error_code result_ec =
          (search_position_ == not_found)
          ? error::not_found : ec;

        const std::size_t result_n =
          (ec || search_position_ == not_found)
          ? 0 : search_position_;

        handler_(result_ec, result_n);
      }
    }


    AsyncReadStream& stream_;
    asio::basic_streambuf<Allocator>& streambuf_;
    MatchCondition match_condition_;
    int start_;
    std::size_t search_position_;
    ReadHandler handler_;
  };

  template <typename AsyncReadStream, typename Allocator,
      typename MatchCondition, typename ReadHandler>
  inline void* asio_handler_allocate(std::size_t size,
      read_until_match_op<AsyncReadStream,
        Allocator, MatchCondition, ReadHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator,
      typename MatchCondition, typename ReadHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      read_until_match_op<AsyncReadStream,
        Allocator, MatchCondition, ReadHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncReadStream, typename Allocator,
      typename MatchCondition, typename ReadHandler>
  inline bool asio_handler_is_continuation(
      read_until_match_op<AsyncReadStream,
        Allocator, MatchCondition, ReadHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream, typename Allocator,
      typename MatchCondition, typename ReadHandler>
  inline void asio_handler_invoke(Function& function,
      read_until_match_op<AsyncReadStream,
        Allocator, MatchCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncReadStream, typename Allocator,
      typename MatchCondition, typename ReadHandler>
  inline void asio_handler_invoke(const Function& function,
      read_until_match_op<AsyncReadStream,
        Allocator, MatchCondition, ReadHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }
}

template <typename AsyncReadStream, typename Allocator,
    typename MatchCondition, typename ReadHandler>
typename ::asio::async_result< typename ::asio::handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type>::type

async_read_until(AsyncReadStream& s,
    asio::basic_streambuf<Allocator>& b,
    MatchCondition match_condition, ReadHandler&& handler,
    typename enable_if<is_match_condition<MatchCondition>::value>::type*)
{


  typedef typename handler_type<ReadHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "ReadHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    ReadHandler, void (asio::error_code, std::size_t)> init(
      static_cast<ReadHandler&&>(handler));

  detail::read_until_match_op<AsyncReadStream, Allocator,
    MatchCondition, typename handler_type<ReadHandler, void (asio::error_code, std::size_t)>::type
                                           >(
        s, b, match_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 1146 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/read_until.hpp" 2
# 920 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/read_until.hpp" 2
# 91 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/seq_packet_socket_service.hpp" 1
# 92 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_serial_port.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port.hpp" 2

namespace asio {


typedef basic_serial_port<> serial_port;

}
# 93 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_base.hpp" 1
# 94 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/serial_port_service.hpp" 1
# 95 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set.hpp" 1
# 19 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/basic_signal_set.hpp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set.hpp" 2

namespace asio {


typedef basic_signal_set<> signal_set;

}
# 96 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/signal_set_service.hpp" 1
# 97 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_acceptor_service.hpp" 1
# 98 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/socket_base.hpp" 1
# 99 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp" 2

namespace asio {
namespace detail {


class strand_service
  : public asio::detail::service_base<strand_service>
{
private:

  struct on_do_complete_exit;


  struct on_dispatch_exit;

public:


  class strand_impl
    : public operation
  {
  public:
    strand_impl();

  private:

    friend class strand_service;
    friend struct on_do_complete_exit;
    friend struct on_dispatch_exit;


    asio::detail::mutex mutex_;




    bool locked_;




    op_queue<operation> waiting_queue_;




    op_queue<operation> ready_queue_;
  };

  typedef strand_impl* implementation_type;


  inline explicit strand_service(asio::io_service& io_service);


  inline void shutdown_service();


  inline void construct(implementation_type& impl);


  template <typename Handler>
  void dispatch(implementation_type& impl, Handler& handler);


  template <typename Handler>
  void post(implementation_type& impl, Handler& handler);


  inline bool running_in_this_thread(
      const implementation_type& impl) const;

private:


  inline bool do_dispatch(implementation_type& impl, operation* op);


  inline void do_post(implementation_type& impl,
      operation* op, bool is_continuation);

  inline static void do_complete(io_service_impl* owner,
      operation* base, const asio::error_code& ec,
      std::size_t bytes_transferred);


  io_service_impl& io_service_;


  asio::detail::mutex mutex_;





  enum { num_implementations = 193 };



  scoped_ptr<strand_impl> implementations_[num_implementations];



  std::size_t salt_;
};

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 136 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.hpp" 2

namespace asio {
namespace detail {

inline strand_service::strand_impl::strand_impl()
  : operation(&strand_service::do_complete),
    locked_(false)
{
}

struct strand_service::on_dispatch_exit
{
  io_service_impl* io_service_;
  strand_impl* impl_;

  ~on_dispatch_exit()
  {
    impl_->mutex_.lock();
    impl_->ready_queue_.push(impl_->waiting_queue_);
    bool more_handlers = impl_->locked_ = !impl_->ready_queue_.empty();
    impl_->mutex_.unlock();

    if (more_handlers)
      io_service_->post_immediate_completion(impl_, false);
  }
};

template <typename Handler>
void strand_service::dispatch(strand_service::implementation_type& impl,
    Handler& handler)
{

  if (call_stack<strand_impl>::contains(impl))
  {
    fenced_block b(fenced_block::full);
    asio_handler_invoke_helpers::invoke(handler, handler);
    return;
  }


  typedef completion_handler<Handler> op;
  typename op::ptr p = { asio::detail::addressof(handler),
    asio_handler_alloc_helpers::allocate(
      sizeof(op), handler), 0 };
  p.p = new (p.v) op(handler);

  (void)0;

  bool dispatch_immediately = do_dispatch(impl, p.p);
  operation* o = p.p;
  p.v = p.p = 0;

  if (dispatch_immediately)
  {

    call_stack<strand_impl>::context ctx(impl);


    on_dispatch_exit on_exit = { &io_service_, impl };
    (void)on_exit;

    completion_handler<Handler>::do_complete(
        &io_service_, o, asio::error_code(), 0);
  }
}


template <typename Handler>
void strand_service::post(strand_service::implementation_type& impl,
    Handler& handler)
{
  bool is_continuation =
    asio_handler_cont_helpers::is_continuation(handler);


  typedef completion_handler<Handler> op;
  typename op::ptr p = { asio::detail::addressof(handler),
    asio_handler_alloc_helpers::allocate(
      sizeof(op), handler), 0 };
  p.p = new (p.v) op(handler);

  (void)0;

  do_post(impl, p.p, is_continuation);
  p.v = p.p = 0;
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.hpp" 2
# 138 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.ipp" 1
# 20 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.ipp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp" 1
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.ipp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.ipp" 2

namespace asio {
namespace detail {

struct strand_service::on_do_complete_exit
{
  io_service_impl* owner_;
  strand_impl* impl_;

  ~on_do_complete_exit()
  {
    impl_->mutex_.lock();
    impl_->ready_queue_.push(impl_->waiting_queue_);
    bool more_handlers = impl_->locked_ = !impl_->ready_queue_.empty();
    impl_->mutex_.unlock();

    if (more_handlers)
      owner_->post_immediate_completion(impl_, true);
  }
};

strand_service::strand_service(asio::io_service& io_service)
  : asio::detail::service_base<strand_service>(io_service),
    io_service_(asio::use_service<io_service_impl>(io_service)),
    mutex_(),
    salt_(0)
{
}

void strand_service::shutdown_service()
{
  op_queue<operation> ops;

  asio::detail::mutex::scoped_lock lock(mutex_);

  for (std::size_t i = 0; i < num_implementations; ++i)
  {
    if (strand_impl* impl = implementations_[i].get())
    {
      ops.push(impl->waiting_queue_);
      ops.push(impl->ready_queue_);
    }
  }
}

void strand_service::construct(strand_service::implementation_type& impl)
{
  asio::detail::mutex::scoped_lock lock(mutex_);

  std::size_t salt = salt_++;



  std::size_t index = reinterpret_cast<std::size_t>(&impl);
  index += (reinterpret_cast<std::size_t>(&impl) >> 3);
  index ^= salt + 0x9e3779b9 + (index << 6) + (index >> 2);

  index = index % num_implementations;

  if (!implementations_[index].get())
    implementations_[index].reset(new strand_impl);
  impl = implementations_[index].get();
}

bool strand_service::running_in_this_thread(
    const implementation_type& impl) const
{
  return call_stack<strand_impl>::contains(impl) != 0;
}

bool strand_service::do_dispatch(implementation_type& impl, operation* op)
{


  bool can_dispatch = io_service_.can_dispatch();
  impl->mutex_.lock();
  if (can_dispatch && !impl->locked_)
  {

    impl->locked_ = true;
    impl->mutex_.unlock();
    return true;
  }

  if (impl->locked_)
  {

    impl->waiting_queue_.push(op);
    impl->mutex_.unlock();
  }
  else
  {


    impl->locked_ = true;
    impl->mutex_.unlock();
    impl->ready_queue_.push(op);
    io_service_.post_immediate_completion(impl, false);
  }

  return false;
}

void strand_service::do_post(implementation_type& impl,
    operation* op, bool is_continuation)
{
  impl->mutex_.lock();
  if (impl->locked_)
  {

    impl->waiting_queue_.push(op);
    impl->mutex_.unlock();
  }
  else
  {


    impl->locked_ = true;
    impl->mutex_.unlock();
    impl->ready_queue_.push(op);
    io_service_.post_immediate_completion(impl, is_continuation);
  }
}

void strand_service::do_complete(io_service_impl* owner, operation* base,
    const asio::error_code& ec, std::size_t )
{
  if (owner)
  {
    strand_impl* impl = static_cast<strand_impl*>(base);


    call_stack<strand_impl>::context ctx(impl);


    on_do_complete_exit on_exit = { owner, impl };
    (void)on_exit;



    while (operation* o = impl->ready_queue_.front())
    {
      impl->ready_queue_.pop();
      o->complete(*owner, ec, 0);
    }
  }
}

}
}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 175 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/impl/strand_service.ipp" 2
# 140 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/strand_service.hpp" 2
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp" 2

namespace asio {
# 85 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
class io_service::strand
{
public:







  explicit strand(asio::io_service& io_service)
    : service_(asio::use_service<
        asio::detail::strand_service>(io_service))
  {
    service_.construct(impl_);
  }
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
  ~strand()
  {
  }
# 121 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
  asio::io_service& get_io_service()
  {
    return service_.get_io_service();
  }
# 145 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
  template <typename CompletionHandler>
  typename ::asio::async_result< typename ::asio::handler_type<CompletionHandler, void ()>::type>::type
  dispatch(CompletionHandler&& handler)
  {


    typedef typename handler_type<CompletionHandler, void()>::type asio_true_handler_type; static_assert(sizeof(asio::detail::zero_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), 0)) == 1, "CompletionHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()(), char(0))> __attribute__((__unused__)) type_check;

    detail::async_result_init<
      CompletionHandler, void ()> init(
        static_cast<CompletionHandler&&>(handler));

    service_.dispatch(impl_, init.handler);

    return init.result.get();
  }
# 178 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
  template <typename CompletionHandler>
  typename ::asio::async_result< typename ::asio::handler_type<CompletionHandler, void ()>::type>::type
  post(CompletionHandler&& handler)
  {


    typedef typename handler_type<CompletionHandler, void()>::type asio_true_handler_type; static_assert(sizeof(asio::detail::zero_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), 0)) == 1, "CompletionHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()(), char(0))> __attribute__((__unused__)) type_check;

    detail::async_result_init<
      CompletionHandler, void ()> init(
        static_cast<CompletionHandler&&>(handler));

    service_.post(impl_, init.handler);

    return init.result.get();
  }
# 216 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp"
  template <typename Handler>



  detail::wrapped_handler<strand, Handler, detail::is_continuation_if_running>

  wrap(Handler handler)
  {
    return detail::wrapped_handler<io_service::strand, Handler,
        detail::is_continuation_if_running>(*this, handler);
  }







  bool running_in_this_thread() const
  {
    return service_.running_in_this_thread(impl_);
  }

private:
  asio::detail::strand_service& service_;
  asio::detail::strand_service::implementation_type impl_;
};



typedef asio::io_service::strand strand;

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 251 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/strand.hpp" 2
# 100 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/stream_socket_service.hpp" 1
# 101 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/streambuf.hpp" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/streambuf.hpp"
namespace asio {


typedef basic_streambuf<> streambuf;

}
# 102 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/system_error.hpp" 1
# 103 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp" 1
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp" 2

namespace asio {
# 48 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp"
class thread
  : private noncopyable
{
public:
# 60 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp"
  template <typename Function>
  explicit thread(Function f)
    : impl_(f)
  {
  }


  ~thread()
  {
  }
# 79 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp"
  void join()
  {
    impl_.join();
  }

private:
  detail::thread impl_;
};

}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 91 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/thread.hpp" 2
# 104 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/time_traits.hpp" 1
# 105 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/version.hpp" 1
# 106 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/wait_traits.hpp" 1
# 107 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/waitable_timer_service.hpp" 1
# 108 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/basic_handle.hpp" 1
# 109 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/basic_object_handle.hpp" 1
# 110 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/basic_random_access_handle.hpp" 1
# 111 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/basic_stream_handle.hpp" 1
# 112 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/object_handle.hpp" 1
# 113 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/object_handle_service.hpp" 1
# 114 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/overlapped_ptr.hpp" 1
# 115 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/random_access_handle.hpp" 1
# 116 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/random_access_handle_service.hpp" 1
# 117 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/stream_handle.hpp" 1
# 118 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/windows/stream_handle_service.hpp" 1
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write.hpp" 1
# 120 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp" 2

namespace asio {
# 75 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers);
# 119 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    asio::error_code& ec);
# 173 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename CompletionCondition>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition);
# 221 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename CompletionCondition>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec);
# 258 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename Allocator>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b);
# 291 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename Allocator>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, basic_streambuf<Allocator>& b,
    asio::error_code& ec);
# 334 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename Allocator,
    typename CompletionCondition>
std::size_t write_at(SyncRandomAccessWriteDevice& d, uint64_t offset,
    basic_streambuf<Allocator>& b, CompletionCondition completion_condition);
# 378 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename SyncRandomAccessWriteDevice, typename Allocator,
    typename CompletionCondition>
std::size_t write_at(SyncRandomAccessWriteDevice& d, uint64_t offset,
    basic_streambuf<Allocator>& b, CompletionCondition completion_condition,
    asio::error_code& ec);
# 451 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d, uint64_t offset,
    const ConstBufferSequence& buffers,
    WriteHandler&& handler);
# 530 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename CompletionCondition, typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition,
    WriteHandler&& handler);
# 586 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename AsyncRandomAccessWriteDevice, typename Allocator,
    typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d, uint64_t offset,
    basic_streambuf<Allocator>& b, WriteHandler&& handler);
# 652 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp"
template <typename AsyncRandomAccessWriteDevice, typename Allocator,
    typename CompletionCondition, typename WriteHandler>
typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d, uint64_t offset,
    basic_streambuf<Allocator>& b, CompletionCondition completion_condition,
    WriteHandler&& handler);





}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 667 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write_at.hpp" 1
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write_at.hpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp" 1
# 71 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/push_options.hpp"
#pragma GCC visibility push (default)
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write_at.hpp" 2

namespace asio {

template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename CompletionCondition>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  ec = asio::error_code();
  asio::detail::consuming_buffers<
    const_buffer, ConstBufferSequence> tmp(buffers);
  std::size_t total_transferred = 0;
  tmp.prepare(detail::adapt_completion_condition_result(
        completion_condition(ec, total_transferred)));
  while (tmp.begin() != tmp.end())
  {
    std::size_t bytes_transferred = d.write_some_at(
        offset + total_transferred, tmp, ec);
    tmp.consume(bytes_transferred);
    total_transferred += bytes_transferred;
    tmp.prepare(detail::adapt_completion_condition_result(
          completion_condition(ec, total_transferred)));
  }
  return total_transferred;
}

template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence>
inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write_at(
      d, offset, buffers, transfer_all(), ec);
  asio::detail::throw_error(ec, "write_at");
  return bytes_transferred;
}

template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence>
inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    asio::error_code& ec)
{
  return write_at(d, offset, buffers, transfer_all(), ec);
}

template <typename SyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename CompletionCondition>
inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write_at(
      d, offset, buffers, completion_condition, ec);
  asio::detail::throw_error(ec, "write_at");
  return bytes_transferred;
}



template <typename SyncRandomAccessWriteDevice, typename Allocator,
    typename CompletionCondition>
std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition, asio::error_code& ec)
{
  std::size_t bytes_transferred = write_at(
      d, offset, b.data(), completion_condition, ec);
  b.consume(bytes_transferred);
  return bytes_transferred;
}

template <typename SyncRandomAccessWriteDevice, typename Allocator>
inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write_at(d, offset, b, transfer_all(), ec);
  asio::detail::throw_error(ec, "write_at");
  return bytes_transferred;
}

template <typename SyncRandomAccessWriteDevice, typename Allocator>
inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    asio::error_code& ec)
{
  return write_at(d, offset, b, transfer_all(), ec);
}

template <typename SyncRandomAccessWriteDevice, typename Allocator,
    typename CompletionCondition>
inline std::size_t write_at(SyncRandomAccessWriteDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition)
{
  asio::error_code ec;
  std::size_t bytes_transferred = write_at(
      d, offset, b, completion_condition, ec);
  asio::detail::throw_error(ec, "write_at");
  return bytes_transferred;
}



namespace detail
{
  template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  class write_at_op
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_at_op(AsyncRandomAccessWriteDevice& device,
        uint64_t offset, const ConstBufferSequence& buffers,
        CompletionCondition completion_condition, WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_at_op(const write_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_at_op(write_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      switch (start_ = start)
      {
        case 1:
        buffers_.prepare(this->check_for_completion(ec, total_transferred_));
        for (;;)
        {
          device_.async_write_some_at(
              offset_ + total_transferred_, buffers_,
              static_cast<write_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          buffers_.consume(bytes_transferred);
          buffers_.prepare(this->check_for_completion(ec, total_transferred_));
          if ((!ec && bytes_transferred == 0)
              || buffers_.begin() == buffers_.end())
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessWriteDevice& device_;
    uint64_t offset_;
    asio::detail::consuming_buffers<
      const_buffer, ConstBufferSequence> buffers_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };

  template <typename AsyncRandomAccessWriteDevice,
      typename CompletionCondition, typename WriteHandler>
  class write_at_op<AsyncRandomAccessWriteDevice,
      asio::mutable_buffers_1, CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_at_op(AsyncRandomAccessWriteDevice& device,
        uint64_t offset, const asio::mutable_buffers_1& buffers,
        CompletionCondition completion_condition,
        WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffer_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_at_op(const write_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_at_op(write_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          device_.async_write_some_at(offset_ + total_transferred_,
              asio::buffer(buffer_ + total_transferred_, n),
              static_cast<write_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == asio::buffer_size(buffer_))
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessWriteDevice& device_;
    uint64_t offset_;
    asio::mutable_buffer buffer_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };

  template <typename AsyncRandomAccessWriteDevice,
      typename CompletionCondition, typename WriteHandler>
  class write_at_op<AsyncRandomAccessWriteDevice, asio::const_buffers_1,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_at_op(AsyncRandomAccessWriteDevice& device,
        uint64_t offset, const asio::const_buffers_1& buffers,
        CompletionCondition completion_condition,
        WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffer_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_at_op(const write_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_at_op(write_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffer_(other.buffer_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          device_.async_write_some_at(offset_ + total_transferred_,
              asio::buffer(buffer_ + total_transferred_, n),
              static_cast<write_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == asio::buffer_size(buffer_))
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessWriteDevice& device_;
    uint64_t offset_;
    asio::const_buffer buffer_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };

  template <typename AsyncRandomAccessWriteDevice, typename Elem,
      typename CompletionCondition, typename WriteHandler>
  class write_at_op<AsyncRandomAccessWriteDevice, boost::array<Elem, 2>,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_at_op(AsyncRandomAccessWriteDevice& device,
        uint64_t offset, const boost::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_at_op(const write_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_at_op(write_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          boost::array<asio::const_buffer, 2> >::type bufs = {{
        asio::const_buffer(buffers_[0]),
        asio::const_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          device_.async_write_some_at(offset_ + total_transferred_,
              bufs, static_cast<write_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessWriteDevice& device_;
    uint64_t offset_;
    boost::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };



  template <typename AsyncRandomAccessWriteDevice, typename Elem,
      typename CompletionCondition, typename WriteHandler>
  class write_at_op<AsyncRandomAccessWriteDevice, std::array<Elem, 2>,
      CompletionCondition, WriteHandler>
    : detail::base_from_completion_cond<CompletionCondition>
  {
  public:
    write_at_op(AsyncRandomAccessWriteDevice& device,
        uint64_t offset, const std::array<Elem, 2>& buffers,
        CompletionCondition completion_condition, WriteHandler& handler)
      : detail::base_from_completion_cond<
          CompletionCondition>(completion_condition),
        device_(device),
        offset_(offset),
        buffers_(buffers),
        start_(0),
        total_transferred_(0),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_at_op(const write_at_op& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(other.handler_)
    {
    }

    write_at_op(write_at_op&& other)
      : detail::base_from_completion_cond<CompletionCondition>(other),
        device_(other.device_),
        offset_(other.offset_),
        buffers_(other.buffers_),
        start_(other.start_),
        total_transferred_(other.total_transferred_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        std::size_t bytes_transferred, int start = 0)
    {
      typename asio::detail::dependent_type<Elem,
          std::array<asio::const_buffer, 2> >::type bufs = {{
        asio::const_buffer(buffers_[0]),
        asio::const_buffer(buffers_[1]) }};
      std::size_t buffer_size0 = asio::buffer_size(bufs[0]);
      std::size_t buffer_size1 = asio::buffer_size(bufs[1]);
      std::size_t n = 0;
      switch (start_ = start)
      {
        case 1:
        n = this->check_for_completion(ec, total_transferred_);
        for (;;)
        {
          bufs[0] = asio::buffer(bufs[0] + total_transferred_, n);
          bufs[1] = asio::buffer(
              bufs[1] + (total_transferred_ < buffer_size0
                ? 0 : total_transferred_ - buffer_size0),
              n - asio::buffer_size(bufs[0]));
          device_.async_write_some_at(offset_ + total_transferred_,
              bufs, static_cast<write_at_op&&>(*this));
          return; default:
          total_transferred_ += bytes_transferred;
          if ((!ec && bytes_transferred == 0)
              || (n = this->check_for_completion(ec, total_transferred_)) == 0
              || total_transferred_ == buffer_size0 + buffer_size1)
            break;
        }

        handler_(ec, static_cast<const std::size_t&>(total_transferred_));
      }
    }


    AsyncRandomAccessWriteDevice& device_;
    uint64_t offset_;
    std::array<Elem, 2> buffers_;
    int start_;
    std::size_t total_transferred_;
    WriteHandler handler_;
  };



  template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline void* asio_handler_allocate(std::size_t size,
      write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline bool asio_handler_is_continuation(
      write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    return this_handler->start_ == 0 ? true
      : asio_handler_cont_helpers::is_continuation(
          this_handler->handler_);
  }

  template <typename Function, typename AsyncRandomAccessWriteDevice,
      typename ConstBufferSequence, typename CompletionCondition,
      typename WriteHandler>
  inline void asio_handler_invoke(Function& function,
      write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename AsyncRandomAccessWriteDevice,
      typename ConstBufferSequence, typename CompletionCondition,
      typename WriteHandler>
  inline void asio_handler_invoke(const Function& function,
      write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
        CompletionCondition, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
      typename CompletionCondition, typename WriteHandler>
  inline write_at_op<AsyncRandomAccessWriteDevice,
      ConstBufferSequence, CompletionCondition, WriteHandler>
  make_write_at_op(AsyncRandomAccessWriteDevice& d,
      uint64_t offset, const ConstBufferSequence& buffers,
      CompletionCondition completion_condition, WriteHandler handler)
  {
    return write_at_op<AsyncRandomAccessWriteDevice,
      ConstBufferSequence, CompletionCondition, WriteHandler>(
        d, offset, buffers, completion_condition, handler);
  }
}

template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename CompletionCondition, typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    CompletionCondition completion_condition,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  detail::write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
    CompletionCondition, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        d, offset, buffers, completion_condition, init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}

template <typename AsyncRandomAccessWriteDevice, typename ConstBufferSequence,
    typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d,
    uint64_t offset, const ConstBufferSequence& buffers,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  detail::write_at_op<AsyncRandomAccessWriteDevice, ConstBufferSequence,
    detail::transfer_all_t, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        d, offset, buffers, transfer_all(), init.handler)(
          asio::error_code(), 0, 1);

  return init.result.get();
}



namespace detail
{
  template <typename Allocator, typename WriteHandler>
  class write_at_streambuf_op
  {
  public:
    write_at_streambuf_op(
        asio::basic_streambuf<Allocator>& streambuf,
        WriteHandler& handler)
      : streambuf_(streambuf),
        handler_(static_cast<WriteHandler&&>(handler))
    {
    }


    write_at_streambuf_op(const write_at_streambuf_op& other)
      : streambuf_(other.streambuf_),
        handler_(other.handler_)
    {
    }

    write_at_streambuf_op(write_at_streambuf_op&& other)
      : streambuf_(other.streambuf_),
        handler_(static_cast<WriteHandler&&>(other.handler_))
    {
    }


    void operator()(const asio::error_code& ec,
        const std::size_t bytes_transferred)
    {
      streambuf_.consume(bytes_transferred);
      handler_(ec, bytes_transferred);
    }


    asio::basic_streambuf<Allocator>& streambuf_;
    WriteHandler handler_;
  };

  template <typename Allocator, typename WriteHandler>
  inline void* asio_handler_allocate(std::size_t size,
      write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
  {
    return asio_handler_alloc_helpers::allocate(
        size, this_handler->handler_);
  }

  template <typename Allocator, typename WriteHandler>
  inline void asio_handler_deallocate(void* pointer, std::size_t size,
      write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
  {
    asio_handler_alloc_helpers::deallocate(
        pointer, size, this_handler->handler_);
  }

  template <typename Allocator, typename WriteHandler>
  inline bool asio_handler_is_continuation(
      write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
  {
    return asio_handler_cont_helpers::is_continuation(
        this_handler->handler_);
  }

  template <typename Function, typename Allocator, typename WriteHandler>
  inline void asio_handler_invoke(Function& function,
      write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Function, typename Allocator, typename WriteHandler>
  inline void asio_handler_invoke(const Function& function,
      write_at_streambuf_op<Allocator, WriteHandler>* this_handler)
  {
    asio_handler_invoke_helpers::invoke(
        function, this_handler->handler_);
  }

  template <typename Allocator, typename WriteHandler>
  inline write_at_streambuf_op<Allocator, WriteHandler>
  make_write_at_streambuf_op(
      asio::basic_streambuf<Allocator>& b, WriteHandler handler)
  {
    return write_at_streambuf_op<Allocator, WriteHandler>(b, handler);
  }
}

template <typename AsyncRandomAccessWriteDevice, typename Allocator,
    typename CompletionCondition, typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    CompletionCondition completion_condition,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  async_write_at(d, offset, b.data(), completion_condition,
    detail::write_at_streambuf_op<Allocator, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        b, init.handler));

  return init.result.get();
}

template <typename AsyncRandomAccessWriteDevice, typename Allocator,
    typename WriteHandler>
inline typename ::asio::async_result< typename ::asio::handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type>::type

async_write_at(AsyncRandomAccessWriteDevice& d,
    uint64_t offset, asio::basic_streambuf<Allocator>& b,
    WriteHandler&& handler)
{


  typedef typename handler_type<WriteHandler, void(asio::error_code, std::size_t)>::type asio_true_handler_type; static_assert(sizeof(asio::detail::two_arg_handler_test( asio::detail::clvref< asio_true_handler_type>(), static_cast<const asio::error_code*>(0), static_cast<const std::size_t*>(0))) == 1, "WriteHandler type requirements not met"); typedef asio::detail::handler_type_requirements< sizeof( asio::detail::argbyv( asio::detail::clvref< asio_true_handler_type>())) + sizeof( asio::detail::lvref< asio_true_handler_type>()( asio::detail::lvref<const asio::error_code>(), asio::detail::lvref<const std::size_t>()), char(0))> __attribute__((__unused__)) type_check;

  detail::async_result_init<
    WriteHandler, void (asio::error_code, std::size_t)> init(
      static_cast<WriteHandler&&>(handler));

  async_write_at(d, offset, b.data(), transfer_all(),
    detail::write_at_streambuf_op<Allocator, typename handler_type<WriteHandler, void (asio::error_code, std::size_t)>::type
                                                         >(
        b, init.handler));

  return init.result.get();
}



}

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp" 1
# 67 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/detail/pop_options.hpp"
#pragma GCC visibility pop
# 824 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/impl/write_at.hpp" 2
# 669 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio/write_at.hpp" 2
# 121 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/deps/asio/asio/include/asio.hpp" 2
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/IO.h" 2

namespace asiopal
{




class IO
{

public:

 virtual ~IO() {}

 asio::io_service service;

};

}
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/SteadyClock.h" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/SteadyClock.h"
namespace asiopal
{
# 76 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/SteadyClock.h"
typedef std::chrono::steady_clock steady_clock_t;



}
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h" 2

# 1 "/usr/include/c++/15/future" 1 3
# 42 "/usr/include/c++/15/future" 3
# 1 "/usr/include/c++/15/mutex" 1 3
# 49 "/usr/include/c++/15/mutex" 3
# 1 "/usr/include/c++/15/bits/std_mutex.h" 1 3
# 45 "/usr/include/c++/15/bits/std_mutex.h" 3

# 45 "/usr/include/c++/15/bits/std_mutex.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15/bits/std_mutex.h" 3
  class __mutex_base
  {
  protected:
    typedef __gthread_mutex_t __native_type;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, { __null, __null } } };

    constexpr __mutex_base() noexcept = default;
# 82 "/usr/include/c++/15/bits/std_mutex.h" 3
    __mutex_base(const __mutex_base&) = delete;
    __mutex_base& operator=(const __mutex_base&) = delete;
  };
# 98 "/usr/include/c++/15/bits/std_mutex.h" 3
  class mutex : private __mutex_base
  {
  public:
    typedef __native_type* native_handle_type;


    constexpr

    mutex() noexcept = default;
    ~mutex() = default;

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }
  };




  class __condvar
  {
    using timespec = __gthread_time_t;

  public:
    __condvar() noexcept
    {



    }

    ~__condvar()
    {
      int __e __attribute__((__unused__)) = __gthread_cond_destroy(&_M_cond);
      do { if (std::__is_constant_evaluated() && !bool(__e != 16)) std::__glibcxx_assert_fail(); } while (false);
    }

    __condvar(const __condvar&) = delete;
    __condvar& operator=(const __condvar&) = delete;

    __gthread_cond_t* native_handle() noexcept { return &_M_cond; }


    void
    wait(mutex& __m)
    {
      int __e __attribute__((__unused__))
 = __gthread_cond_wait(&_M_cond, __m.native_handle());
      do { if (std::__is_constant_evaluated() && !bool(__e == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

    void
    wait_until(mutex& __m, timespec& __abs_time)
    {
      __gthread_cond_timedwait(&_M_cond, __m.native_handle(), &__abs_time);
    }


    void
    wait_until(mutex& __m, clockid_t __clock, timespec& __abs_time)
    {
      pthread_cond_clockwait(&_M_cond, __m.native_handle(), __clock,
        &__abs_time);
    }


    void
    notify_one() noexcept
    {
      int __e __attribute__((__unused__)) = __gthread_cond_signal(&_M_cond);
      do { if (std::__is_constant_evaluated() && !bool(__e == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

    void
    notify_all() noexcept
    {
      int __e __attribute__((__unused__)) = __gthread_cond_broadcast(&_M_cond);
      do { if (std::__is_constant_evaluated() && !bool(__e == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

  protected:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, 0, 0, {0, 0}, 0, 0 } };



  };





  struct defer_lock_t { explicit defer_lock_t() = default; };


  struct try_to_lock_t { explicit try_to_lock_t() = default; };



  struct adopt_lock_t { explicit adopt_lock_t() = default; };


  constexpr defer_lock_t defer_lock { };


  constexpr try_to_lock_t try_to_lock { };


  constexpr adopt_lock_t adopt_lock { };
# 244 "/usr/include/c++/15/bits/std_mutex.h" 3
  template<typename _Mutex>
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      [[__nodiscard__]]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }

      [[__nodiscard__]]
      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { }

      ~lock_guard()
      { _M_device.unlock(); }

      lock_guard(const lock_guard&) = delete;
      lock_guard& operator=(const lock_guard&) = delete;

    private:
      mutex_type& _M_device;
    };



}
# 50 "/usr/include/c++/15/mutex" 2 3
# 1 "/usr/include/c++/15/bits/unique_lock.h" 1 3
# 46 "/usr/include/c++/15/bits/unique_lock.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15/bits/unique_lock.h" 3
  template<typename _Mutex>
    class unique_lock
    {
    public:
      typedef _Mutex mutex_type;

      unique_lock() noexcept
      : _M_device(0), _M_owns(false)
      { }

      [[__nodiscard__]]
      explicit unique_lock(mutex_type& __m)
      : _M_device(std::__addressof(__m)), _M_owns(false)
      {
 lock();
 _M_owns = true;
      }

      unique_lock(mutex_type& __m, defer_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(false)
      { }

      [[__nodiscard__]]
      unique_lock(mutex_type& __m, try_to_lock_t)
      : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
      { }

      [[__nodiscard__]]
      unique_lock(mutex_type& __m, adopt_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(true)
      {

      }

      template<typename _Clock, typename _Duration>
 [[__nodiscard__]]
 unique_lock(mutex_type& __m,
      const chrono::time_point<_Clock, _Duration>& __atime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_until(__atime))
 { }

      template<typename _Rep, typename _Period>
 [[__nodiscard__]]
 unique_lock(mutex_type& __m,
      const chrono::duration<_Rep, _Period>& __rtime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_for(__rtime))
 { }

      ~unique_lock()
      {
 if (_M_owns)
   unlock();
      }

      unique_lock(const unique_lock&) = delete;
      unique_lock& operator=(const unique_lock&) = delete;

      unique_lock(unique_lock&& __u) noexcept
      : _M_device(__u._M_device), _M_owns(__u._M_owns)
      {
 __u._M_device = 0;
 __u._M_owns = false;
      }

      unique_lock& operator=(unique_lock&& __u) noexcept
      {


 unique_lock(std::move(__u)).swap(*this);
 return *this;
      }

      void
      lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_device->lock();
     _M_owns = true;
   }
      }

      [[__nodiscard__]]
      bool
      try_lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_owns = _M_device->try_lock();
     return _M_owns;
   }
      }

      template<typename _Clock, typename _Duration>
 [[__nodiscard__]]
 bool
 try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_until(__atime);
       return _M_owns;
     }
 }

      template<typename _Rep, typename _Period>
 [[__nodiscard__]]
 bool
 try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_for(__rtime);
       return _M_owns;
     }
  }

      void
      unlock()
      {
 if (!_M_owns)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_device)
   {
     _M_device->unlock();
     _M_owns = false;
   }
      }

      void
      swap(unique_lock& __u) noexcept
      {
 std::swap(_M_device, __u._M_device);
 std::swap(_M_owns, __u._M_owns);
      }

      mutex_type*
      release() noexcept
      {
 mutex_type* __ret = _M_device;
 _M_device = 0;
 _M_owns = false;
 return __ret;
      }

      [[__nodiscard__]]
      bool
      owns_lock() const noexcept
      { return _M_owns; }

      explicit operator bool() const noexcept
      { return owns_lock(); }

      [[__nodiscard__]]
      mutex_type*
      mutex() const noexcept
      { return _M_device; }

    private:
      mutex_type* _M_device;
      bool _M_owns;
    };



  template<typename _Mutex>
    inline void
    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept
    { __x.swap(__y); }


}
# 51 "/usr/include/c++/15/mutex" 2 3
# 62 "/usr/include/c++/15/mutex" 3
# 1 "/usr/include/c++/15/bits/version.h" 1 3
# 63 "/usr/include/c++/15/mutex" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 77 "/usr/include/c++/15/mutex" 3
  class __recursive_mutex_base
  {
  protected:
    typedef __gthread_recursive_mutex_t __native_type;

    __recursive_mutex_base(const __recursive_mutex_base&) = delete;
    __recursive_mutex_base& operator=(const __recursive_mutex_base&) = delete;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { __null, __null } } };

    __recursive_mutex_base() = default;
# 101 "/usr/include/c++/15/mutex" 3
  };
# 113 "/usr/include/c++/15/mutex" 3
  class recursive_mutex : private __recursive_mutex_base
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_mutex() = default;
    ~recursive_mutex() = default;

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }
  };




  template<typename _Derived>
    class __timed_mutex_impl
    {
    protected:
      template<typename _Rep, typename _Period>
 bool
 _M_try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {

   using __clock = chrono::steady_clock;




   auto __rt = chrono::duration_cast<__clock::duration>(__rtime);
   if (ratio_greater<__clock::period, _Period>())
     ++__rt;
   return _M_try_lock_until(__clock::now() + __rt);
 }

      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<chrono::system_clock,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   return static_cast<_Derived*>(this)->_M_timedlock(__ts);
 }


      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<chrono::steady_clock,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   return static_cast<_Derived*>(this)->_M_clocklock(1,
           __ts);
 }


      template<typename _Clock, typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {






   auto __now = _Clock::now();
   do {
     auto __rtime = __atime - __now;
     if (_M_try_lock_for(__rtime))
       return true;
     __now = _Clock::now();
   } while (__atime > __now);
   return false;
 }
    };
# 242 "/usr/include/c++/15/mutex" 3
  class timed_mutex
  : private __mutex_base, public __timed_mutex_impl<timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    timed_mutex() = default;
    ~timed_mutex() = default;

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      [[__nodiscard__]]
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }

    private:
      friend class __timed_mutex_impl<timed_mutex>;

      bool
      _M_timedlock(const __gthread_time_t& __ts)
      { return !__gthread_mutex_timedlock(&_M_mutex, &__ts); }


      bool
      _M_clocklock(clockid_t __clockid, const __gthread_time_t& __ts)
      { return !pthread_mutex_clocklock(&_M_mutex, __clockid, &__ts); }

  };
# 319 "/usr/include/c++/15/mutex" 3
  class recursive_timed_mutex
  : private __recursive_mutex_base,
    public __timed_mutex_impl<recursive_timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_timed_mutex() = default;
    ~recursive_timed_mutex() = default;

    recursive_timed_mutex(const recursive_timed_mutex&) = delete;
    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      [[__nodiscard__]]
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }

    private:
      friend class __timed_mutex_impl<recursive_timed_mutex>;

      bool
      _M_timedlock(const __gthread_time_t& __ts)
      { return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts); }


      bool
      _M_clocklock(clockid_t __clockid, const __gthread_time_t& __ts)
      { return !pthread_mutex_clocklock(&_M_mutex, __clockid, &__ts); }

  };
# 566 "/usr/include/c++/15/mutex" 3
  namespace __detail
  {

    template<typename _Lockable>
      inline int
      __try_lock_impl(_Lockable& __l)
      {
 if (unique_lock<_Lockable> __lock{__l, try_to_lock})
   {
     __lock.release();
     return -1;
   }
 else
   return 0;
      }



    template<typename _L0, typename... _Lockables>
      inline int
      __try_lock_impl(_L0& __l0, _Lockables&... __lockables)
      {
# 611 "/usr/include/c++/15/mutex" 3
 if (unique_lock<_L0> __lock{__l0, try_to_lock})
   {
     int __idx = __detail::__try_lock_impl(__lockables...);
     if (__idx == -1)
       {
  __lock.release();
  return -1;
       }
     return __idx + 1;
   }
 else
   return 0;
      }

  }
# 638 "/usr/include/c++/15/mutex" 3
  template<typename _L1, typename _L2, typename... _L3>
    [[__nodiscard__]]
    inline int
    try_lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {
      return __detail::__try_lock_impl(__l1, __l2, __l3...);
    }


  namespace __detail
  {





    template<typename _L0, typename... _L1>
      void
      __lock_impl(int& __i, int __depth, _L0& __l0, _L1&... __l1)
      {
 while (__i >= __depth)
   {
     if (__i == __depth)
       {
  int __failed = 1;
  {
    unique_lock<_L0> __first(__l0);
    __failed += __detail::__try_lock_impl(__l1...);
    if (!__failed)
      {
        __i = -1;
        __first.release();
        return;
      }
  }

  __gthread_yield();

  constexpr auto __n = 1 + sizeof...(_L1);
  __i = (__depth + __failed) % __n;
       }
     else
       __detail::__lock_impl(__i, __depth + 1, __l1..., __l0);
   }
      }

  }
# 698 "/usr/include/c++/15/mutex" 3
  template<typename _L1, typename _L2, typename... _L3>
    void
    lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {
# 730 "/usr/include/c++/15/mutex" 3
 {
   int __i = 0;
   __detail::__lock_impl(__i, 0, __l1, __l2, __l3...);
 }
    }
# 809 "/usr/include/c++/15/mutex" 3
  struct once_flag
  {
    constexpr once_flag() noexcept = default;


    once_flag(const once_flag&) = delete;

    once_flag& operator=(const once_flag&) = delete;

  private:


    __gthread_once_t _M_once = 0;

    struct _Prepare_execution;

    template<typename _Callable, typename... _Args>
      friend void
      call_once(once_flag& __once, _Callable&& __f, _Args&&... __args);
  };





  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();


  struct once_flag::_Prepare_execution
  {
    template<typename _Callable>
      explicit
      _Prepare_execution(_Callable& __c)
      {

 __once_callable = std::__addressof(__c);

 __once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
      }

    ~_Prepare_execution()
    {

      __once_callable = nullptr;
      __once_call = nullptr;
    }

    _Prepare_execution(const _Prepare_execution&) = delete;
    _Prepare_execution& operator=(const _Prepare_execution&) = delete;
  };
# 902 "/usr/include/c++/15/mutex" 3
  extern "C" void __once_proxy(void);


  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {

      auto __callable = [&] {
   std::__invoke(std::forward<_Callable>(__f),
   std::forward<_Args>(__args)...);
      };

      once_flag::_Prepare_execution __exec(__callable);


      if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
 __throw_system_error(__e);
    }
# 1023 "/usr/include/c++/15/mutex" 3

}
# 43 "/usr/include/c++/15/future" 2 3
# 1 "/usr/include/c++/15/condition_variable" 1 3
# 56 "/usr/include/c++/15/condition_variable" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 69 "/usr/include/c++/15/condition_variable" 3
  enum class cv_status { no_timeout, timeout };


  class condition_variable
  {
    using steady_clock = chrono::steady_clock;
    using system_clock = chrono::system_clock;

    using __clock_t = steady_clock;




    __condvar _M_cond;

  public:
    typedef __gthread_cond_t* native_handle_type;

    condition_variable() noexcept;
    ~condition_variable() noexcept;

    condition_variable(const condition_variable&) = delete;
    condition_variable& operator=(const condition_variable&) = delete;

    void
    notify_one() noexcept;

    void
    notify_all() noexcept;

    void
    wait(unique_lock<mutex>& __lock);

    template<typename _Predicate>
      void
      wait(unique_lock<mutex>& __lock, _Predicate __p)
      {
 while (!__p())
   wait(__lock);
      }


    template<typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<steady_clock, _Duration>& __atime)
      { return __wait_until_impl(__lock, __atime); }


    template<typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<system_clock, _Duration>& __atime)
      { return __wait_until_impl(__lock, __atime); }

    template<typename _Clock, typename _Duration>
      cv_status
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {



 using __s_dur = typename __clock_t::duration;
 const typename _Clock::time_point __c_entry = _Clock::now();
 const __clock_t::time_point __s_entry = __clock_t::now();
 const auto __delta = __atime - __c_entry;
 const auto __s_atime = __s_entry +
   chrono::__detail::ceil<__s_dur>(__delta);

 if (__wait_until_impl(__lock, __s_atime) == cv_status::no_timeout)
   return cv_status::no_timeout;



 if (_Clock::now() < __atime)
   return cv_status::no_timeout;
 return cv_status::timeout;
      }

    template<typename _Clock, typename _Duration, typename _Predicate>
      bool
      wait_until(unique_lock<mutex>& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime,
   _Predicate __p)
      {
 while (!__p())
   if (wait_until(__lock, __atime) == cv_status::timeout)
     return __p();
 return true;
      }

    template<typename _Rep, typename _Period>
      cv_status
      wait_for(unique_lock<mutex>& __lock,
        const chrono::duration<_Rep, _Period>& __rtime)
      {
 using __dur = typename steady_clock::duration;
 return wait_until(__lock,
     steady_clock::now() +
     chrono::__detail::ceil<__dur>(__rtime));
      }

    template<typename _Rep, typename _Period, typename _Predicate>
      bool
      wait_for(unique_lock<mutex>& __lock,
        const chrono::duration<_Rep, _Period>& __rtime,
        _Predicate __p)
      {
 using __dur = typename steady_clock::duration;
 return wait_until(__lock,
     steady_clock::now() +
     chrono::__detail::ceil<__dur>(__rtime),
     std::move(__p));
      }

    native_handle_type
    native_handle()
    { return _M_cond.native_handle(); }

  private:

    template<typename _Dur>
      cv_status
      __wait_until_impl(unique_lock<mutex>& __lock,
   const chrono::time_point<steady_clock, _Dur>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 _M_cond.wait_until(*__lock.mutex(), 1, __ts);

 return (steady_clock::now() < __atime
  ? cv_status::no_timeout : cv_status::timeout);
      }


    template<typename _Dur>
      cv_status
      __wait_until_impl(unique_lock<mutex>& __lock,
   const chrono::time_point<system_clock, _Dur>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 _M_cond.wait_until(*__lock.mutex(), __ts);

 return (system_clock::now() < __atime
  ? cv_status::no_timeout : cv_status::timeout);
      }
  };

  void
  notify_all_at_thread_exit(condition_variable&, unique_lock<mutex>);

  struct __at_thread_exit_elt
  {
    __at_thread_exit_elt* _M_next;
    void (*_M_cb)(void*);
  };

inline namespace _V2 {



  class condition_variable_any
  {

    using __clock_t = chrono::steady_clock;



    condition_variable _M_cond;
    shared_ptr<mutex> _M_mutex;


    template<typename _Lock>
      struct _Unlock
      {
 explicit _Unlock(_Lock& __lk) : _M_lock(__lk) { __lk.unlock(); }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 ~_Unlock() noexcept(false)
 {
   if (uncaught_exception())
     {
       try
       { _M_lock.lock(); }
       catch(const __cxxabiv1::__forced_unwind&)
       { throw; }
       catch(...)
       { }
     }
   else
     _M_lock.lock();
 }
#pragma GCC diagnostic pop

 _Unlock(const _Unlock&) = delete;
 _Unlock& operator=(const _Unlock&) = delete;

 _Lock& _M_lock;
      };

  public:
    condition_variable_any() : _M_mutex(std::make_shared<mutex>()) { }
    ~condition_variable_any() = default;

    condition_variable_any(const condition_variable_any&) = delete;
    condition_variable_any& operator=(const condition_variable_any&) = delete;

    void
    notify_one() noexcept
    {
      lock_guard<mutex> __lock(*_M_mutex);
      _M_cond.notify_one();
    }

    void
    notify_all() noexcept
    {
      lock_guard<mutex> __lock(*_M_mutex);
      _M_cond.notify_all();
    }

    template<typename _Lock>
      void
      wait(_Lock& __lock)
      {
 shared_ptr<mutex> __mutex = _M_mutex;
 unique_lock<mutex> __my_lock(*__mutex);
 _Unlock<_Lock> __unlock(__lock);


 unique_lock<mutex> __my_lock2(std::move(__my_lock));
 _M_cond.wait(__my_lock2);
      }


    template<typename _Lock, typename _Predicate>
      void
      wait(_Lock& __lock, _Predicate __p)
      {
 while (!__p())
   wait(__lock);
      }

    template<typename _Lock, typename _Clock, typename _Duration>
      cv_status
      wait_until(_Lock& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {
 shared_ptr<mutex> __mutex = _M_mutex;
 unique_lock<mutex> __my_lock(*__mutex);
 _Unlock<_Lock> __unlock(__lock);


 unique_lock<mutex> __my_lock2(std::move(__my_lock));
 return _M_cond.wait_until(__my_lock2, __atime);
      }

    template<typename _Lock, typename _Clock,
      typename _Duration, typename _Predicate>
      bool
      wait_until(_Lock& __lock,
   const chrono::time_point<_Clock, _Duration>& __atime,
   _Predicate __p)
      {
 while (!__p())
   if (wait_until(__lock, __atime) == cv_status::timeout)
     return __p();
 return true;
      }

    template<typename _Lock, typename _Rep, typename _Period>
      cv_status
      wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime)
      { return wait_until(__lock, __clock_t::now() + __rtime); }

    template<typename _Lock, typename _Rep,
      typename _Period, typename _Predicate>
      bool
      wait_for(_Lock& __lock,
        const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p)
      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }
# 445 "/usr/include/c++/15/condition_variable" 3
  };

}



}
# 44 "/usr/include/c++/15/future" 2 3



# 1 "/usr/include/c++/15/bits/atomic_futex.h" 1 3
# 48 "/usr/include/c++/15/bits/atomic_futex.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  struct __atomic_futex_unsigned_base
  {


    bool
    _M_futex_wait_until(unsigned *__addr, unsigned __val, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns);



    bool
    _M_futex_wait_until_steady(unsigned *__addr, unsigned __val,
 bool __has_timeout, chrono::seconds __s, chrono::nanoseconds __ns);


    static void _M_futex_notify_all(unsigned* __addr);
  };

  template <unsigned _Waiter_bit = 0x80000000>
  class __atomic_futex_unsigned : __atomic_futex_unsigned_base
  {
    typedef chrono::steady_clock __clock_t;


    atomic<unsigned> _M_data;

  public:
    explicit
    __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
    { }

    inline __attribute__((__always_inline__)) unsigned
    _M_load(memory_order __mo)
    {
      return _M_data.load(__mo) & ~_Waiter_bit;
    }

  private:






    unsigned
    _M_load_and_test_until(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns)
    {
      for (;;)
 {





   _M_data.fetch_or(_Waiter_bit, memory_order_relaxed);
   bool __ret = _M_futex_wait_until((unsigned*)(void*)&_M_data,
        __assumed | _Waiter_bit,
        __has_timeout, __s, __ns);

   __assumed = _M_load(__mo);
   if (!__ret || ((__operand == __assumed) == __equal))
     return __assumed;

 }
    }







    unsigned
    _M_load_and_test_until_steady(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo, bool __has_timeout,
 chrono::seconds __s, chrono::nanoseconds __ns)
    {
      for (;;)
 {





   _M_data.fetch_or(_Waiter_bit, memory_order_relaxed);
   bool __ret = _M_futex_wait_until_steady((unsigned*)(void*)&_M_data,
        __assumed | _Waiter_bit,
        __has_timeout, __s, __ns);

   __assumed = _M_load(__mo);
   if (!__ret || ((__operand == __assumed) == __equal))
     return __assumed;

 }
    }





    unsigned
    _M_load_and_test(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo)
    {
      return _M_load_and_test_until(__assumed, __operand, __equal, __mo,
        false, {}, {});
    }






    template<typename _Dur>
    unsigned
    _M_load_and_test_until_impl(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo,
 const chrono::time_point<std::chrono::system_clock, _Dur>& __atime)
    {
      auto __d = __atime.time_since_epoch();
      if (__d < __d.zero()) [[__unlikely__]]
 return false;
      auto __s = chrono::duration_cast<chrono::seconds>(__d);
      auto __ns = chrono::duration_cast<chrono::nanoseconds>(__d - __s);
      return _M_load_and_test_until(__assumed, __operand, __equal, __mo,
        true, __s, __ns);
    }

    template<typename _Dur>
    unsigned
    _M_load_and_test_until_impl(unsigned __assumed, unsigned __operand,
 bool __equal, memory_order __mo,
 const chrono::time_point<std::chrono::steady_clock, _Dur>& __atime)
    {
      auto __d = __atime.time_since_epoch();
      if (__d < __d.zero()) [[__unlikely__]]
 return false;
      auto __s = chrono::duration_cast<chrono::seconds>(__d);
      auto __ns = chrono::duration_cast<chrono::nanoseconds>(__d - __s);
      return _M_load_and_test_until_steady(__assumed, __operand, __equal, __mo,
   true, __s, __ns);
    }

  public:

    inline __attribute__((__always_inline__)) unsigned
    _M_load_when_not_equal(unsigned __val, memory_order __mo)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) != __val)
 return (__i & ~_Waiter_bit);

      return _M_load_and_test(__i, __val, false, __mo);
    }

    inline __attribute__((__always_inline__)) void
    _M_load_when_equal(unsigned __val, memory_order __mo)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return;

      _M_load_and_test(__i, __val, true, __mo);
    }


    template<typename _Rep, typename _Period>
      inline __attribute__((__always_inline__)) bool
      _M_load_when_equal_for(unsigned __val, memory_order __mo,
   const chrono::duration<_Rep, _Period>& __rtime)
      {
 using __dur = typename __clock_t::duration;
 return _M_load_when_equal_until(__val, __mo,
      __clock_t::now() + chrono::__detail::ceil<__dur>(__rtime));
      }


    template<typename _Clock, typename _Duration>
      inline __attribute__((__always_inline__)) bool
      _M_load_when_equal_until(unsigned __val, memory_order __mo,
   const chrono::time_point<_Clock, _Duration>& __atime)
      {
 typename _Clock::time_point __c_entry = _Clock::now();
 do {
   const __clock_t::time_point __s_entry = __clock_t::now();
   const auto __delta = __atime - __c_entry;
   const auto __s_atime = __s_entry +
       chrono::__detail::ceil<__clock_t::duration>(__delta);
   if (_M_load_when_equal_until(__val, __mo, __s_atime))
     return true;
   __c_entry = _Clock::now();
 } while (__c_entry < __atime);
 return false;
      }


    template<typename _Duration>
    inline __attribute__((__always_inline__)) bool
    _M_load_when_equal_until(unsigned __val, memory_order __mo,
 const chrono::time_point<std::chrono::system_clock, _Duration>& __atime)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return true;

      __i = _M_load_and_test_until_impl(__i, __val, true, __mo, __atime);
      return (__i & ~_Waiter_bit) == __val;
    }


    template<typename _Duration>
    inline __attribute__((__always_inline__)) bool
    _M_load_when_equal_until(unsigned __val, memory_order __mo,
 const chrono::time_point<std::chrono::steady_clock, _Duration>& __atime)
    {
      unsigned __i = _M_load(__mo);
      if ((__i & ~_Waiter_bit) == __val)
 return true;

      __i = _M_load_and_test_until_impl(__i, __val, true, __mo, __atime);
      return (__i & ~_Waiter_bit) == __val;
    }

    inline __attribute__((__always_inline__)) void
    _M_store_notify_all(unsigned __val, memory_order __mo)
    {
      unsigned* __futex = (unsigned *)(void *)&_M_data;
      if (_M_data.exchange(__val, __mo) & _Waiter_bit)
 _M_futex_notify_all(__futex);
    }
  };
# 363 "/usr/include/c++/15/bits/atomic_futex.h" 3

}
# 48 "/usr/include/c++/15/future" 2 3





# 1 "/usr/include/c++/15/bits/std_thread.h" 1 3
# 54 "/usr/include/c++/15/bits/std_thread.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 84 "/usr/include/c++/15/bits/std_thread.h" 3
  class thread
  {
  public:

    using native_handle_type = __gthread_t;
# 98 "/usr/include/c++/15/bits/std_thread.h" 3
    class id
    {
      native_handle_type _M_thread;

    public:
      id() noexcept : _M_thread() { }

      explicit
      id(native_handle_type __id) : _M_thread(__id) { }

    private:
      friend class thread;
      friend struct hash<id>;

      friend bool
      operator==(id __x, id __y) noexcept;





      friend bool
      operator<(id __x, id __y) noexcept;


      template<class _CharT, class _Traits>
 friend basic_ostream<_CharT, _Traits>&
 operator<<(basic_ostream<_CharT, _Traits>& __out, id __id);





    };

  private:
    id _M_id;




    template<typename _Tp>
      using __not_same = __not_<is_same<__remove_cvref_t<_Tp>, thread>>;

  public:
    thread() noexcept = default;


  private:






    static void
    _M_thread_deps_never_run() {




    }

  public:
    template<typename _Callable, typename... _Args,
      typename = _Require<__not_same<_Callable>>>
      explicit
      thread(_Callable&& __f, _Args&&... __args)
      {
 static_assert( __is_invocable<typename decay<_Callable>::type,
          typename decay<_Args>::type...>::value,
   "std::thread arguments must be invocable after conversion to rvalues"
   );

 using _Wrapper = _Call_wrapper<_Callable, _Args...>;


 _M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
       std::forward<_Callable>(__f), std::forward<_Args>(__args)...)),
     _M_thread_deps_never_run);
      }


    ~thread()
    {
      if (joinable())
 std::__terminate();
    }

    thread(const thread&) = delete;

    thread(thread&& __t) noexcept
    { swap(__t); }

    thread& operator=(const thread&) = delete;

    thread& operator=(thread&& __t) noexcept
    {
      if (joinable())
 std::__terminate();
      swap(__t);
      return *this;
    }

    void
    swap(thread& __t) noexcept
    { std::swap(_M_id, __t._M_id); }

    bool
    joinable() const noexcept
    { return !(_M_id == id()); }

    void
    join();

    void
    detach();

    id
    get_id() const noexcept
    { return _M_id; }



    native_handle_type
    native_handle()
    { return _M_id._M_thread; }


    static unsigned int
    hardware_concurrency() noexcept;



  private:



    struct _State
    {
      virtual ~_State();
      virtual void _M_run() = 0;
    };
    using _State_ptr = unique_ptr<_State>;

  private:
    template<typename _Callable>
      struct _State_impl : public _State
      {
 _Callable _M_func;

 template<typename... _Args>
   _State_impl(_Args&&... __args)
   : _M_func(std::forward<_Args>(__args)...)
   { }

 void
 _M_run() { _M_func(); }
      };

    void
    _M_start_thread(_State_ptr, void (*)());
# 280 "/usr/include/c++/15/bits/std_thread.h" 3
  private:

    template<typename _Tuple>
      struct _Invoker
      {
 template<typename... _Args>
   explicit
   _Invoker(_Args&&... __args)
   : _M_t(std::forward<_Args>(__args)...)
   { }

 _Tuple _M_t;

 template<typename>
   struct __result;
 template<typename _Fn, typename... _Args>
   struct __result<tuple<_Fn, _Args...>>
   : __invoke_result<_Fn, _Args...>
   { };

 template<size_t... _Ind>
   typename __result<_Tuple>::type
   _M_invoke(_Index_tuple<_Ind...>)
   { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }

 typename __result<_Tuple>::type
 operator()()
 {
   using _Indices
     = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;
   return _M_invoke(_Indices());
 }
      };

  public:

    template<typename... _Tp>
      using _Call_wrapper = _Invoker<tuple<typename decay<_Tp>::type...>>;


  };
# 329 "/usr/include/c++/15/bits/std_thread.h" 3
  inline void
  swap(thread& __x, thread& __y) noexcept
  { __x.swap(__y); }


  inline bool
  operator==(thread::id __x, thread::id __y) noexcept
  {




    return __x._M_thread == __y._M_thread;
  }





  template<>
    struct hash<thread::id>
    : public __hash_base<size_t, thread::id>
    {
      size_t
      operator()(const thread::id& __id) const noexcept
      { return std::_Hash_impl::hash(__id._M_thread); }
    };

  namespace this_thread
  {

    inline thread::id
    get_id() noexcept
    {



      return thread::id(pthread_self());



    }


    inline void
    yield() noexcept
    {

      __gthread_yield();

    }

  }




}
# 54 "/usr/include/c++/15/future" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/15/future" 3
  enum class future_errc
  {
    future_already_retrieved = 1,
    promise_already_satisfied,
    no_state,
    broken_promise
  };


  template<>
    struct is_error_code_enum<future_errc> : public true_type { };


  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  future_category() noexcept;


  [[__nodiscard__]]
  inline error_code
  make_error_code(future_errc __errc) noexcept
  { return error_code(static_cast<int>(__errc), future_category()); }


  [[__nodiscard__]]
  inline error_condition
  make_error_condition(future_errc __errc) noexcept
  { return error_condition(static_cast<int>(__errc), future_category()); }






  class future_error : public logic_error
  {
  public:
    explicit
    future_error(future_errc __errc)
    : future_error(std::make_error_code(__errc))
    { }

    virtual ~future_error() noexcept;

    virtual const char*
    what() const noexcept;

    const error_code&
    code() const noexcept { return _M_code; }

  private:
    explicit
    future_error(error_code __ec)
    : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
    { }

    friend void __throw_future_error(int);

    error_code _M_code;
  };


  template<typename _Res>
    class future;

  template<typename _Res>
    class shared_future;

  template<typename _Signature>
    class packaged_task;

  template<typename _Res>
    class promise;


  enum class launch
  {
    async = 1,
    deferred = 2
  };

  [[__nodiscard__]]
  constexpr launch operator&(launch __x, launch __y) noexcept
  {
    return static_cast<launch>(
 static_cast<int>(__x) & static_cast<int>(__y));
  }

  [[__nodiscard__]]
  constexpr launch operator|(launch __x, launch __y) noexcept
  {
    return static_cast<launch>(
 static_cast<int>(__x) | static_cast<int>(__y));
  }

  [[__nodiscard__]]
  constexpr launch operator^(launch __x, launch __y) noexcept
  {
    return static_cast<launch>(
 static_cast<int>(__x) ^ static_cast<int>(__y));
  }

  [[__nodiscard__]]
  constexpr launch operator~(launch __x) noexcept
  { return static_cast<launch>(~static_cast<int>(__x)); }

  constexpr
  inline launch& operator&=(launch& __x, launch __y) noexcept
  { return __x = __x & __y; }

  constexpr
  inline launch& operator|=(launch& __x, launch __y) noexcept
  { return __x = __x | __y; }

  constexpr
  inline launch& operator^=(launch& __x, launch __y) noexcept
  { return __x = __x ^ __y; }


  enum class future_status
  {
    ready,
    timeout,
    deferred
  };




  template<typename _Fn, typename... _Args>
    using __async_result_of = typename __invoke_result<
      typename decay<_Fn>::type, typename decay<_Args>::type...>::type;


  template<typename _Fn, typename... _Args>
    future<__async_result_of<_Fn, _Args...>>
    async(launch __policy, _Fn&& __fn, _Args&&... __args);

  template<typename _Fn, typename... _Args>
    future<__async_result_of<_Fn, _Args...>>
    async(_Fn&& __fn, _Args&&... __args);






  struct __future_base
  {

    struct _Result_base
    {
      exception_ptr _M_error;

      _Result_base(const _Result_base&) = delete;
      _Result_base& operator=(const _Result_base&) = delete;


      virtual void _M_destroy() = 0;

      struct _Deleter
      {
 void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
      };

    protected:
      _Result_base();
      virtual ~_Result_base();
    };


    template<typename _Res>
      using _Ptr = unique_ptr<_Res, _Result_base::_Deleter>;


    template<typename _Res>
      struct _Result : _Result_base
      {
      private:
 __gnu_cxx::__aligned_buffer<_Res> _M_storage;
 bool _M_initialized;

      public:
 typedef _Res result_type;

 _Result() noexcept : _M_initialized() { }

 ~_Result()
 {
   if (_M_initialized)
     _M_value().~_Res();
 }


 _Res&
 _M_value() noexcept { return *_M_storage._M_ptr(); }

 void
 _M_set(const _Res& __res)
 {
   ::new (_M_storage._M_addr()) _Res(__res);
   _M_initialized = true;
 }

 void
 _M_set(_Res&& __res)
 {
   ::new (_M_storage._M_addr()) _Res(std::move(__res));
   _M_initialized = true;
 }

      private:
 void _M_destroy() { delete this; }
    };


    template<typename _Res, typename _Alloc>
      struct _Result_alloc final : _Result<_Res>, _Alloc
      {
 using __allocator_type = __alloc_rebind<_Alloc, _Result_alloc>;

 explicit
 _Result_alloc(const _Alloc& __a) : _Result<_Res>(), _Alloc(__a)
 { }

      private:
 void _M_destroy()
 {
   __allocator_type __a(*this);
   __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
   this->~_Result_alloc();
 }
      };


    template<typename _Res, typename _Allocator>
      static _Ptr<_Result_alloc<_Res, _Allocator>>
      _S_allocate_result(const _Allocator& __a)
      {
 using __result_type = _Result_alloc<_Res, _Allocator>;
 typename __result_type::__allocator_type __a2(__a);
 auto __guard = std::__allocate_guarded(__a2);
 __result_type* __p = ::new((void*)__guard.get()) __result_type{__a};
 __guard = nullptr;
 return _Ptr<__result_type>(__p);
      }


    template<typename _Res, typename _Tp>
      static _Ptr<_Result<_Res>>
      _S_allocate_result(const std::allocator<_Tp>&)
      {
 return _Ptr<_Result<_Res>>(new _Result<_Res>);
      }




    class _State_baseV2
    {
      typedef _Ptr<_Result_base> _Ptr_type;

      enum _Status : unsigned {
 __not_ready,
 __ready
      };

      _Ptr_type _M_result;
      __atomic_futex_unsigned<> _M_status;
      atomic_flag _M_retrieved = { 0 };
      once_flag _M_once;

    public:
      _State_baseV2() noexcept : _M_result(), _M_status(_Status::__not_ready)
 { }
      _State_baseV2(const _State_baseV2&) = delete;
      _State_baseV2& operator=(const _State_baseV2&) = delete;
      virtual ~_State_baseV2() = default;

      _Result_base&
      wait()
      {

 _M_complete_async();


 _M_status._M_load_when_equal(_Status::__ready, memory_order_acquire);
 return *_M_result;
      }

      template<typename _Rep, typename _Period>
 future_status
 wait_for(const chrono::duration<_Rep, _Period>& __rel)
 {


   if (_M_status._M_load(memory_order_acquire) == _Status::__ready)
     return future_status::ready;

   if (_M_is_deferred_future())
     return future_status::deferred;


   if (__rel > __rel.zero()
       && _M_status._M_load_when_equal_for(_Status::__ready,
        memory_order_acquire,
        __rel))
     {
# 393 "/usr/include/c++/15/future" 3
       _M_complete_async();

       return future_status::ready;
     }
   return future_status::timeout;
 }

      template<typename _Clock, typename _Duration>
 future_status
 wait_until(const chrono::time_point<_Clock, _Duration>& __abs)
 {





   if (_M_status._M_load(memory_order_acquire) == _Status::__ready)
     return future_status::ready;

   if (_M_is_deferred_future())
     return future_status::deferred;

   if (_M_status._M_load_when_equal_until(_Status::__ready,
       memory_order_acquire,
       __abs))
     {



       _M_complete_async();

       return future_status::ready;
     }
   return future_status::timeout;
 }



      void
      _M_set_result(function<_Ptr_type()> __res, bool __ignore_failure = false)
      {
 bool __did_set = false;


 call_once(_M_once, &_State_baseV2::_M_do_set, this,
    std::__addressof(__res), std::__addressof(__did_set));
 if (__did_set)

   _M_status._M_store_notify_all(_Status::__ready,
     memory_order_release);
 else if (!__ignore_failure)
   __throw_future_error(int(future_errc::promise_already_satisfied));
      }




      void
      _M_set_delayed_result(function<_Ptr_type()> __res,
       weak_ptr<_State_baseV2> __self)
      {
 bool __did_set = false;
 unique_ptr<_Make_ready> __mr{new _Make_ready};


 call_once(_M_once, &_State_baseV2::_M_do_set, this,
    std::__addressof(__res), std::__addressof(__did_set));
 if (!__did_set)
   __throw_future_error(int(future_errc::promise_already_satisfied));
 __mr->_M_shared_state = std::move(__self);
 __mr->_M_set();
 __mr.release();
      }


      void
      _M_break_promise(_Ptr_type __res)
      {
 if (static_cast<bool>(__res))
   {
     __res->_M_error =
       make_exception_ptr(future_error(future_errc::broken_promise));




     _M_result.swap(__res);

     _M_status._M_store_notify_all(_Status::__ready,
       memory_order_release);
   }
      }


      void
      _M_set_retrieved_flag()
      {
 if (_M_retrieved.test_and_set())
   __throw_future_error(int(future_errc::future_already_retrieved));
      }

      template<typename _Res, typename _Arg>
 struct _Setter;


      template<typename _Res, typename _Arg>
 struct _Setter<_Res, _Arg&>
 {


   static_assert(is_same<_Res, _Arg&>::value
     || is_same<const _Res, _Arg>::value,
   "Invalid specialisation");


   typename promise<_Res>::_Ptr_type operator()() const
   {
     _M_promise->_M_storage->_M_set(*_M_arg);
     return std::move(_M_promise->_M_storage);
   }
   promise<_Res>* _M_promise;
   _Arg* _M_arg;
 };


      template<typename _Res>
 struct _Setter<_Res, _Res&&>
 {

   typename promise<_Res>::_Ptr_type operator()() const
   {
     _M_promise->_M_storage->_M_set(std::move(*_M_arg));
     return std::move(_M_promise->_M_storage);
   }
   promise<_Res>* _M_promise;
   _Res* _M_arg;
 };


      template<typename _Res>
 struct _Setter<_Res, void>
 {
   static_assert(is_void<_Res>::value, "Only used for promise<void>");

   typename promise<_Res>::_Ptr_type operator()() const noexcept
   { return std::move(_M_promise->_M_storage); }

   promise<_Res>* _M_promise;
 };

      struct __exception_ptr_tag { };


      template<typename _Res>
 struct _Setter<_Res, __exception_ptr_tag>
 {

   typename promise<_Res>::_Ptr_type operator()() const noexcept
   {
     _M_promise->_M_storage->_M_error = *_M_ex;
     return std::move(_M_promise->_M_storage);
   }

   promise<_Res>* _M_promise;
   exception_ptr* _M_ex;
 };

      template<typename _Res, typename _Arg>
 __attribute__((__always_inline__))
 static _Setter<_Res, _Arg&&>
 __setter(promise<_Res>* __prom, _Arg&& __arg) noexcept
 {
   return _Setter<_Res, _Arg&&>{ __prom, std::__addressof(__arg) };
 }

      template<typename _Res>
 __attribute__((__always_inline__))
 static _Setter<_Res, __exception_ptr_tag>
 __setter(exception_ptr& __ex, promise<_Res>* __prom) noexcept
 {
   do { if (std::__is_constant_evaluated() && !bool(__ex != nullptr)) std::__glibcxx_assert_fail(); } while (false);
   return _Setter<_Res, __exception_ptr_tag>{ __prom, &__ex };
 }

      template<typename _Res>
 __attribute__((__always_inline__))
 static _Setter<_Res, void>
 __setter(promise<_Res>* __prom) noexcept
 {
   return _Setter<_Res, void>{ __prom };
 }

      template<typename _Tp>
 static void
 _S_check(const shared_ptr<_Tp>& __p)
 {
   if (!static_cast<bool>(__p))
     __throw_future_error((int)future_errc::no_state);
 }

    private:

      void
      _M_do_set(function<_Ptr_type()>* __f, bool* __did_set)
      {
 _Ptr_type __res = (*__f)();



 *__did_set = true;
 _M_result.swap(__res);
      }


      virtual void _M_complete_async() { }


      virtual bool _M_is_deferred_future() const { return false; }

      struct _Make_ready final : __at_thread_exit_elt
      {
 weak_ptr<_State_baseV2> _M_shared_state;
 static void _S_run(void*);
 void _M_set();
      };
    };





    using _State_base = _State_baseV2;
    class _Async_state_commonV2;


    template<typename _BoundFn,
      typename _Res = decltype(std::declval<_BoundFn&>()())>
      class _Deferred_state;

    template<typename _BoundFn,
      typename _Res = decltype(std::declval<_BoundFn&>()())>
      class _Async_state_impl;

    template<typename _Signature>
      struct _Task_state_base;

    template<typename _Fn, typename _Alloc, typename _Signature>
      struct _Task_state;

    template<typename _Res_ptr, typename _Fn,
      typename _Res = typename _Res_ptr::element_type::result_type>
      struct _Task_setter;

    template<typename _Res_ptr, typename _BoundFn>
      static _Task_setter<_Res_ptr, _BoundFn>
      _S_task_setter(_Res_ptr& __ptr, _BoundFn& __call)
      {
 return { std::__addressof(__ptr), std::__addressof(__call) };
      }
  };


  template<typename _Res>
    struct __future_base::_Result<_Res&> : __future_base::_Result_base
    {
      typedef _Res& result_type;

      _Result() noexcept : _M_value_ptr() { }

      void
      _M_set(_Res& __res) noexcept
      { _M_value_ptr = std::addressof(__res); }

      _Res& _M_get() noexcept { return *_M_value_ptr; }

    private:
      _Res* _M_value_ptr;

      void _M_destroy() { delete this; }
    };


  template<>
    struct __future_base::_Result<void> : __future_base::_Result_base
    {
      typedef void result_type;

    private:
      void _M_destroy() { delete this; }
    };







  template<typename _Res, typename _Arg>
    struct __is_location_invariant
    <__future_base::_State_base::_Setter<_Res, _Arg>>
    : true_type { };


  template<typename _Res_ptr, typename _Fn, typename _Res>
    struct __is_location_invariant
    <__future_base::_Task_setter<_Res_ptr, _Fn, _Res>>
    : true_type { };



  template<typename _Res>
    class __basic_future : public __future_base
    {
    protected:
      typedef shared_ptr<_State_base> __state_type;
      typedef __future_base::_Result<_Res>& __result_type;

    private:
      __state_type _M_state;

    public:

      __basic_future(const __basic_future&) = delete;
      __basic_future& operator=(const __basic_future&) = delete;

      bool
      valid() const noexcept { return static_cast<bool>(_M_state); }

      void
      wait() const
      {
 _State_base::_S_check(_M_state);
 _M_state->wait();
      }

      template<typename _Rep, typename _Period>
 future_status
 wait_for(const chrono::duration<_Rep, _Period>& __rel) const
 {
   _State_base::_S_check(_M_state);
   return _M_state->wait_for(__rel);
 }

      template<typename _Clock, typename _Duration>
 future_status
 wait_until(const chrono::time_point<_Clock, _Duration>& __abs) const
 {
   _State_base::_S_check(_M_state);
   return _M_state->wait_until(__abs);
 }

    protected:

      __result_type
      _M_get_result() const
      {
 _State_base::_S_check(_M_state);
 _Result_base& __res = _M_state->wait();
 if (!(__res._M_error == nullptr))
   rethrow_exception(__res._M_error);
 return static_cast<__result_type>(__res);
      }

      void _M_swap(__basic_future& __that) noexcept
      {
 _M_state.swap(__that._M_state);
      }


      explicit
      __basic_future(const __state_type& __state) : _M_state(__state)
      {
 _State_base::_S_check(_M_state);
 _M_state->_M_set_retrieved_flag();
      }


      explicit
      __basic_future(const shared_future<_Res>&) noexcept;


      explicit
      __basic_future(shared_future<_Res>&&) noexcept;


      explicit
      __basic_future(future<_Res>&&) noexcept;

      constexpr __basic_future() noexcept : _M_state() { }

      struct _Reset
      {
 explicit _Reset(__basic_future& __fut) noexcept : _M_fut(__fut) { }
 ~_Reset() { _M_fut._M_state.reset(); }
 __basic_future& _M_fut;
      };
    };



  template<typename _Res>
    class future : public __basic_future<_Res>
    {


      static_assert(!is_array<_Res>{}, "result type must not be an array");
      static_assert(!is_function<_Res>{}, "result type must not be a function");
      static_assert(is_destructible<_Res>{},
      "result type must be destructible");

      friend class promise<_Res>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
 friend future<__async_result_of<_Fn, _Args...>>
 async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<_Res> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
 future(std::move(__fut))._M_swap(*this);
 return *this;
      }


      _Res
      get()
      {
 typename _Base_type::_Reset __reset(*this);
 return std::move(this->_M_get_result()._M_value());
      }

      shared_future<_Res> share() noexcept;
    };


  template<typename _Res>
    class future<_Res&> : public __basic_future<_Res&>
    {
      friend class promise<_Res&>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
 friend future<__async_result_of<_Fn, _Args...>>
 async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<_Res&> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
 future(std::move(__fut))._M_swap(*this);
 return *this;
      }


      _Res&
      get()
      {
 typename _Base_type::_Reset __reset(*this);
 return this->_M_get_result()._M_get();
      }

      shared_future<_Res&> share() noexcept;
    };


  template<>
    class future<void> : public __basic_future<void>
    {
      friend class promise<void>;
      template<typename> friend class packaged_task;
      template<typename _Fn, typename... _Args>
 friend future<__async_result_of<_Fn, _Args...>>
 async(launch, _Fn&&, _Args&&...);

      typedef __basic_future<void> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }

    public:
      constexpr future() noexcept : _Base_type() { }


      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }


      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
      {
 future(std::move(__fut))._M_swap(*this);
 return *this;
      }


      void
      get()
      {
 typename _Base_type::_Reset __reset(*this);
 this->_M_get_result();
      }

      shared_future<void> share() noexcept;
    };



  template<typename _Res>
    class shared_future : public __basic_future<_Res>
    {


      static_assert(!is_array<_Res>{}, "result type must not be an array");
      static_assert(!is_function<_Res>{}, "result type must not be a function");
      static_assert(is_destructible<_Res>{},
      "result type must be destructible");

      typedef __basic_future<_Res> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) noexcept : _Base_type(__sf) { }


      shared_future(future<_Res>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf) noexcept
      {
 shared_future(__sf)._M_swap(*this);
 return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
 shared_future(std::move(__sf))._M_swap(*this);
 return *this;
      }


      const _Res&
      get() const { return this->_M_get_result()._M_value(); }
    };


  template<typename _Res>
    class shared_future<_Res&> : public __basic_future<_Res&>
    {
      typedef __basic_future<_Res&> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<_Res&>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
 shared_future(__sf)._M_swap(*this);
 return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
 shared_future(std::move(__sf))._M_swap(*this);
 return *this;
      }


      _Res&
      get() const { return this->_M_get_result()._M_get(); }
    };


  template<>
    class shared_future<void> : public __basic_future<void>
    {
      typedef __basic_future<void> _Base_type;

    public:
      constexpr shared_future() noexcept : _Base_type() { }


      shared_future(const shared_future& __sf) : _Base_type(__sf) { }


      shared_future(future<void>&& __uf) noexcept
      : _Base_type(std::move(__uf))
      { }


      shared_future(shared_future&& __sf) noexcept
      : _Base_type(std::move(__sf))
      { }

      shared_future& operator=(const shared_future& __sf)
      {
 shared_future(__sf)._M_swap(*this);
 return *this;
      }

      shared_future& operator=(shared_future&& __sf) noexcept
      {
 shared_future(std::move(__sf))._M_swap(*this);
 return *this;
      }


      void
      get() const { this->_M_get_result(); }
    };


  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(const shared_future<_Res>& __sf) noexcept
    : _M_state(__sf._M_state)
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(shared_future<_Res>&& __sf) noexcept
    : _M_state(std::move(__sf._M_state))
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
    __basic_future(future<_Res>&& __uf) noexcept
    : _M_state(std::move(__uf._M_state))
    { }



  template<typename _Res>
    inline shared_future<_Res>
    future<_Res>::share() noexcept
    { return shared_future<_Res>(std::move(*this)); }

  template<typename _Res>
    inline shared_future<_Res&>
    future<_Res&>::share() noexcept
    { return shared_future<_Res&>(std::move(*this)); }

  inline shared_future<void>
  future<void>::share() noexcept
  { return shared_future<void>(std::move(*this)); }


  template<typename _Res>
    class promise
    {


      static_assert(!is_array<_Res>{}, "result type must not be an array");
      static_assert(!is_function<_Res>{}, "result type must not be a function");
      static_assert(is_destructible<_Res>{},
      "result type must be destructible");

      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<_Res> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend struct _State::_Setter;
      friend _State;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
 promise(allocator_arg_t, const _Allocator& __a)
 : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<_Res>(__a))
 { }

      template<typename _Allocator>
 promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
 : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
 { }

      promise(const promise&) = delete;

      ~promise()
      {
 if (static_cast<bool>(_M_future) && !_M_future.unique())
   _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
 promise(std::move(__rhs)).swap(*this);
 return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
 _M_future.swap(__rhs._M_future);
 _M_storage.swap(__rhs._M_storage);
      }


      future<_Res>
      get_future()
      { return future<_Res>(_M_future); }


      void
      set_value(const _Res& __r)
      { _M_state()._M_set_result(_State::__setter(this, __r)); }

      void
      set_value(_Res&& __r)
      { _M_state()._M_set_result(_State::__setter(this, std::move(__r))); }

      void
      set_exception(exception_ptr __p)
      { _M_state()._M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit(const _Res& __r)
      {
 _M_state()._M_set_delayed_result(_State::__setter(this, __r),
      _M_future);
      }

      void
      set_value_at_thread_exit(_Res&& __r)
      {
 _M_state()._M_set_delayed_result(
     _State::__setter(this, std::move(__r)), _M_future);
      }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_state()._M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }

    private:
      _State&
      _M_state()
      {
 __future_base::_State_base::_S_check(_M_future);
 return *_M_future;
      }
    };

  template<typename _Res>
    inline void
    swap(promise<_Res>& __x, promise<_Res>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Res, typename _Alloc>
    struct uses_allocator<promise<_Res>, _Alloc>
    : public true_type { };



  template<typename _Res>
    class promise<_Res&>
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<_Res&> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend struct _State::_Setter;
      friend _State;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
 promise(allocator_arg_t, const _Allocator& __a)
 : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<_Res&>(__a))
 { }

      template<typename _Allocator>
 promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
 : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
 { }

      promise(const promise&) = delete;

      ~promise()
      {
 if (static_cast<bool>(_M_future) && !_M_future.unique())
   _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
 promise(std::move(__rhs)).swap(*this);
 return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
 _M_future.swap(__rhs._M_future);
 _M_storage.swap(__rhs._M_storage);
      }


      future<_Res&>
      get_future()
      { return future<_Res&>(_M_future); }


      void
      set_value(_Res& __r)
      { _M_state()._M_set_result(_State::__setter(this, __r)); }

      void
      set_exception(exception_ptr __p)
      { _M_state()._M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit(_Res& __r)
      {
 _M_state()._M_set_delayed_result(_State::__setter(this, __r),
      _M_future);
      }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_state()._M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }

    private:
      _State&
      _M_state()
      {
 __future_base::_State_base::_S_check(_M_future);
 return *_M_future;
      }
    };


  template<>
    class promise<void>
    {
      typedef __future_base::_State_base _State;
      typedef __future_base::_Result<void> _Res_type;
      typedef __future_base::_Ptr<_Res_type> _Ptr_type;
      template<typename, typename> friend struct _State::_Setter;
      friend _State;

      shared_ptr<_State> _M_future;
      _Ptr_type _M_storage;

    public:
      promise()
      : _M_future(std::make_shared<_State>()),
 _M_storage(new _Res_type())
      { }

      promise(promise&& __rhs) noexcept
      : _M_future(std::move(__rhs._M_future)),
 _M_storage(std::move(__rhs._M_storage))
      { }

      template<typename _Allocator>
 promise(allocator_arg_t, const _Allocator& __a)
 : _M_future(std::allocate_shared<_State>(__a)),
   _M_storage(__future_base::_S_allocate_result<void>(__a))
 { }



      template<typename _Allocator>
 promise(allocator_arg_t, const _Allocator&, promise&& __rhs)
 : _M_future(std::move(__rhs._M_future)),
   _M_storage(std::move(__rhs._M_storage))
 { }

      promise(const promise&) = delete;

      ~promise()
      {
 if (static_cast<bool>(_M_future) && !_M_future.unique())
   _M_future->_M_break_promise(std::move(_M_storage));
      }


      promise&
      operator=(promise&& __rhs) noexcept
      {
 promise(std::move(__rhs)).swap(*this);
 return *this;
      }

      promise& operator=(const promise&) = delete;

      void
      swap(promise& __rhs) noexcept
      {
 _M_future.swap(__rhs._M_future);
 _M_storage.swap(__rhs._M_storage);
      }


      future<void>
      get_future()
      { return future<void>(_M_future); }


      void
      set_value()
      { _M_state()._M_set_result(_State::__setter(this)); }

      void
      set_exception(exception_ptr __p)
      { _M_state()._M_set_result(_State::__setter(__p, this)); }

      void
      set_value_at_thread_exit()
      { _M_state()._M_set_delayed_result(_State::__setter(this), _M_future); }

      void
      set_exception_at_thread_exit(exception_ptr __p)
      {
 _M_state()._M_set_delayed_result(_State::__setter(__p, this),
      _M_future);
      }

    private:
      _State&
      _M_state()
      {
 __future_base::_State_base::_S_check(_M_future);
 return *_M_future;
      }
    };


  template<typename _Ptr_type, typename _Fn, typename _Res>
    struct __future_base::_Task_setter
    {

      _Ptr_type operator()() const
      {
 try
   {
     (*_M_result)->_M_set((*_M_fn)());
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {
     throw;
   }
 catch(...)
   {
     (*_M_result)->_M_error = current_exception();
   }
 return std::move(*_M_result);
      }
      _Ptr_type* _M_result;
      _Fn* _M_fn;
    };

  template<typename _Ptr_type, typename _Fn>
    struct __future_base::_Task_setter<_Ptr_type, _Fn, void>
    {
      _Ptr_type operator()() const
      {
 try
   {
     (*_M_fn)();
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {
     throw;
   }
 catch(...)
   {
     (*_M_result)->_M_error = current_exception();
   }
 return std::move(*_M_result);
      }
      _Ptr_type* _M_result;
      _Fn* _M_fn;
    };


  template<typename _Res, typename... _Args>
    struct __future_base::_Task_state_base<_Res(_Args...)>
    : __future_base::_State_base
    {
      typedef _Res _Res_type;

      template<typename _Alloc>
 _Task_state_base(const _Alloc& __a)
 : _M_result(_S_allocate_result<_Res>(__a))
 { }


      virtual void
      _M_run(_Args&&... __args) = 0;


      virtual void
      _M_run_delayed(_Args&&... __args, weak_ptr<_State_base>) = 0;

      virtual shared_ptr<_Task_state_base>
      _M_reset() = 0;

      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
    };


  template<typename _Fn, typename _Alloc, typename _Res, typename... _Args>
    struct __future_base::_Task_state<_Fn, _Alloc, _Res(_Args...)> final
    : __future_base::_Task_state_base<_Res(_Args...)>
    {
      template<typename _Fn2>
 _Task_state(_Fn2&& __fn, const _Alloc& __a)
 : _Task_state_base<_Res(_Args...)>(__a),
   _M_impl(std::forward<_Fn2>(__fn), __a)
 { }

    private:
      virtual void
      _M_run(_Args&&... __args)
      {
 auto __boundfn = [&] () -> _Res {
     return std::__invoke_r<_Res>(_M_impl._M_fn,
      std::forward<_Args>(__args)...);
 };
 this->_M_set_result(_S_task_setter(this->_M_result, __boundfn));
      }

      virtual void
      _M_run_delayed(_Args&&... __args, weak_ptr<_State_base> __self)
      {
 auto __boundfn = [&] () -> _Res {
     return std::__invoke_r<_Res>(_M_impl._M_fn,
      std::forward<_Args>(__args)...);
 };
 this->_M_set_delayed_result(_S_task_setter(this->_M_result, __boundfn),
        std::move(__self));
      }

      virtual shared_ptr<_Task_state_base<_Res(_Args...)>>
      _M_reset();

      struct _Impl : _Alloc
      {
 template<typename _Fn2>
   _Impl(_Fn2&& __fn, const _Alloc& __a)
   : _Alloc(__a), _M_fn(std::forward<_Fn2>(__fn)) { }
 _Fn _M_fn;
      } _M_impl;
    };

  template<typename _Signature, typename _Fn,
    typename _Alloc = std::allocator<int>>
    shared_ptr<__future_base::_Task_state_base<_Signature>>
    __create_task_state(_Fn&& __fn, const _Alloc& __a = _Alloc())
    {
      typedef typename decay<_Fn>::type _Fn2;
      typedef __future_base::_Task_state<_Fn2, _Alloc, _Signature> _State;
      return std::allocate_shared<_State>(__a, std::forward<_Fn>(__fn), __a);
    }

  template<typename _Fn, typename _Alloc, typename _Res, typename... _Args>
    shared_ptr<__future_base::_Task_state_base<_Res(_Args...)>>
    __future_base::_Task_state<_Fn, _Alloc, _Res(_Args...)>::_M_reset()
    {
      return __create_task_state<_Res(_Args...)>(std::move(_M_impl._M_fn),
       static_cast<_Alloc&>(_M_impl));
    }



  template<typename _Res, typename... _ArgTypes>
    class packaged_task<_Res(_ArgTypes...)>
    {
      typedef __future_base::_Task_state_base<_Res(_ArgTypes...)> _State_type;
      shared_ptr<_State_type> _M_state;



      template<typename _Fn, typename _Fn2 = __remove_cvref_t<_Fn>>
 using __not_same
   = typename enable_if<!is_same<packaged_task, _Fn2>::value>::type;

    public:

      packaged_task() noexcept { }

      template<typename _Fn, typename = __not_same<_Fn>>
 explicit
 packaged_task(_Fn&& __fn)
 : _M_state(
     __create_task_state<_Res(_ArgTypes...)>(std::forward<_Fn>(__fn)))
 {






 }






      template<typename _Fn, typename _Alloc, typename = __not_same<_Fn>>
 packaged_task(allocator_arg_t, const _Alloc& __a, _Fn&& __fn)
 : _M_state(__create_task_state<_Res(_ArgTypes...)>(
     std::forward<_Fn>(__fn), __a))
 { }



      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&) noexcept
 { }

      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&,
        const packaged_task&) = delete;

      template<typename _Allocator>
 packaged_task(allocator_arg_t, const _Allocator&,
        packaged_task&& __other) noexcept
 { this->swap(__other); }


      ~packaged_task()
      {
 if (static_cast<bool>(_M_state) && !_M_state.unique())
   _M_state->_M_break_promise(std::move(_M_state->_M_result));
      }


      packaged_task(const packaged_task&) = delete;
      packaged_task& operator=(const packaged_task&) = delete;


      packaged_task(packaged_task&& __other) noexcept
      { this->swap(__other); }

      packaged_task& operator=(packaged_task&& __other) noexcept
      {
 packaged_task(std::move(__other)).swap(*this);
 return *this;
      }

      void
      swap(packaged_task& __other) noexcept
      { _M_state.swap(__other._M_state); }

      bool
      valid() const noexcept
      { return static_cast<bool>(_M_state); }


      future<_Res>
      get_future()
      { return future<_Res>(_M_state); }


      void
      operator()(_ArgTypes... __args)
      {
 __future_base::_State_base::_S_check(_M_state);
 _M_state->_M_run(std::forward<_ArgTypes>(__args)...);
      }

      void
      make_ready_at_thread_exit(_ArgTypes... __args)
      {
 __future_base::_State_base::_S_check(_M_state);
 _M_state->_M_run_delayed(std::forward<_ArgTypes>(__args)..., _M_state);
      }

      void
      reset()
      {
 __future_base::_State_base::_S_check(_M_state);
 packaged_task __tmp;
 __tmp._M_state = _M_state;
 _M_state = _M_state->_M_reset();
      }
    };
# 1676 "/usr/include/c++/15/future" 3
  template<typename _Res, typename... _ArgTypes>
    inline void
    swap(packaged_task<_Res(_ArgTypes...)>& __x,
  packaged_task<_Res(_ArgTypes...)>& __y) noexcept
    { __x.swap(__y); }




  template<typename _Res, typename _Alloc>
    struct uses_allocator<packaged_task<_Res>, _Alloc>
    : public true_type { };






  template<typename _BoundFn, typename _Res>
    class __future_base::_Deferred_state final
    : public __future_base::_State_base
    {
    public:
      template<typename... _Args>
 explicit
 _Deferred_state(_Args&&... __args)
 : _M_result(new _Result<_Res>()),
   _M_fn(std::forward<_Args>(__args)...)
 { }

    private:
      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;


      virtual void
      _M_complete_async()
      {






 _M_set_result(_S_task_setter(_M_result, _M_fn), true);
      }



      virtual bool _M_is_deferred_future() const { return true; }
    };


  class __future_base::_Async_state_commonV2
    : public __future_base::_State_base
  {
  protected:
    ~_Async_state_commonV2() = default;
# 1751 "/usr/include/c++/15/future" 3
    virtual void _M_complete_async() { _M_join(); }

    void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }

    thread _M_thread;
    once_flag _M_once;
  };



  template<typename _BoundFn, typename _Res>
    class __future_base::_Async_state_impl final
    : public __future_base::_Async_state_commonV2
    {
    public:
      template<typename... _Args>
 explicit
 _Async_state_impl(_Args&&... __args)
 : _M_result(new _Result<_Res>()),
   _M_fn(std::forward<_Args>(__args)...)
 {
   _M_thread = std::thread{&_Async_state_impl::_M_run, this};
 }




      ~_Async_state_impl()
      {
 if (_M_thread.joinable())
   _M_thread.join();
      }

    private:
      void
      _M_run()
      {
 try
   {
     _M_set_result(_S_task_setter(_M_result, _M_fn));
   }
 catch(const __cxxabiv1::__forced_unwind&)
   {

     if (static_cast<bool>(_M_result))
       this->_M_break_promise(std::move(_M_result));
     throw;
   }
      }

      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;
    };



  template<typename _Fn, typename... _Args>
    [[__nodiscard__]] future<__async_result_of<_Fn, _Args...>>
    async(launch __policy, _Fn&& __fn, _Args&&... __args)
    {
      using _Wr = std::thread::_Call_wrapper<_Fn, _Args...>;
      using _As = __future_base::_Async_state_impl<_Wr>;
      using _Ds = __future_base::_Deferred_state<_Wr>;

      std::shared_ptr<__future_base::_State_base> __state;
      if ((__policy & launch::async) == launch::async)
 {
   try
     {
       __state = std::make_shared<_As>(std::forward<_Fn>(__fn),
           std::forward<_Args>(__args)...);
     }

   catch(const system_error& __e)
     {
       if (__e.code() != errc::resource_unavailable_try_again
    || (__policy & launch::deferred) != launch::deferred)
  throw;
     }

 }
      if (!__state)
 {
   __state = std::make_shared<_Ds>(std::forward<_Fn>(__fn),
       std::forward<_Args>(__args)...);
 }
      return future<__async_result_of<_Fn, _Args...>>(std::move(__state));
    }


  template<typename _Fn, typename... _Args>
    [[__nodiscard__]] inline future<__async_result_of<_Fn, _Args...>>
    async(_Fn&& __fn, _Args&&... __args)
    {
      return std::async(launch::async|launch::deferred,
   std::forward<_Fn>(__fn),
   std::forward<_Args>(__args)...);
    }






}
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h" 2


# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h"
namespace asiopal
{
# 42 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/Executor.h"
class Executor final :
 public openpal::IExecutor,
 public std::enable_shared_from_this<Executor>,
 private openpal::Uncopyable
{

public:

 Executor(const std::shared_ptr<IO>& io);

 static std::shared_ptr<Executor> Create(const std::shared_ptr<IO>& io)
 {
  return std::make_shared<Executor>(io);
 }



 virtual openpal::MonotonicTimestamp GetTime() override;
 virtual openpal::ITimer* Start(const openpal::TimeDuration&, const openpal::action_t& runnable) override;
 virtual openpal::ITimer* Start(const openpal::MonotonicTimestamp&, const openpal::action_t& runnable) override;
 virtual void Post(const openpal::action_t& runnable) override;

 template <class T>
 T ReturnFrom(const std::function<T()>& action);

 void BlockUntil(const std::function<void ()>& action);

 void BlockUntilAndFlush(const std::function<void()>& action);

private:


 std::shared_ptr<IO> io;

public:


 std::shared_ptr<Executor> Fork() const
 {
  return Create(this->io);
 }

 asio::strand strand;

private:

 openpal::ITimer* Start(const steady_clock_t::time_point& expiration, const openpal::action_t& runnable);

};

template <class T>
T Executor::ReturnFrom(const std::function<T()>& action)
{
 if (strand.running_in_this_thread())
 {
  return action();
 }

 std::promise<T> ready;

 auto future = ready.get_future();

 auto run = [&]
 {
  ready.set_value(action());
 };

 strand.post(run);

 future.wait();

 return future.get();
}


}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/TCPClient.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/IPEndpoint.h" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/IPEndpoint.h"
namespace asiopal
{
class IPEndpoint
{

public:

 IPEndpoint(const std::string& address, uint16_t port) :
  address(address),
  port(port)
 {}

 static IPEndpoint AllAdapters(uint16_t port)
 {
  return IPEndpoint("0.0.0.0", port);
 }

 static IPEndpoint Localhost(uint16_t port)
 {
  return IPEndpoint("127.0.0.1", port);
 }

 std::string address;
 uint16_t port;
};

}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/TCPClient.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/LoggingConnectionCondition.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/LoggingConnectionCondition.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/Logger.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/Logger.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/ILogHandler.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/ILogHandler.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogEntry.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogEntry.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogFilters.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogFilters.h"
namespace openpal
{




class LogFilters
{

public:

 LogFilters() : filters(0)
 {}

 LogFilters(int32_t filters_) : filters(filters_)
 {}

 inline bool IsSet(int32_t levels) const
 {
  return (levels & filters) != 0;
 }

 bool operator &(const LogFilters& rhs) const
 {
  return IsSet(rhs.filters);
 }

 int32_t GetBitfield() const
 {
  return filters;
 }

private:

 int32_t filters;
};

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogEntry.h" 2


namespace openpal
{




class LogEntry : openpal::Uncopyable
{

public:

 LogEntry() = delete;

 LogEntry(const char* loggerid, const LogFilters& filters, const char* location, const char* message) :
  loggerid(loggerid),
  filters(filters),
  location(location),
  message(message)
 {}


 const char* loggerid;
 LogFilters filters;
 const char* location;
 const char* message;
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/ILogHandler.h" 2

namespace openpal
{




class ILogHandler
{
public:
 virtual ~ILogHandler() {}






 virtual void Log( const LogEntry& entry ) = 0;
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/Logger.h" 2




namespace openpal
{





class Logger
{

public:

 struct Settings
 {
  Settings(const std::string& id, openpal::LogFilters levels) : id(id), levels(levels)
  {}

  std::string id;
  openpal::LogFilters levels;
 };

 Logger(const std::shared_ptr<ILogHandler>& backend, const std::string& id, openpal::LogFilters levels);

 static Logger Empty()
 {
  return Logger(nullptr, "", 0);
 }

 void Log(const LogFilters& filters, const char* location, const char* message);

 Logger Detach(const std::string& id) const
 {
  return Logger(this->backend, std::make_shared<Settings>(id, this->settings->levels));
 }

 Logger Detach(const std::string& id, openpal::LogFilters levels) const
 {
  return Logger(this->backend, std::make_shared<Settings>(id, levels));
 }

 Logger Detach(openpal::LogFilters levels) const
 {
  return Logger(this->backend, std::make_shared<Settings>(this->settings->id, levels));
 }

 bool IsEnabled(const LogFilters& filters) const;

 LogFilters GetFilters() const
 {
  return this->settings->levels;
 }

 void SetFilters(const openpal::LogFilters& filters)
 {
  this->settings->levels = filters;
 }

 void Rename(const std::string& id)
 {
  this->settings->id = id;
 }

private:

 Logger(const std::shared_ptr<ILogHandler>& backend, const std::shared_ptr<Settings>& settings) :
  backend(backend),
  settings(settings)
 {}

 Logger() = delete;
 Logger& operator=(const Logger&) = delete;

 const std::shared_ptr<ILogHandler> backend;
 const std::shared_ptr<Settings> settings;
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/LoggingConnectionCondition.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogMacros.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogMacros.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/Location.h" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogMacros.h" 2



# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/StringFormatting.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/StringFormatting.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/Logger.h" 1
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/StringFormatting.h" 2

namespace openpal
{
class RSlice;

const uint32_t MAX_LOG_ENTRY_SIZE = 120;
const uint32_t MAX_HEX_PER_LINE = 20;

static_assert(MAX_HEX_PER_LINE < (MAX_LOG_ENTRY_SIZE / 3), "Each hex byte takes 3 characters");

void LogHex(Logger& logger, const openpal::LogFilters& filters, const openpal::RSlice& source, uint32_t firstRowSize, uint32_t otherRowSize);


char* AllocateCopy(char const* alias);

}
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogMacros.h" 2
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/LoggingConnectionCondition.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogLevels.h" 1
# 46 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/logging/LogLevels.h"
namespace openpal
{

namespace logflags
{
const int32_t EVENT = 1 << 0;
const int32_t ERR = 1 << 1;
const int32_t WARN = 1 << 2;
const int32_t INFO = 1 << 3;
const int32_t DBG = 1 << 4;
}

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/LoggingConnectionCondition.h" 2

namespace asiopal
{

class LoggingConnectionCondition
{

public:

 LoggingConnectionCondition(openpal::Logger logger) : logger(logger)
 {}

 template <typename Iterator>
 Iterator operator()(const std::error_code& ec, Iterator next)
 {
  if (ec)
  {
   if(logger.IsEnabled(openpal::logflags::WARN)){ char message[openpal::MAX_LOG_ENTRY_SIZE]; snprintf(message, openpal::MAX_LOG_ENTRY_SIZE, "connection error: %s", ec.message().c_str()); logger.Log(openpal::logflags::WARN, "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/LoggingConnectionCondition.h" "(" "44" ")", message); };
  }

  return next;
 }

private:

 openpal::Logger logger;
};

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/TCPClient.h" 2

namespace asiopal
{

class TCPClient final : public std::enable_shared_from_this<TCPClient>, private openpal::Uncopyable
{

public:

 typedef std::function<void(const std::shared_ptr<Executor>& executor, asio::ip::tcp::socket, const std::error_code& ec)> connect_callback_t;

 static std::shared_ptr<TCPClient> Create(
     const openpal::Logger& logger,
     const std::shared_ptr<Executor>& executor,
     const IPEndpoint& remote,
     const std::string& adapter)
 {
  return std::make_shared<TCPClient>(logger, executor, remote, adapter);
 }

 TCPClient(
     const openpal::Logger& logger,
     const std::shared_ptr<Executor>& executor,
     const IPEndpoint& remote,
     const std::string& adapter
 );

 bool Cancel();

 bool BeginConnect(const connect_callback_t& callback);

private:

 void HandleResolveResult(
     const connect_callback_t& callback,
     const asio::ip::tcp::resolver::iterator& endpoints,
     const std::error_code& ec
 );

 bool PostConnectError(const connect_callback_t& callback, const std::error_code& ec);

 bool connecting = false;
 bool canceled = false;

 LoggingConnectionCondition condition;
 const std::shared_ptr<Executor> executor;
 const std::string host;
 const std::string adapter;
 asio::ip::tcp::socket socket;
 asio::ip::tcp::endpoint remoteEndpoint;
 asio::ip::tcp::endpoint localEndpoint;
 asio::ip::tcp::resolver resolver;
};


}
# 23 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/asiopal/TCPClient.cpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/SocketHelpers.h" 1
# 30 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/asiopal/SocketHelpers.h"
namespace asiopal
{
class SocketHelpers : private openpal::StaticOnly
{

public:



 template <class SocketType>
 static void BindToLocalAddress(const std::string& address, asio::ip::tcp::endpoint& endpoint, SocketType& socket, std::error_code& ec)
 {
  auto string = address.empty() ? "0.0.0.0" : address;
  auto addr = asio::ip::address::from_string(string, ec);
  if (!ec)
  {
   endpoint.address(addr);
   socket.open(asio::ip::tcp::v4(), ec);
   if (!ec)
   {
    socket.bind(endpoint, ec);
   }
  }
 }
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/asiopal/TCPClient.cpp" 2

namespace asiopal
{

TCPClient::TCPClient(
    const openpal::Logger& logger,
    const std::shared_ptr<Executor>& executor,
    const IPEndpoint& remote,
    const std::string& adapter
) :
 condition(logger),
 executor(executor),
 host(remote.address),
 adapter(adapter),
 socket(executor->strand.get_io_service()),
 remoteEndpoint(asio::ip::tcp::v4(), remote.port),
 localEndpoint(),
 resolver(executor->strand.get_io_service())
{}


bool TCPClient::Cancel()
{
 if (this->canceled || !this->connecting)
 {
  return false;
 }

 std::error_code ec;
 socket.cancel(ec);
 resolver.cancel();
 this->canceled = true;
 return true;
}

bool TCPClient::BeginConnect(const connect_callback_t& callback)
{
 if (connecting || canceled) return false;

 this->connecting = true;

 std::error_code ec;
 SocketHelpers::BindToLocalAddress(this->adapter, this->localEndpoint, this->socket, ec);

 if (ec)
 {
  return this->PostConnectError(callback, ec);
 }

 const auto address = asio::ip::address::from_string(this->host, ec);
 auto self = this->shared_from_this();
 if (ec)
 {

  auto cb = [self, callback](const std::error_code & ec, asio::ip::tcp::resolver::iterator endpoints)
  {
   self->HandleResolveResult(callback, endpoints, ec);
  };

  std::stringstream portstr;
  portstr << remoteEndpoint.port();

  resolver.async_resolve(
      asio::ip::tcp::resolver::query(host, portstr.str()),
      executor->strand.wrap(cb)
  );

  return true;
 }
 else
 {
  remoteEndpoint.address(address);
  auto cb = [self, callback](const std::error_code & ec)
  {
   self->connecting = false;
   if (!self->canceled)
   {
    callback(self->executor, std::move(self->socket), ec);
   }
  };

  socket.async_connect(remoteEndpoint, executor->strand.wrap(cb));
  return true;
 }
}

void TCPClient::HandleResolveResult(
    const connect_callback_t& callback,
    const asio::ip::tcp::resolver::iterator& endpoints,
    const std::error_code& ec
)
{
 if (ec)
 {
  this->PostConnectError(callback, ec);
 }
 else
 {

  auto cb = [self = shared_from_this(), callback](const std::error_code & ec, asio::ip::tcp::resolver::iterator endpoints)
  {
   self->connecting = false;
   if (!self->canceled)
   {
    callback(self->executor, std::move(self->socket), ec);
   }
  };

  asio::async_connect(this->socket, endpoints, this->condition, this->executor->strand.wrap(cb));
 }
}

bool TCPClient::PostConnectError(const connect_callback_t& callback, const std::error_code& ec)
{
 auto cb = [self = shared_from_this(), ec, callback]()
 {
  self->connecting = false;
  if (!self->canceled)
  {
   callback(self->executor, std::move(self->socket), ec);
  }
 };
 executor->strand.post(cb);
 return true;
}

}
