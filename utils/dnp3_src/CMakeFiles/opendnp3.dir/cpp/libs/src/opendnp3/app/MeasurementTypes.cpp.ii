# 0 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/MeasurementTypes.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/MeasurementTypes.cpp"
# 21 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/MeasurementTypes.cpp"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/MeasurementTypes.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/MeasurementTypes.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/BaseMeasurementTypes.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/BaseMeasurementTypes.h"
# 1 "/usr/include/c++/15/cstdint" 1 3
# 40 "/usr/include/c++/15/cstdint" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvariadic-macros"

#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wc++23-extensions"
# 336 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;


#pragma GCC visibility push(default)


  extern "C++" __attribute__ ((__noreturn__, __always_inline__))
  inline void __terminate() noexcept
  {
    void terminate() noexcept __attribute__ ((__noreturn__,__cold__));
    terminate();
  }
#pragma GCC visibility pop
}
# 369 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 573 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
#pragma GCC visibility push(default)




  __attribute__((__always_inline__))
  constexpr inline bool
  __is_constant_evaluated() noexcept
  {





    return __builtin_is_constant_evaluated();



  }
#pragma GCC visibility pop
}
# 617 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
#pragma GCC visibility push(default)

  extern "C++" __attribute__ ((__noreturn__)) __attribute__((__cold__))
  void
  __glibcxx_assert_fail
    (const char* __file, int __line, const char* __function,
     const char* __condition)
  noexcept;
#pragma GCC visibility pop
}
# 648 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace std
{
  __attribute__((__always_inline__,__visibility__("default")))
  inline void
  __glibcxx_assert_fail()
  { }
}
# 727 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/os_defines.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/15/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 415 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 416 "/usr/include/features.h" 2 3 4
# 523 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 730 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 731 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 732 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 524 "/usr/include/features.h" 2 3 4
# 547 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 548 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/c++/15/bits/os_defines.h" 2 3
# 728 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/15/bits/cpu_defines.h" 1 3
# 731 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 2 3
# 887 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
namespace __gnu_cxx
{
  typedef __decltype(0.0bf16) __bfloat16_t;
}
# 953 "/usr/include/x86_64-linux-gnu/c++/15/bits/c++config.h" 3
#pragma GCC diagnostic pop
# 41 "/usr/include/c++/15/cstdint" 2 3






# 1 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdint.h" 3 4
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-least.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stdint-least.h" 3 4
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
# 42 "/usr/include/stdint.h" 2 3 4





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 60 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 76 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 90 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 12 "/usr/lib/gcc/x86_64-linux-gnu/15/include/stdint.h" 2 3 4
#pragma GCC diagnostic pop
# 48 "/usr/include/c++/15/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
# 144 "/usr/include/c++/15/cstdint" 3
}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/BaseMeasurementTypes.h" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/DNPTime.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/DNPTime.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/serialization/UInt48Type.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/serialization/UInt48Type.h"

# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/serialization/UInt48Type.h"
namespace openpal
{

class UInt48Type
{

public:

 explicit UInt48Type(int64_t value) : value(value)
 {}

 UInt48Type() : value(0)
 {}

 operator int64_t() const
 {
  return value;
 }

 int64_t value;
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/DNPTime.h" 2

namespace opendnp3
{

typedef openpal::UInt48Type DNPTime;

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/BaseMeasurementTypes.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/Flags.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/Flags.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 1
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h"
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/BinaryQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/BinaryQuality.h"
namespace opendnp3 {




enum class BinaryQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  CHATTER_FILTER = 0x20,

  RESERVED = 0x40,

  STATE = 0x80
};


}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/DoubleBitBinaryQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/DoubleBitBinaryQuality.h"
namespace opendnp3 {




enum class DoubleBitBinaryQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  CHATTER_FILTER = 0x20,

  STATE1 = 0x40,

  STATE2 = 0x80
};


}
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/CounterQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/CounterQuality.h"
namespace opendnp3 {




enum class CounterQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  ROLLOVER = 0x20,

  DISCONTINUITY = 0x40,

  RESERVED = 0x80
};


}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FrozenCounterQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FrozenCounterQuality.h"
namespace opendnp3 {




enum class FrozenCounterQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  ROLLOVER = 0x20,

  DISCONTINUITY = 0x40,

  RESERVED = 0x80
};


}
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/AnalogQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/AnalogQuality.h"
namespace opendnp3 {




enum class AnalogQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  OVERRANGE = 0x20,

  REFERENCE_ERR = 0x40,

  RESERVED = 0x80
};


}
# 29 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/AnalogOutputStatusQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/AnalogOutputStatusQuality.h"
namespace opendnp3 {




enum class AnalogOutputStatusQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  OVERRANGE = 0x20,

  REFERENCE_ERR = 0x40,

  RESERVED = 0x80
};


}
# 31 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/BinaryOutputStatusQuality.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/BinaryOutputStatusQuality.h"
namespace opendnp3 {




enum class BinaryOutputStatusQuality : uint8_t
{

  ONLINE = 0x1,

  RESTART = 0x2,

  COMM_LOST = 0x4,

  REMOTE_FORCED = 0x8,

  LOCAL_FORCED = 0x10,

  RESERVED1 = 0x20,

  RESERVED2 = 0x40,

  STATE = 0x80
};


}
# 32 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/QualityMasks.h" 2

namespace opendnp3
{

template <class T>
inline uint8_t ToUnderlying(T flag)
{
 return static_cast<uint8_t>(flag);
}

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/Flags.h" 2

namespace opendnp3
{




class Flags
{
public:

 Flags() : value(0)
 {}

 Flags(uint8_t value) : value(value)
 {}

 inline bool IsSet(BinaryQuality flag) const
 {
  return IsSetAny(flag);
 }
 inline bool IsSet(AnalogQuality flag) const
 {
  return IsSetAny(flag);
 }
 inline bool IsSet(CounterQuality flag) const
 {
  return IsSetAny(flag);
 }
 inline bool IsSet(FrozenCounterQuality flag) const
 {
  return IsSetAny(flag);
 }
 inline bool IsSet(BinaryOutputStatusQuality flag) const
 {
  return IsSetAny(flag);
 }
 inline bool IsSet(AnalogOutputStatusQuality flag) const
 {
  return IsSetAny(flag);
 }

 inline void Set(BinaryQuality flag)
 {
  SetAny(flag);
 }
 inline void Set(AnalogQuality flag)
 {
  SetAny(flag);
 }
 inline void Set(CounterQuality flag)
 {
  SetAny(flag);
 }
 inline void Set(FrozenCounterQuality flag)
 {
  SetAny(flag);
 }
 inline void Set(BinaryOutputStatusQuality flag)
 {
  SetAny(flag);
 }
 inline void Set(AnalogOutputStatusQuality flag)
 {
  SetAny(flag);
 }

 uint8_t value;

protected:

 template <class T>
 bool IsSetAny(T flag) const
 {
  return (value & static_cast<uint8_t>(flag)) != 0;
 }

 template <class T>
 void SetAny(T flag)
 {
  value |= static_cast<uint8_t>(flag);
 }
};

}
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/BaseMeasurementTypes.h" 2

namespace opendnp3
{




class Measurement
{
public:

 Flags flags;
 DNPTime time;

protected:

 Measurement()
 {}

 Measurement(Flags flags) : flags(flags)
 {}

 Measurement(Flags flags, DNPTime time) : flags(flags), time(time)
 {}

};



template <class T>
class TypedMeasurement : public Measurement
{
public:

 T value;

 typedef T Type;

protected:

 TypedMeasurement(): Measurement(), value(0) {}
 TypedMeasurement(Flags flags) : Measurement(flags), value(0) {}
 TypedMeasurement(T value, Flags flags) : Measurement(flags), value(value) {}
 TypedMeasurement(T value, Flags flags, DNPTime time) : Measurement(flags, time), value(value) {}
};

}
# 25 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/MeasurementTypes.h" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/DoubleBit.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/DoubleBit.h"
namespace opendnp3 {




enum class DoubleBit : uint8_t
{

  INTERMEDIATE = 0x0,

  DETERMINED_OFF = 0x1,

  DETERMINED_ON = 0x2,

  INDETERMINATE = 0x3
};

uint8_t DoubleBitToType(DoubleBit arg);
DoubleBit DoubleBitFromType(uint8_t arg);
char const* DoubleBitToString(DoubleBit arg);

}
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/MeasurementTypes.h" 2
# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/IntervalUnits.h" 1
# 26 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/IntervalUnits.h"
namespace opendnp3 {




enum class IntervalUnits : uint8_t
{

  NoRepeat = 0x0,

  Milliseconds = 0x1,

  Seconds = 0x2,

  Minutes = 0x3,

  Hours = 0x4,

  Days = 0x5,

  Weeks = 0x6,

  Months7 = 0x7,

  Months8 = 0x8,

  Months9 = 0x9,

  Seasons = 0xA,

  Undefined = 0x7F
};

uint8_t IntervalUnitsToType(IntervalUnits arg);
IntervalUnits IntervalUnitsFromType(uint8_t arg);
char const* IntervalUnitsToString(IntervalUnits arg);

}
# 28 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/MeasurementTypes.h" 2

namespace opendnp3
{






class Binary : public TypedMeasurement<bool>
{
public:

 Binary();

 Binary(bool value);

 Binary(Flags flags);

 Binary(Flags flags, DNPTime time);

 Binary(bool value, Flags flags);

 Binary(bool value, Flags flags, DNPTime time);
};





class DoubleBitBinary : public TypedMeasurement<DoubleBit>
{
public:


 DoubleBitBinary();

 DoubleBitBinary(DoubleBit value);

 DoubleBitBinary(Flags flags);

 DoubleBitBinary(Flags flags, DNPTime time);

 DoubleBitBinary(DoubleBit value, Flags flags);

 DoubleBitBinary(DoubleBit value, Flags flags, DNPTime time);

private:

 static const uint8_t ValueMask = 0xC0;
 static const uint8_t QualityMask = 0x3F;

 static DoubleBit GetValue(Flags flags);

 static Flags GetFlags(Flags flags, DoubleBit state);
};







class BinaryOutputStatus : public TypedMeasurement<bool>
{
public:

 BinaryOutputStatus();

 BinaryOutputStatus(bool value);

 BinaryOutputStatus(Flags flags);

 BinaryOutputStatus(Flags flags, DNPTime time);

 BinaryOutputStatus(bool value, Flags flags);

 BinaryOutputStatus(bool value, Flags flags, DNPTime time);

};






class Analog : public TypedMeasurement<double>
{
public:

 Analog();

 Analog(double value);

 Analog(double value, Flags flags);

 Analog(double value, Flags flags, DNPTime time);
};





class Counter : public TypedMeasurement<uint32_t>
{
public:

 Counter();

 Counter(uint32_t value);

 Counter(uint32_t value, Flags flags);

 Counter(uint32_t value, Flags flags, DNPTime time);
};




class FrozenCounter : public TypedMeasurement<uint32_t>
{
public:

 FrozenCounter();

 FrozenCounter(uint32_t value);

 FrozenCounter(uint32_t value, Flags flags);

 FrozenCounter(uint32_t value, Flags flags, DNPTime time);
};





class AnalogOutputStatus : public TypedMeasurement<double>
{
public:

 AnalogOutputStatus();

 AnalogOutputStatus(double value);

 AnalogOutputStatus(double value, Flags flags);

 AnalogOutputStatus(double value, Flags flags, DNPTime time);
};





class TimeAndInterval
{
public:

 TimeAndInterval();

 TimeAndInterval(DNPTime time, uint32_t interval, uint8_t units);

 TimeAndInterval(DNPTime time, uint32_t interval, IntervalUnits units);

 IntervalUnits GetUnitsEnum() const;

 DNPTime time;
 uint32_t interval;
 uint8_t units;
};

}
# 22 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/MeasurementTypes.cpp" 2

# 1 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/src/opendnp3/app/QualityFlags.h" 1
# 27 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/./cpp/libs/src/opendnp3/app/QualityFlags.h"
namespace opendnp3
{

namespace flags
{

enum Quality : uint8_t
{
 ONLINE = 0x01,
 RESTART = 0x02
};

bool GetBinaryValue(Flags flags);

Flags GetBinaryFlags(Flags flags, bool value);

}

}
# 24 "/opt/PLC/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/MeasurementTypes.cpp" 2


namespace opendnp3
{



Binary::Binary() : TypedMeasurement(false, flags::RESTART)
{}

Binary::Binary(bool value) : TypedMeasurement(value, flags::GetBinaryFlags(flags::ONLINE, value))
{}

Binary::Binary(Flags flags) : TypedMeasurement(flags::GetBinaryValue(flags), flags)
{}

Binary::Binary(Flags flags, DNPTime time) : TypedMeasurement(flags::GetBinaryValue(flags), flags, time)
{}

Binary::Binary(bool value, Flags flags) : TypedMeasurement(value, flags::GetBinaryFlags(flags, value))
{}

Binary::Binary(bool value, Flags flags, DNPTime time) : TypedMeasurement(value, flags::GetBinaryFlags(flags, value), time)
{}



DoubleBitBinary::DoubleBitBinary() : TypedMeasurement(DoubleBit::INDETERMINATE, flags::RESTART)
{}

DoubleBitBinary::DoubleBitBinary(DoubleBit value) : TypedMeasurement(value, GetFlags(flags::ONLINE, value))
{}

DoubleBitBinary::DoubleBitBinary(Flags flags) : TypedMeasurement(GetValue(flags), flags)
{}

DoubleBitBinary::DoubleBitBinary(Flags flags, DNPTime time) : TypedMeasurement(GetValue(flags), flags, time)
{}

DoubleBitBinary::DoubleBitBinary(DoubleBit value, Flags flags) : TypedMeasurement(value, GetFlags(flags, value))
{}

DoubleBitBinary::DoubleBitBinary(DoubleBit value, Flags flags, DNPTime time) : TypedMeasurement(value, GetFlags(flags, value), time)
{}

DoubleBit DoubleBitBinary::GetValue(Flags flags)
{

 uint8_t value = flags.value >> 6;
 return DoubleBitFromType(value);
}

Flags DoubleBitBinary::GetFlags(Flags flags, DoubleBit state)
{
 uint8_t value = DoubleBitToType(state) << 6;
 return (QualityMask & flags.value) | value;
}




BinaryOutputStatus::BinaryOutputStatus() : TypedMeasurement(false, flags::RESTART)
{}

BinaryOutputStatus::BinaryOutputStatus(bool value) : TypedMeasurement(value, flags::GetBinaryFlags(flags::ONLINE, value))
{}

BinaryOutputStatus::BinaryOutputStatus(Flags flags) : TypedMeasurement(flags::GetBinaryValue(flags), flags)
{}

BinaryOutputStatus::BinaryOutputStatus(Flags flags, DNPTime time) : TypedMeasurement(flags::GetBinaryValue(flags), flags, time)
{}

BinaryOutputStatus::BinaryOutputStatus(bool value, Flags flags) : TypedMeasurement(value, flags::GetBinaryFlags(flags, value))
{}

BinaryOutputStatus::BinaryOutputStatus(bool value, Flags flags, DNPTime time) : TypedMeasurement(value, flags::GetBinaryFlags(flags, value), time)
{}



Analog::Analog() : TypedMeasurement(flags::RESTART)
{}

Analog::Analog(double value) : TypedMeasurement(value, flags::ONLINE)
{}

Analog::Analog(double value, Flags flags) : TypedMeasurement(value, flags)
{}

Analog::Analog(double value, Flags flags, DNPTime time) : TypedMeasurement<double>(value, flags, time)
{}






Counter::Counter() : TypedMeasurement(0, flags::RESTART) {}

Counter::Counter(uint32_t value) : TypedMeasurement<uint32_t>(value, flags::ONLINE)
{}

Counter::Counter(uint32_t value, Flags flags) : TypedMeasurement<uint32_t>(value, flags)
{}

Counter::Counter(uint32_t value, Flags flags, DNPTime time) : TypedMeasurement<uint32_t>(value, flags, time)
{}




FrozenCounter::FrozenCounter() : TypedMeasurement(0, flags::RESTART) {}

FrozenCounter::FrozenCounter(uint32_t value) : TypedMeasurement<uint32_t>(value, flags::ONLINE)
{}

FrozenCounter::FrozenCounter(uint32_t value, Flags flags) : TypedMeasurement<uint32_t>(value, flags)
{}

FrozenCounter::FrozenCounter(uint32_t value, Flags flags, DNPTime time) : TypedMeasurement<uint32_t>(value, flags, time)
{}



AnalogOutputStatus::AnalogOutputStatus() : TypedMeasurement<double>(flags::RESTART) {}

AnalogOutputStatus::AnalogOutputStatus(double value) : TypedMeasurement<double>(value, flags::ONLINE)
{}

AnalogOutputStatus::AnalogOutputStatus(double value, Flags flags) : TypedMeasurement<double>(value, flags)
{}

AnalogOutputStatus::AnalogOutputStatus(double value, Flags flags, DNPTime time) : TypedMeasurement<double>(value, flags, time)
{}



TimeAndInterval::TimeAndInterval() : time(0), interval(0), units(0)
{}

TimeAndInterval::TimeAndInterval(DNPTime time_, uint32_t interval_, uint8_t units_) :
 time(time_),
 interval(interval_),
 units(units_)
{}

TimeAndInterval::TimeAndInterval(DNPTime time_, uint32_t interval_, IntervalUnits units_) :
 time(time_),
 interval(interval_),
 units(static_cast<uint8_t>(units_))
{}

IntervalUnits TimeAndInterval::GetUnitsEnum() const
{
 return IntervalUnitsFromType(units);
}

}
